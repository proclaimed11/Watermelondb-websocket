/* eslint-disable camelcase */
import { Command, Flags, ux } from '@oclif/core';
import inquirer from 'inquirer';
import ora from 'ora';
import { generateCommonDeployQuestions } from '../../commands.utils.js';
import * as PowerSyncClient from '../../service/powersync.client.js';
import { bold, checkThatEnvVariablesAreSet, green, red, updateEnvFileVariableValue } from '../../utils.js';
export default class InstanceCreate extends Command {
    static description = 'Create a new instance.';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    static flags = {
        databaseName: Flags.string({ char: 'n', description: 'Name of the database.' }),
        databasePassword: Flags.string({ char: 'p', description: 'Password of the database.', hidden: true }),
        databaseUsername: Flags.string({ char: 'u', description: 'Username of the database.', hidden: true }),
        hostname: Flags.string({ char: 'h', description: 'Hostname to connect to database.' }),
        jwksUri: Flags.string({ char: 'w', description: 'JWKS URI (must include https://).' }),
        jwtAudiences: Flags.string({ char: 'a', default: '', description: 'JWT audiences (comma separated).' }),
        name: Flags.string({ char: 'i', description: 'Name of the instance.' }),
        port: Flags.integer({ char: 'o', description: 'Port number to connect to database.' }),
        region: Flags.string({ char: 'r', description: 'Region to deploy instance to.' }),
        skipInteraction: Flags.boolean({ char: 's', description: 'Skip interactivity.' }),
        useSupabaseAuth: Flags.boolean({ allowNo: true, char: 'b', description: 'Use Supabase auth.' })
    };
    async run() {
        checkThatEnvVariablesAreSet(this.config.bin);
        const { flags } = await this.parse(InstanceCreate);
        const regions = await PowerSyncClient.getRegions();
        let answers = {
            databaseName: undefined,
            databasePassword: undefined,
            databaseUsername: undefined,
            hostname: undefined,
            jwksAudiences: undefined,
            jwksUri: undefined,
            name: undefined,
            port: undefined,
            region: undefined,
            useSupabaseAuth: undefined
        };
        if (!flags.skipInteraction) {
            const questions = [
                {
                    message: 'What do you want to name your instance?',
                    name: 'name',
                    type: 'input',
                    validate(value) {
                        return value.length > 3 ? true : 'Please enter a name with at least 3 characters.';
                    },
                    when: !flags.name
                },
                {
                    choices: regions.map((region) => region.toUpperCase()),
                    message: 'What region do you want to use?',
                    name: 'region',
                    type: 'list',
                    when: !flags.region
                },
                ...generateCommonDeployQuestions(flags)
            ];
            answers = await inquirer.prompt(questions);
        }
        const instanceName = flags.name || answers.name;
        const port = flags.port || answers.port;
        const password = flags.databasePassword || answers.databasePassword;
        const hostname = flags.hostname || answers.hostname;
        const databaseName = flags.databaseName || answers.databaseName;
        const databaseUsername = flags.databaseUsername || answers.databaseUsername;
        const region = flags.region?.toLowerCase() || answers.region?.toLowerCase();
        const useSupabaseAuth = flags.useSupabaseAuth || answers.useSupabaseAuth;
        const jwksUri = flags.jwksUri || answers.jwksUri;
        const answerAudiences = answers.jwksAudiences ? answers.jwksAudiences.split(',') : [];
        const flagsAudiences = flags.jwksAudiences ? flags.jwksAudiences.split(',') : [];
        const audiences = flagsAudiences || answerAudiences;
        const connection = {
            database: databaseName,
            debug_api: false,
            hostname,
            name: 'Default',
            password: {
                secret: password
            },
            port: Number(port),
            sslmode: 'verify-full',
            tag: 'default',
            type: 'postgresql',
            username: databaseUsername
        };
        const config = {
            client_auth: {
                additional_audiences: audiences || undefined,
                jwks_uri: jwksUri || undefined,
                supabase: useSupabaseAuth
            },
            region,
            replication: {
                connections: [connection]
            }
        };
        const connectionResponse = await PowerSyncClient.testConnection(connection);
        if (connectionResponse.error) {
            return ux.error(red(`There was an issue testing the connection from the PowerSync service to your database: ${connectionResponse.error}. Please double-check your entered values.`), { exit: 1 });
        }
        const spinner = ora({
            prefixText: 'Creating instance.\n',
            spinner: 'moon',
            suffixText: '\nThis may take a few minutes.\n'
        });
        spinner.start();
        const instance = await PowerSyncClient.createInstance(instanceName);
        await PowerSyncClient.deployInstance(config, instance.id);
        let status = 'pending';
        status = await PowerSyncClient.waitForStatusChange(instance.id);
        spinner.stop();
        if (status === 'failed') {
            return ux.error(red(`There was an error creating the instance. Please try again.`), { exit: 1 });
        }
        updateEnvFileVariableValue(PowerSyncClient.ENV_VARIABLES.INSTANCE_ID, instance.id);
        ux.log(green(`Instance with id ${bold(instance.id)} has been created successfully.`));
        ux.log(green(`Current instance has been set to ${bold(instance.id)}.`));
    }
}
