import { Command, Flags, ux } from '@oclif/core';
import clipboard from 'clipboardy';
import inquirer from 'inquirer';
import * as PowerSyncClient from '../../service/powersync.client.js';
import { bold, checkThatEnvVariablesAreSet, convertSeconds, green } from '../../utils.js';
export default class InstanceGenerateDevToken extends Command {
    static description = 'Generate a developer token using the Token subject/ User ID.';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    static flags = {
        expiresInSeconds: Flags.string({
            char: 'e',
            description: 'The token expiry in seconds.'
        }),
        userId: Flags.string({ char: 'u', description: 'The Token subject/User ID for the developer token' })
    };
    async run() {
        checkThatEnvVariablesAreSet(this.config.bin, true);
        const { flags } = await this.parse(InstanceGenerateDevToken);
        const questions = [
            {
                message: 'Please enter the Token subject/ User ID to use for the developer token.',
                name: 'userId',
                type: 'input',
                when: !flags.userId
            },
            {
                default: 43_200,
                message: 'Please enter the token expiry in seconds (Defaults to 12 hours).',
                name: 'expiresInSeconds',
                type: 'input',
                validate(value) {
                    const number = Number.parseFloat(value);
                    if (Number.isNaN(number)) {
                        return 'Please enter a valid number.';
                    }
                    return String(value).length > 0 ? true : 'Please enter a valid number.';
                },
                when: !flags.expiresInSeconds
            }
        ];
        const answers = await inquirer.prompt(questions);
        const userId = flags.userId || answers.userId;
        const expiresInSeconds = Number(flags.expiresInSeconds) || answers.expiresInSeconds;
        const developerToken = await PowerSyncClient.generateDevToken(userId, expiresInSeconds);
        clipboard.writeSync(developerToken);
        clipboard.readSync();
        ux.log(green(`Developer token generated successfully.
Token has been copied to your clipboard.
Token details:
    Expires in: ${bold(convertSeconds(expiresInSeconds))}
    JWT:
    ${bold(developerToken)}`));
    }
}
