import { Command, Flags, ux } from '@oclif/core';
import inquirer from 'inquirer';
import fs from 'node:fs';
import ora from 'ora';
import * as PowerSyncClient from '../../../service/powersync.client.js';
import { bold, checkThatEnvVariablesAreSet, green, red } from '../../../utils.js';
export default class SyncRulesDeploy extends Command {
    static description = 'Deploy sync rules from a local sync rules config file to the current instance.';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --filePath path/to/file',
        '<%= config.bin %> <%= command.id %> -f path/to/file'
    ];
    static flags = {
        filePath: Flags.string({ char: 'f', description: 'Path to the sync rules config file.', required: true }),
        skipConfirmation: Flags.boolean({ char: 's', description: 'Ignore confirmation question.' })
    };
    async run() {
        checkThatEnvVariablesAreSet(this.config.bin, true);
        const { flags } = await this.parse(SyncRulesDeploy);
        const questions = [
            {
                message: 'Are you sure you want to do deploy sync files?',
                name: 'areYouSure',
                type: 'confirm',
                when: !flags.skipConfirmation
            }
        ];
        const answers = await inquirer.prompt(questions);
        if (!answers.areYouSure && !flags.skipConfirmation) {
            return ux.log(red('Sync files were not deployed.'));
        }
        const syncRules = fs.readFileSync(flags.filePath, 'utf8');
        const spinner = ora({
            prefixText: 'Deploying sync rules to instance.\n',
            spinner: 'moon',
            suffixText: '\nThis may take a few minutes.\n'
        });
        spinner.start();
        const instance = await PowerSyncClient.deploySyncRules(syncRules);
        let status = 'pending';
        status = await PowerSyncClient.waitForStatusChange(instance.id);
        spinner.stop();
        if (status === 'failed') {
            return ux.error(red('There was an error creating the instance. Please try again.'), { exit: 1 });
        }
        ux.log(green(`Sync rules have successfully been deployed to instance with id ${bold(instance.id)}.`));
    }
}
