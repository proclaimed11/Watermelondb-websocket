import { Command, Flags, ux } from '@oclif/core';
import inquirer from 'inquirer';
import fs from 'node:fs';
import { LANGUAGES } from '../../../constants.js';
import * as PowerSyncClient from '../../../service/powersync.client.js';
import { checkThatEnvVariablesAreSet, green, red } from '../../../utils.js';
export default class SyncRulesGenerateSchema extends Command {
    static description = 'Generate schema in your language from your sync rules config file.';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --filePath path/to/file',
        '<%= config.bin %> <%= command.id %> -f path/to/file'
    ];
    static flags = {
        filePath: Flags.string({ char: 'f', description: 'Path to the sync rules config file.', required: true }),
        language: Flags.string({
            char: 'l',
            description: 'Choose language for output.',
            options: LANGUAGES
        })
    };
    async run() {
        checkThatEnvVariablesAreSet(this.config.bin, true);
        const { flags } = await this.parse(SyncRulesGenerateSchema);
        const questions = [
            {
                choices: LANGUAGES,
                message: 'Which language would you like to output to?',
                name: 'language',
                type: 'list',
                when: !flags.language
            }
        ];
        const answers = await inquirer.prompt(questions);
        const schema = await PowerSyncClient.getInstanceSchema();
        const parsedSchema = new PowerSyncClient.StaticSchema(schema.connections);
        const syncRulesFromFile = fs.readFileSync(flags.filePath, 'utf8');
        const syncRules = PowerSyncClient.SqlSyncRules.fromYaml(syncRulesFromFile, {
            schema: parsedSchema,
            throwOnError: false
        });
        const { errors } = syncRules;
        if (errors.length > 0) {
            ux.log(red(`❌ Sync rule errors found:`));
            errors.map((error) => {
                return ux.log(red(error.message));
            });
            return ux.exit(1);
        }
        const language = flags.language || answers.language;
        const generator = PowerSyncClient.schemaGenerators[language];
        const languageSchema = await generator.generate(syncRules, parsedSchema);
        ux.log(green(languageSchema));
    }
}
