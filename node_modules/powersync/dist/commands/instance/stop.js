import { Command, Flags, ux } from '@oclif/core';
import inquirer from 'inquirer';
import ora from 'ora';
import * as PowerSyncClient from '../../service/powersync.client.js';
import { bold, checkThatEnvVariablesAreSet, red, yellow } from '../../utils.js';
export default class InstanceDeactivate extends Command {
    static description = 'Stop the current instance.';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    static flags = {
        skipConfirmation: Flags.boolean({ char: 's', description: 'Ignore confirmation question.' })
    };
    async run() {
        checkThatEnvVariablesAreSet(this.config.bin, true);
        const { flags } = await this.parse(InstanceDeactivate);
        const questions = [
            {
                message: 'Are you sure you want to do stop the instance?',
                name: 'areYouSure',
                type: 'confirm',
                when: !flags.skipConfirmation
            }
        ];
        const answers = await inquirer.prompt(questions);
        if (!answers.areYouSure && !flags.skipConfirmation) {
            return ux.log('Instance will not be stopped.');
        }
        const spinner = ora({
            prefixText: 'Stopping instance.\n ',
            spinner: 'moon',
            suffixText: '\nThis may take a few minutes.\n'
        });
        spinner.start();
        const instance = await PowerSyncClient.deactivateInstance();
        let status = 'pending';
        status = await PowerSyncClient.waitForStatusChange(instance.id);
        spinner.stop();
        if (status === 'failed') {
            return ux.error(red(`There was an error stopping the instance. Please try again.`), { exit: 1 });
        }
        ux.log(yellow(`Instance with id ${bold(instance.id)} has been stopped.`));
    }
}
