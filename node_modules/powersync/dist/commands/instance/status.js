import { Command, Flags, ux } from '@oclif/core';
import * as PowerSyncClient from '../../service/powersync.client.js';
import { checkThatEnvVariablesAreSet, green, red } from '../../utils.js';
export default class InstanceStatus extends Command {
    static description = 'View the status of the current instance. View the status of a different instance by using flags.';
    static examples = [
        '<%= config.bin %> <%= command.id %>',
        '<%= config.bin %> <%= command.id %> --orgId=1234 --projectId=1234 --instanceId=1234 --authToken=1234'
    ];
    static flags = {
        authToken: Flags.string({
            char: 't',
            description: 'Override current auth token.'
        }),
        instanceId: Flags.string({
            char: 'i',
            description: 'Override current instance by providing the ID of a different instance.'
        }),
        orgId: Flags.string({
            char: 'o',
            description: 'Override current organization by providing the ID of a different organization.'
        }),
        projectId: Flags.string({
            char: 'p',
            description: 'Override current project by providing the ID of a different project.'
        })
    };
    async run() {
        const { flags } = await this.parse(InstanceStatus);
        if (!flags.authToken || !flags.instanceId || !flags.orgId || !flags.projectId) {
            checkThatEnvVariablesAreSet(this.config.bin, true);
        }
        const diagnostics = await PowerSyncClient.getInstanceDiagnostics({
            authToken: flags.authToken,
            instanceId: flags.instanceId,
            orgId: flags.orgId,
            projectId: flags.projectId
        });
        const { errors } = diagnostics.connections[0];
        if (errors.length > 0) {
            ux.log(red(`❌ Errors found:`));
            errors.map((error) => {
                ux.log(red(`Level: ${error.level}`));
                return ux.log(red(`Message: ${error.message}\n`));
            });
            return ux.exit(1);
        }
        ux.log(green(`✅ Instance is operational and no errors were found.`));
    }
}
