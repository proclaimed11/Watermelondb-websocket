/* eslint-disable camelcase */
import { Command, Flags, ux } from '@oclif/core';
import inquirer from 'inquirer';
import ora from 'ora';
import { generateCommonDeployQuestions } from '../../commands.utils.js';
import * as PowerSyncClient from '../../service/powersync.client.js';
import { bold, checkThatEnvVariablesAreSet, green, red } from '../../utils.js';
export default class InstanceDeploy extends Command {
    static description = 'Deploy changes to an existing instance.';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    static flags = {
        databaseName: Flags.string({ char: 'n', description: 'Name of the database.' }),
        databasePassword: Flags.string({ char: 'p', description: 'Password of the database.', hidden: true }),
        databaseUsername: Flags.string({ char: 'u', description: 'Username of the database.', hidden: true }),
        hostname: Flags.string({ char: 'h', description: 'Hostname to connect to database.' }),
        jwksUri: Flags.string({ char: 'w', description: 'JWKS URI (must include https://).' }),
        jwtAudiences: Flags.string({ char: 'a', description: 'JWT audiences (comma separated).' }),
        port: Flags.integer({ char: 'o', description: 'Port number to connect to database.' }),
        skipInteraction: Flags.boolean({ char: 's', description: 'Skip interactivity.' }),
        useSupabaseAuth: Flags.boolean({ allowNo: true, char: 'b', description: 'Use Supabase auth.' })
    };
    async run() {
        checkThatEnvVariablesAreSet(this.config.bin, true);
        const { flags } = await this.parse(InstanceDeploy);
        let answers = {
            databaseName: undefined,
            databasePassword: undefined,
            databaseUsername: undefined,
            hostname: undefined,
            jwksAudiences: undefined,
            jwksUri: undefined,
            port: undefined,
            useSupabaseAuth: undefined
        };
        if (!flags.skipInteraction) {
            const questions = generateCommonDeployQuestions(flags);
            answers = await inquirer.prompt(questions);
        }
        const port = flags.port || answers.port;
        const password = flags.databasePassword || answers.databasePassword;
        const hostname = flags.hostname || answers.hostname;
        const databaseName = flags.databaseName || answers.databaseName;
        const databaseUsername = flags.databaseUsername || answers.databaseUsername;
        const useSupabaseAuth = flags.useSupabaseAuth || answers.useSupabaseAuth;
        const jwksUri = flags.jwksUri || answers.jwksUri;
        const answerAudiences = answers.jwksAudiences ? answers.jwksAudiences.split(',') : [];
        const flagsAudiences = flags.jwksAudiences ? flags.jwksAudiences.split(',') : [];
        const audiences = flagsAudiences || answerAudiences;
        const instanceConfig = await PowerSyncClient.getInstanceConfig();
        const { region } = instanceConfig.config;
        const config = {
            client_auth: {
                additional_audiences: audiences || undefined,
                jwks_uri: jwksUri || undefined,
                supabase: useSupabaseAuth
            },
            region,
            replication: {
                connections: [
                    {
                        database: databaseName,
                        debug_api: false,
                        hostname,
                        name: 'Default',
                        password: {
                            secret: password
                        },
                        port: Number(port),
                        sslmode: 'verify-full',
                        tag: 'default',
                        type: 'postgresql',
                        username: databaseUsername
                    }
                ]
            }
        };
        const spinner = ora({
            prefixText: 'Deploying instance.\n',
            spinner: 'moon',
            suffixText: '\nThis may take a few minutes.\n'
        });
        spinner.start();
        const instance = await PowerSyncClient.deployInstance(config, process.env.INSTANCE_ID);
        let status = 'pending';
        status = await PowerSyncClient.waitForStatusChange(instance.id);
        spinner.stop();
        if (status === 'failed') {
            ux.error(red(`There was an error deploying the instance. Please try again.`), { exit: 1 });
        }
        ux.log(green(`Instance with id ${bold(instance.id)} has been deployed successfully.`));
    }
}
