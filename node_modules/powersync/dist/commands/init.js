import { Command, ux } from '@oclif/core';
import inquirer from 'inquirer';
import fs from 'node:fs';
import { ENV_FILE_PATH, POWERSYNC_DIRECTORY } from '../constants.js';
import * as AccountsClient from '../service/accounts.client.js';
import { green, red } from '../utils.js';
export default class Init extends Command {
    static description = 'Initialize the CLI.';
    static examples = ['<%= config.bin %> <%= command.id %>'];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async catch(error) {
        if ('errorData' in error && error.errorData.status === 401) {
            return ux.error(red(`You are using an invalid API token. Please double-check your token.`), { exit: 1 });
        }
        throw error;
    }
    async run() {
        const authTokenQuestions = [
            {
                message: 'Enter your API token (https://docs.powersync.com/usage/tools/cli#personal-access-token):',
                name: 'authToken',
                type: 'password',
                validate(value) {
                    return value.length > 0 ? true : 'Please enter your API token.';
                }
            }
        ];
        const authTokenAnswers = await inquirer.prompt(authTokenQuestions);
        const organizations = await AccountsClient.getOrgs(authTokenAnswers.authToken);
        const numberOfOrganizations = organizations.count;
        const SUPPORT_MESSAGE = 'Please contact support for assistance - support@powersync.com.';
        if (numberOfOrganizations === 0) {
            return ux.error(red(`No organizations found. ${SUPPORT_MESSAGE}`), {
                exit: 1
            });
        }
        if (numberOfOrganizations > 1) {
            return ux.error(red(`Multiple organizations found. ${SUPPORT_MESSAGE}`), { exit: 1 });
        }
        const projects = await AccountsClient.getPowerSyncProjects(authTokenAnswers.authToken);
        if (projects.length === 0) {
            return ux.error(red(`No projects found. ${SUPPORT_MESSAGE}`), { exit: 1 });
        }
        const projectQuestions = [
            {
                choices: projects,
                message: 'Which project would you like to use?',
                name: 'projectId',
                type: 'list'
            }
        ];
        const projectAnswers = await inquirer.prompt(projectQuestions);
        const orgId = organizations.objects[0].id;
        if (!fs.existsSync(POWERSYNC_DIRECTORY)) {
            fs.mkdirSync(POWERSYNC_DIRECTORY);
        }
        if (fs.existsSync(ENV_FILE_PATH)) {
            fs.unlinkSync(ENV_FILE_PATH);
        }
        fs.writeFileSync(ENV_FILE_PATH, `ORG_ID=${orgId}\nPROJECT_ID=${projectAnswers.projectId}\nAUTH_TOKEN=${authTokenAnswers.authToken}\n`);
        ux.log(green('CLI has been initialized'));
        ux.log(`Run ${green(`"npx ${this.config.bin} instances"`)} to view your instances or`);
        ux.log(`run ${green(`"npx ${this.config.bin} instance create"`)} to create an instance or`);
        ux.log(`run ${green(`"npx ${this.config.bin} instance set"`)} to use an already created instance.`);
    }
}
