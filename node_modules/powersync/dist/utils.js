import { ux } from '@oclif/core';
import fs from 'node:fs';
import { ENV_FILE_PATH } from './constants.js';
import { ENV_VARIABLES } from './service/powersync.client.js';
// Add cliName as argument because we don't have access to this.config.bin in this file
export const checkThatEnvVariablesAreSet = (cliName, requiresInstanceId = false) => {
    const requiredProperties = [ENV_VARIABLES.PROJECT_ID, ENV_VARIABLES.AUTH_TOKEN, ENV_VARIABLES.ORG_ID];
    const missingProperties = requiredProperties.filter((prop) => !process.env[prop]);
    const envFileExists = fs.existsSync(ENV_FILE_PATH);
    if (missingProperties.length > 0 && envFileExists) {
        ux.error(red(`CLI has not been initialized correctly. Please run ${green(`"${cliName} init"`)}.`), { exit: 1 });
    }
    if (missingProperties.length > 0 && !envFileExists) {
        ux.error(red(`Please include ${green(missingProperties.join(', '))} when you run the command or run ${green(`"${cliName} init"`)}.`), { exit: 1 });
    }
    const isInstanceIdRequired = requiresInstanceId && !process.env[ENV_VARIABLES.INSTANCE_ID];
    if (isInstanceIdRequired) {
        return ux.error(red(`This command requires a configured instance. Please set one by running ${green('"powersync instance set"')} or include it when you run the command ${green('"INSTANCE_ID=your_instance_id"')}.`), {
            exit: 1
        });
    }
};
export const updateEnvFileVariableValue = (variableName, newValue) => {
    if (!fs.existsSync(ENV_FILE_PATH)) {
        // We assume they are either using flags or exporting the variables themselves
        return;
    }
    try {
        const data = fs.readFileSync(ENV_FILE_PATH, 'utf8');
        const lines = data.split('\n');
        let variableFound = false;
        // Find and update the desired variable
        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            if (line.startsWith(variableName + '=')) {
                lines[i] = variableName + '=' + newValue;
                variableFound = true;
                break;
            }
        }
        // Variable not found, add it to the end of the file
        if (!variableFound) {
            lines.push(variableName + '=' + newValue);
        }
        const updatedContent = lines.join('\n');
        fs.writeFileSync(ENV_FILE_PATH, updatedContent, 'utf8');
    }
    catch (error) {
        throw new Error('Error updating environment file: ' + error);
    }
};
export const bold = (text) => ux.colorize('bold', text);
export const green = (text) => ux.colorize('green', text);
export const yellow = (text) => ux.colorize('yellow', text);
export const red = (text) => ux.colorize('red', text);
const formatUnit = (value, unit) => `${value} ${unit}${value === 1 ? '' : 's'}`;
export const convertSeconds = (seconds) => {
    if (seconds < 60)
        return formatUnit(seconds, 'second');
    const minutes = Math.floor(seconds / 60);
    if (minutes < 60)
        return formatUnit(minutes, 'minute');
    const hours = Math.floor(minutes / 60);
    const remainingMinutes = minutes % 60;
    if (remainingMinutes === 0)
        return formatUnit(hours, 'hour');
    return `${formatUnit(hours, 'hour')} ${formatUnit(remainingMinutes, 'minute')}`;
};
