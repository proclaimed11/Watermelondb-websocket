import require$$0$4 from 'stream/consumers';
import require$$0 from 'stream/web';
import { Buffer as Buffer$1 } from 'buffer';
import require$$0$2 from 'http';
import require$$0$1 from 'util';
import require$$0$3 from 'https';
import require$$6 from 'stream';
import require$$9 from 'url';
import require$$0$5 from 'fs';
import require$$1$1 from 'path';
import require$$2 from 'os';
import require$$3 from 'crypto';
import { homedir } from 'node:os';
import path$1 from 'node:path';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var f = n.default;
	if (typeof f == "function") {
		var a = function a () {
			if (this instanceof a) {
        return Reflect.construct(f, arguments, this.constructor);
			}
			return f.apply(this, arguments);
		};
		a.prototype = f.prototype;
  } else a = {};
  Object.defineProperty(a, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

var dist$7 = {};

var client = {};

var dist$6 = {};

var nodeClient = {};

var streaming = {};

var web$1 = {};

var crossStream = {};

Object.defineProperty(crossStream, "__esModule", { value: true });
crossStream.ByteLengthStrategy = crossStream.Transform = crossStream.Readable = void 0;
if (typeof window !== 'undefined') {
    crossStream.Readable = ReadableStream;
    crossStream.Transform = TransformStream;
    crossStream.ByteLengthStrategy = ByteLengthQueuingStrategy;
}
else {
    const webstream = require$$0;
    crossStream.Readable = webstream.ReadableStream;
    crossStream.Transform = webstream.TransformStream;
    crossStream.ByteLengthStrategy = webstream.ByteLengthQueuingStrategy;
}

var bson$3 = {};

var bufferArray = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createReadableBufferArray = exports.readBufferFromChunksAndModify = exports.readBufferFromChunks = void 0;
	/**
	 * Read a given `size` number of bytes from a give array of `chunks` as a Buffer. The returned Buffer could be
	 * larger than the requested size. If the chunks array contains less than the requested size then null is
	 * returned
	 */
	const readBufferFromChunks = (chunks, size) => {
	    let batch = [];
	    let current_size = 0;
	    for (const chunk of chunks) {
	        batch.push(chunk);
	        current_size += chunk.length;
	        if (current_size >= size) {
	            return {
	                buffer: Buffer.concat(batch),
	                chunks_read: batch.length
	            };
	        }
	    }
	    return null;
	};
	exports.readBufferFromChunks = readBufferFromChunks;
	/**
	 * Read exactly `size` bytes from a given array of `chunks`, modifying the passed array to remove what
	 * was read.
	 *
	 * If more than `size` is read from the chunks array then the remainder is unshifted back onto the array
	 */
	const readBufferFromChunksAndModify = (chunks, size) => {
	    const res = (0, exports.readBufferFromChunks)(chunks, size);
	    if (!res) {
	        return null;
	    }
	    if (res.buffer.length > size) {
	        chunks.splice(0, res.chunks_read, res.buffer.slice(size));
	        return res.buffer.slice(0, size);
	    }
	    chunks.splice(0, res.chunks_read);
	    return res.buffer;
	};
	exports.readBufferFromChunksAndModify = readBufferFromChunksAndModify;
	/**
	 * Creates a abstraction on top of a compressed set of Buffer chunks that keeps track of the
	 * entire byte size of the chunks array.
	 *
	 * Offers methods to get the byte size, peak at a given amount of data and destructively read
	 * a given amount of data
	 */
	const createReadableBufferArray = () => {
	    let chunks = [];
	    let current_size = 0;
	    return {
	        push(...new_chunks) {
	            const normalized_chunks = new_chunks.map((chunk) => (Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)));
	            chunks.push(...normalized_chunks);
	            current_size = new_chunks.reduce((size, chunk) => {
	                return size + chunk.length;
	            }, current_size);
	        },
	        read(size) {
	            const buffer = (0, exports.readBufferFromChunksAndModify)(chunks, size);
	            if (buffer) {
	                current_size -= size;
	            }
	            return buffer;
	        },
	        peek(size) {
	            if (current_size < size) {
	                return null;
	            }
	            const res = (0, exports.readBufferFromChunks)(chunks, 4);
	            if (!res) {
	                return null;
	            }
	            return res.buffer;
	        },
	        size() {
	            return current_size;
	        }
	    };
	};
	exports.createReadableBufferArray = createReadableBufferArray; 
} (bufferArray));

var constants$3 = {};

Object.defineProperty(constants$3, "__esModule", { value: true });
constants$3.TERMINATOR = void 0;
constants$3.TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);

var encoder = {};

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var _extendStatics = function extendStatics(d, b) {
  _extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) {
      if (b.hasOwnProperty(p)) d[p] = b[p];
    }
  };

  return _extendStatics(d, b);
};

function __extends(d, b) {
  _extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var _assign = function __assign() {
  _assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return _assign.apply(this, arguments);
};

/** @public */
var BSONError = /** @class */ (function (_super) {
    __extends(BSONError, _super);
    function BSONError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, BSONError.prototype);
        return _this;
    }
    Object.defineProperty(BSONError.prototype, "name", {
        get: function () {
            return 'BSONError';
        },
        enumerable: false,
        configurable: true
    });
    return BSONError;
}(Error));
/** @public */
var BSONTypeError = /** @class */ (function (_super) {
    __extends(BSONTypeError, _super);
    function BSONTypeError(message) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, BSONTypeError.prototype);
        return _this;
    }
    Object.defineProperty(BSONTypeError.prototype, "name", {
        get: function () {
            return 'BSONTypeError';
        },
        enumerable: false,
        configurable: true
    });
    return BSONTypeError;
}(TypeError));

function checkForMath(potentialGlobal) {
    // eslint-disable-next-line eqeqeq
    return potentialGlobal && potentialGlobal.Math == Math && potentialGlobal;
}
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
function getGlobal() {
    return (checkForMath(typeof globalThis === 'object' && globalThis) ||
        checkForMath(typeof window === 'object' && window) ||
        checkForMath(typeof self === 'object' && self) ||
        checkForMath(typeof global === 'object' && global) ||
        // eslint-disable-next-line @typescript-eslint/no-implied-eval
        Function('return this')());
}

/**
 * Normalizes our expected stringified form of a function across versions of node
 * @param fn - The function to stringify
 */
function normalizedFunctionString(fn) {
    return fn.toString().replace('function(', 'function (');
}
function isReactNative() {
    var g = getGlobal();
    return typeof g.navigator === 'object' && g.navigator.product === 'ReactNative';
}
var insecureRandomBytes = function insecureRandomBytes(size) {
    var insecureWarning = isReactNative()
        ? 'BSON: For React Native please polyfill crypto.getRandomValues, e.g. using: https://www.npmjs.com/package/react-native-get-random-values.'
        : 'BSON: No cryptographic implementation for random bytes present, falling back to a less secure implementation.';
    console.warn(insecureWarning);
    var result = Buffer$1.alloc(size);
    for (var i = 0; i < size; ++i)
        result[i] = Math.floor(Math.random() * 256);
    return result;
};
var detectRandomBytes = function () {
    {
        var requiredRandomBytes = void 0;
        try {
            requiredRandomBytes = require('crypto').randomBytes;
        }
        catch (e) {
            // keep the fallback
        }
        // NOTE: in transpiled cases the above require might return null/undefined
        return requiredRandomBytes || insecureRandomBytes;
    }
};
var randomBytes = detectRandomBytes();
function isAnyArrayBuffer(value) {
    return ['[object ArrayBuffer]', '[object SharedArrayBuffer]'].includes(Object.prototype.toString.call(value));
}
function isUint8Array(value) {
    return Object.prototype.toString.call(value) === '[object Uint8Array]';
}
function isBigInt64Array(value) {
    return Object.prototype.toString.call(value) === '[object BigInt64Array]';
}
function isBigUInt64Array(value) {
    return Object.prototype.toString.call(value) === '[object BigUint64Array]';
}
function isRegExp(d) {
    return Object.prototype.toString.call(d) === '[object RegExp]';
}
function isMap(d) {
    return Object.prototype.toString.call(d) === '[object Map]';
}
// To ensure that 0.4 of node works correctly
function isDate(d) {
    return isObjectLike(d) && Object.prototype.toString.call(d) === '[object Date]';
}
/**
 * @internal
 * this is to solve the `'someKey' in x` problem where x is unknown.
 * https://github.com/typescript-eslint/typescript-eslint/issues/1071#issuecomment-541955753
 */
function isObjectLike(candidate) {
    return typeof candidate === 'object' && candidate !== null;
}
function deprecate$1(fn, message) {
    var warned = false;
    function deprecated() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        if (!warned) {
            console.warn(message);
            warned = true;
        }
        return fn.apply(this, args);
    }
    return deprecated;
}

/**
 * Makes sure that, if a Uint8Array is passed in, it is wrapped in a Buffer.
 *
 * @param potentialBuffer - The potential buffer
 * @returns Buffer the input if potentialBuffer is a buffer, or a buffer that
 * wraps a passed in Uint8Array
 * @throws BSONTypeError If anything other than a Buffer or Uint8Array is passed in
 */
function ensureBuffer(potentialBuffer) {
    if (ArrayBuffer.isView(potentialBuffer)) {
        return Buffer$1.from(potentialBuffer.buffer, potentialBuffer.byteOffset, potentialBuffer.byteLength);
    }
    if (isAnyArrayBuffer(potentialBuffer)) {
        return Buffer$1.from(potentialBuffer);
    }
    throw new BSONTypeError('Must use either Buffer or TypedArray');
}

// Validation regex for v4 uuid (validates with or without dashes)
var VALIDATION_REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|[0-9a-f]{12}4[0-9a-f]{3}[89ab][0-9a-f]{15})$/i;
var uuidValidateString = function (str) {
    return typeof str === 'string' && VALIDATION_REGEX.test(str);
};
var uuidHexStringToBuffer = function (hexString) {
    if (!uuidValidateString(hexString)) {
        throw new BSONTypeError('UUID string representations must be a 32 or 36 character hex string (dashes excluded/included). Format: "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" or "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx".');
    }
    var sanitizedHexString = hexString.replace(/-/g, '');
    return Buffer$1.from(sanitizedHexString, 'hex');
};
var bufferToUuidHexString = function (buffer, includeDashes) {
    if (includeDashes === void 0) { includeDashes = true; }
    return includeDashes
        ? buffer.toString('hex', 0, 4) +
            '-' +
            buffer.toString('hex', 4, 6) +
            '-' +
            buffer.toString('hex', 6, 8) +
            '-' +
            buffer.toString('hex', 8, 10) +
            '-' +
            buffer.toString('hex', 10, 16)
        : buffer.toString('hex');
};

/** @internal */
var BSON_INT32_MAX$1 = 0x7fffffff;
/** @internal */
var BSON_INT32_MIN$1 = -0x80000000;
/** @internal */
var BSON_INT64_MAX$1 = Math.pow(2, 63) - 1;
/** @internal */
var BSON_INT64_MIN$1 = -Math.pow(2, 63);
/**
 * Any integer up to 2^53 can be precisely represented by a double.
 * @internal
 */
var JS_INT_MAX = Math.pow(2, 53);
/**
 * Any integer down to -2^53 can be precisely represented by a double.
 * @internal
 */
var JS_INT_MIN = -Math.pow(2, 53);
/** Number BSON Type @internal */
var BSON_DATA_NUMBER = 1;
/** String BSON Type @internal */
var BSON_DATA_STRING = 2;
/** Object BSON Type @internal */
var BSON_DATA_OBJECT = 3;
/** Array BSON Type @internal */
var BSON_DATA_ARRAY = 4;
/** Binary BSON Type @internal */
var BSON_DATA_BINARY = 5;
/** Binary BSON Type @internal */
var BSON_DATA_UNDEFINED = 6;
/** ObjectId BSON Type @internal */
var BSON_DATA_OID = 7;
/** Boolean BSON Type @internal */
var BSON_DATA_BOOLEAN = 8;
/** Date BSON Type @internal */
var BSON_DATA_DATE = 9;
/** null BSON Type @internal */
var BSON_DATA_NULL = 10;
/** RegExp BSON Type @internal */
var BSON_DATA_REGEXP = 11;
/** Code BSON Type @internal */
var BSON_DATA_DBPOINTER = 12;
/** Code BSON Type @internal */
var BSON_DATA_CODE = 13;
/** Symbol BSON Type @internal */
var BSON_DATA_SYMBOL = 14;
/** Code with Scope BSON Type @internal */
var BSON_DATA_CODE_W_SCOPE = 15;
/** 32 bit Integer BSON Type @internal */
var BSON_DATA_INT = 16;
/** Timestamp BSON Type @internal */
var BSON_DATA_TIMESTAMP = 17;
/** Long BSON Type @internal */
var BSON_DATA_LONG = 18;
/** Decimal128 BSON Type @internal */
var BSON_DATA_DECIMAL128 = 19;
/** MinKey BSON Type @internal */
var BSON_DATA_MIN_KEY = 0xff;
/** MaxKey BSON Type @internal */
var BSON_DATA_MAX_KEY = 0x7f;
/** Binary Default Type @internal */
var BSON_BINARY_SUBTYPE_DEFAULT = 0;
/** Binary Function Type @internal */
var BSON_BINARY_SUBTYPE_FUNCTION = 1;
/** Binary Byte Array Type @internal */
var BSON_BINARY_SUBTYPE_BYTE_ARRAY = 2;
/** Binary Deprecated UUID Type @deprecated Please use BSON_BINARY_SUBTYPE_UUID_NEW @internal */
var BSON_BINARY_SUBTYPE_UUID = 3;
/** Binary UUID Type @internal */
var BSON_BINARY_SUBTYPE_UUID_NEW = 4;
/** Binary MD5 Type @internal */
var BSON_BINARY_SUBTYPE_MD5 = 5;
/** Encrypted BSON type @internal */
var BSON_BINARY_SUBTYPE_ENCRYPTED = 6;
/** Column BSON type @internal */
var BSON_BINARY_SUBTYPE_COLUMN = 7;
/** Binary User Defined Type @internal */
var BSON_BINARY_SUBTYPE_USER_DEFINED = 128;

/**
 * A class representation of the BSON Binary type.
 * @public
 * @category BSONType
 */
var Binary = /** @class */ (function () {
    /**
     * Create a new Binary instance.
     *
     * This constructor can accept a string as its first argument. In this case,
     * this string will be encoded using ISO-8859-1, **not** using UTF-8.
     * This is almost certainly not what you want. Use `new Binary(Buffer.from(string))`
     * instead to convert the string to a Buffer using UTF-8 first.
     *
     * @param buffer - a buffer object containing the binary data.
     * @param subType - the option binary type.
     */
    function Binary(buffer, subType) {
        if (!(this instanceof Binary))
            return new Binary(buffer, subType);
        if (!(buffer == null) &&
            !(typeof buffer === 'string') &&
            !ArrayBuffer.isView(buffer) &&
            !(buffer instanceof ArrayBuffer) &&
            !Array.isArray(buffer)) {
            throw new BSONTypeError('Binary can only be constructed from string, Buffer, TypedArray, or Array<number>');
        }
        this.sub_type = subType !== null && subType !== void 0 ? subType : Binary.BSON_BINARY_SUBTYPE_DEFAULT;
        if (buffer == null) {
            // create an empty binary buffer
            this.buffer = Buffer$1.alloc(Binary.BUFFER_SIZE);
            this.position = 0;
        }
        else {
            if (typeof buffer === 'string') {
                // string
                this.buffer = Buffer$1.from(buffer, 'binary');
            }
            else if (Array.isArray(buffer)) {
                // number[]
                this.buffer = Buffer$1.from(buffer);
            }
            else {
                // Buffer | TypedArray | ArrayBuffer
                this.buffer = ensureBuffer(buffer);
            }
            this.position = this.buffer.byteLength;
        }
    }
    /**
     * Updates this binary with byte_value.
     *
     * @param byteValue - a single byte we wish to write.
     */
    Binary.prototype.put = function (byteValue) {
        // If it's a string and a has more than one character throw an error
        if (typeof byteValue === 'string' && byteValue.length !== 1) {
            throw new BSONTypeError('only accepts single character String');
        }
        else if (typeof byteValue !== 'number' && byteValue.length !== 1)
            throw new BSONTypeError('only accepts single character Uint8Array or Array');
        // Decode the byte value once
        var decodedByte;
        if (typeof byteValue === 'string') {
            decodedByte = byteValue.charCodeAt(0);
        }
        else if (typeof byteValue === 'number') {
            decodedByte = byteValue;
        }
        else {
            decodedByte = byteValue[0];
        }
        if (decodedByte < 0 || decodedByte > 255) {
            throw new BSONTypeError('only accepts number in a valid unsigned byte range 0-255');
        }
        if (this.buffer.length > this.position) {
            this.buffer[this.position++] = decodedByte;
        }
        else {
            var buffer = Buffer$1.alloc(Binary.BUFFER_SIZE + this.buffer.length);
            // Combine the two buffers together
            this.buffer.copy(buffer, 0, 0, this.buffer.length);
            this.buffer = buffer;
            this.buffer[this.position++] = decodedByte;
        }
    };
    /**
     * Writes a buffer or string to the binary.
     *
     * @param sequence - a string or buffer to be written to the Binary BSON object.
     * @param offset - specify the binary of where to write the content.
     */
    Binary.prototype.write = function (sequence, offset) {
        offset = typeof offset === 'number' ? offset : this.position;
        // If the buffer is to small let's extend the buffer
        if (this.buffer.length < offset + sequence.length) {
            var buffer = Buffer$1.alloc(this.buffer.length + sequence.length);
            this.buffer.copy(buffer, 0, 0, this.buffer.length);
            // Assign the new buffer
            this.buffer = buffer;
        }
        if (ArrayBuffer.isView(sequence)) {
            this.buffer.set(ensureBuffer(sequence), offset);
            this.position =
                offset + sequence.byteLength > this.position ? offset + sequence.length : this.position;
        }
        else if (typeof sequence === 'string') {
            this.buffer.write(sequence, offset, sequence.length, 'binary');
            this.position =
                offset + sequence.length > this.position ? offset + sequence.length : this.position;
        }
    };
    /**
     * Reads **length** bytes starting at **position**.
     *
     * @param position - read from the given position in the Binary.
     * @param length - the number of bytes to read.
     */
    Binary.prototype.read = function (position, length) {
        length = length && length > 0 ? length : this.position;
        // Let's return the data based on the type we have
        return this.buffer.slice(position, position + length);
    };
    /**
     * Returns the value of this binary as a string.
     * @param asRaw - Will skip converting to a string
     * @remarks
     * This is handy when calling this function conditionally for some key value pairs and not others
     */
    Binary.prototype.value = function (asRaw) {
        asRaw = !!asRaw;
        // Optimize to serialize for the situation where the data == size of buffer
        if (asRaw && this.buffer.length === this.position) {
            return this.buffer;
        }
        // If it's a node.js buffer object
        if (asRaw) {
            return this.buffer.slice(0, this.position);
        }
        return this.buffer.toString('binary', 0, this.position);
    };
    /** the length of the binary sequence */
    Binary.prototype.length = function () {
        return this.position;
    };
    Binary.prototype.toJSON = function () {
        return this.buffer.toString('base64');
    };
    Binary.prototype.toString = function (format) {
        return this.buffer.toString(format);
    };
    /** @internal */
    Binary.prototype.toExtendedJSON = function (options) {
        options = options || {};
        var base64String = this.buffer.toString('base64');
        var subType = Number(this.sub_type).toString(16);
        if (options.legacy) {
            return {
                $binary: base64String,
                $type: subType.length === 1 ? '0' + subType : subType
            };
        }
        return {
            $binary: {
                base64: base64String,
                subType: subType.length === 1 ? '0' + subType : subType
            }
        };
    };
    Binary.prototype.toUUID = function () {
        if (this.sub_type === Binary.SUBTYPE_UUID) {
            return new UUID(this.buffer.slice(0, this.position));
        }
        throw new BSONError("Binary sub_type \"".concat(this.sub_type, "\" is not supported for converting to UUID. Only \"").concat(Binary.SUBTYPE_UUID, "\" is currently supported."));
    };
    /** @internal */
    Binary.fromExtendedJSON = function (doc, options) {
        options = options || {};
        var data;
        var type;
        if ('$binary' in doc) {
            if (options.legacy && typeof doc.$binary === 'string' && '$type' in doc) {
                type = doc.$type ? parseInt(doc.$type, 16) : 0;
                data = Buffer$1.from(doc.$binary, 'base64');
            }
            else {
                if (typeof doc.$binary !== 'string') {
                    type = doc.$binary.subType ? parseInt(doc.$binary.subType, 16) : 0;
                    data = Buffer$1.from(doc.$binary.base64, 'base64');
                }
            }
        }
        else if ('$uuid' in doc) {
            type = 4;
            data = uuidHexStringToBuffer(doc.$uuid);
        }
        if (!data) {
            throw new BSONTypeError("Unexpected Binary Extended JSON format ".concat(JSON.stringify(doc)));
        }
        return type === BSON_BINARY_SUBTYPE_UUID_NEW ? new UUID(data) : new Binary(data, type);
    };
    /** @internal */
    Binary.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    Binary.prototype.inspect = function () {
        var asBuffer = this.value(true);
        return "new Binary(Buffer.from(\"".concat(asBuffer.toString('hex'), "\", \"hex\"), ").concat(this.sub_type, ")");
    };
    /**
     * Binary default subtype
     * @internal
     */
    Binary.BSON_BINARY_SUBTYPE_DEFAULT = 0;
    /** Initial buffer default size */
    Binary.BUFFER_SIZE = 256;
    /** Default BSON type */
    Binary.SUBTYPE_DEFAULT = 0;
    /** Function BSON type */
    Binary.SUBTYPE_FUNCTION = 1;
    /** Byte Array BSON type */
    Binary.SUBTYPE_BYTE_ARRAY = 2;
    /** Deprecated UUID BSON type @deprecated Please use SUBTYPE_UUID */
    Binary.SUBTYPE_UUID_OLD = 3;
    /** UUID BSON type */
    Binary.SUBTYPE_UUID = 4;
    /** MD5 BSON type */
    Binary.SUBTYPE_MD5 = 5;
    /** Encrypted BSON type */
    Binary.SUBTYPE_ENCRYPTED = 6;
    /** Column BSON type */
    Binary.SUBTYPE_COLUMN = 7;
    /** User BSON type */
    Binary.SUBTYPE_USER_DEFINED = 128;
    return Binary;
}());
Object.defineProperty(Binary.prototype, '_bsontype', { value: 'Binary' });
var UUID_BYTE_LENGTH = 16;
/**
 * A class representation of the BSON UUID type.
 * @public
 */
var UUID = /** @class */ (function (_super) {
    __extends(UUID, _super);
    /**
     * Create an UUID type
     *
     * @param input - Can be a 32 or 36 character hex string (dashes excluded/included) or a 16 byte binary Buffer.
     */
    function UUID(input) {
        var _this = this;
        var bytes;
        var hexStr;
        if (input == null) {
            bytes = UUID.generate();
        }
        else if (input instanceof UUID) {
            bytes = Buffer$1.from(input.buffer);
            hexStr = input.__id;
        }
        else if (ArrayBuffer.isView(input) && input.byteLength === UUID_BYTE_LENGTH) {
            bytes = ensureBuffer(input);
        }
        else if (typeof input === 'string') {
            bytes = uuidHexStringToBuffer(input);
        }
        else {
            throw new BSONTypeError('Argument passed in UUID constructor must be a UUID, a 16 byte Buffer or a 32/36 character hex string (dashes excluded/included, format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).');
        }
        _this = _super.call(this, bytes, BSON_BINARY_SUBTYPE_UUID_NEW) || this;
        _this.__id = hexStr;
        return _this;
    }
    Object.defineProperty(UUID.prototype, "id", {
        /**
         * The UUID bytes
         * @readonly
         */
        get: function () {
            return this.buffer;
        },
        set: function (value) {
            this.buffer = value;
            if (UUID.cacheHexString) {
                this.__id = bufferToUuidHexString(value);
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns the UUID id as a 32 or 36 character hex string representation, excluding/including dashes (defaults to 36 character dash separated)
     * @param includeDashes - should the string exclude dash-separators.
     * */
    UUID.prototype.toHexString = function (includeDashes) {
        if (includeDashes === void 0) { includeDashes = true; }
        if (UUID.cacheHexString && this.__id) {
            return this.__id;
        }
        var uuidHexString = bufferToUuidHexString(this.id, includeDashes);
        if (UUID.cacheHexString) {
            this.__id = uuidHexString;
        }
        return uuidHexString;
    };
    /**
     * Converts the id into a 36 character (dashes included) hex string, unless a encoding is specified.
     */
    UUID.prototype.toString = function (encoding) {
        return encoding ? this.id.toString(encoding) : this.toHexString();
    };
    /**
     * Converts the id into its JSON string representation.
     * A 36 character (dashes included) hex string in the format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
     */
    UUID.prototype.toJSON = function () {
        return this.toHexString();
    };
    /**
     * Compares the equality of this UUID with `otherID`.
     *
     * @param otherId - UUID instance to compare against.
     */
    UUID.prototype.equals = function (otherId) {
        if (!otherId) {
            return false;
        }
        if (otherId instanceof UUID) {
            return otherId.id.equals(this.id);
        }
        try {
            return new UUID(otherId).id.equals(this.id);
        }
        catch (_a) {
            return false;
        }
    };
    /**
     * Creates a Binary instance from the current UUID.
     */
    UUID.prototype.toBinary = function () {
        return new Binary(this.id, Binary.SUBTYPE_UUID);
    };
    /**
     * Generates a populated buffer containing a v4 uuid
     */
    UUID.generate = function () {
        var bytes = randomBytes(UUID_BYTE_LENGTH);
        // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
        // Kindly borrowed from https://github.com/uuidjs/uuid/blob/master/src/v4.js
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        return Buffer$1.from(bytes);
    };
    /**
     * Checks if a value is a valid bson UUID
     * @param input - UUID, string or Buffer to validate.
     */
    UUID.isValid = function (input) {
        if (!input) {
            return false;
        }
        if (input instanceof UUID) {
            return true;
        }
        if (typeof input === 'string') {
            return uuidValidateString(input);
        }
        if (isUint8Array(input)) {
            // check for length & uuid version (https://tools.ietf.org/html/rfc4122#section-4.1.3)
            if (input.length !== UUID_BYTE_LENGTH) {
                return false;
            }
            return (input[6] & 0xf0) === 0x40 && (input[8] & 0x80) === 0x80;
        }
        return false;
    };
    /**
     * Creates an UUID from a hex string representation of an UUID.
     * @param hexString - 32 or 36 character hex string (dashes excluded/included).
     */
    UUID.createFromHexString = function (hexString) {
        var buffer = uuidHexStringToBuffer(hexString);
        return new UUID(buffer);
    };
    /**
     * Converts to a string representation of this Id.
     *
     * @returns return the 36 character hex string representation.
     * @internal
     */
    UUID.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    UUID.prototype.inspect = function () {
        return "new UUID(\"".concat(this.toHexString(), "\")");
    };
    return UUID;
}(Binary));

/**
 * A class representation of the BSON Code type.
 * @public
 * @category BSONType
 */
var Code = /** @class */ (function () {
    /**
     * @param code - a string or function.
     * @param scope - an optional scope for the function.
     */
    function Code(code, scope) {
        if (!(this instanceof Code))
            return new Code(code, scope);
        this.code = code;
        this.scope = scope;
    }
    Code.prototype.toJSON = function () {
        return { code: this.code, scope: this.scope };
    };
    /** @internal */
    Code.prototype.toExtendedJSON = function () {
        if (this.scope) {
            return { $code: this.code, $scope: this.scope };
        }
        return { $code: this.code };
    };
    /** @internal */
    Code.fromExtendedJSON = function (doc) {
        return new Code(doc.$code, doc.$scope);
    };
    /** @internal */
    Code.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    Code.prototype.inspect = function () {
        var codeJson = this.toJSON();
        return "new Code(\"".concat(String(codeJson.code), "\"").concat(codeJson.scope ? ", ".concat(JSON.stringify(codeJson.scope)) : '', ")");
    };
    return Code;
}());
Object.defineProperty(Code.prototype, '_bsontype', { value: 'Code' });

/** @internal */
function isDBRefLike(value) {
    return (isObjectLike(value) &&
        value.$id != null &&
        typeof value.$ref === 'string' &&
        (value.$db == null || typeof value.$db === 'string'));
}
/**
 * A class representation of the BSON DBRef type.
 * @public
 * @category BSONType
 */
var DBRef = /** @class */ (function () {
    /**
     * @param collection - the collection name.
     * @param oid - the reference ObjectId.
     * @param db - optional db name, if omitted the reference is local to the current db.
     */
    function DBRef(collection, oid, db, fields) {
        if (!(this instanceof DBRef))
            return new DBRef(collection, oid, db, fields);
        // check if namespace has been provided
        var parts = collection.split('.');
        if (parts.length === 2) {
            db = parts.shift();
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            collection = parts.shift();
        }
        this.collection = collection;
        this.oid = oid;
        this.db = db;
        this.fields = fields || {};
    }
    Object.defineProperty(DBRef.prototype, "namespace", {
        // Property provided for compatibility with the 1.x parser
        // the 1.x parser used a "namespace" property, while 4.x uses "collection"
        /** @internal */
        get: function () {
            return this.collection;
        },
        set: function (value) {
            this.collection = value;
        },
        enumerable: false,
        configurable: true
    });
    DBRef.prototype.toJSON = function () {
        var o = Object.assign({
            $ref: this.collection,
            $id: this.oid
        }, this.fields);
        if (this.db != null)
            o.$db = this.db;
        return o;
    };
    /** @internal */
    DBRef.prototype.toExtendedJSON = function (options) {
        options = options || {};
        var o = {
            $ref: this.collection,
            $id: this.oid
        };
        if (options.legacy) {
            return o;
        }
        if (this.db)
            o.$db = this.db;
        o = Object.assign(o, this.fields);
        return o;
    };
    /** @internal */
    DBRef.fromExtendedJSON = function (doc) {
        var copy = Object.assign({}, doc);
        delete copy.$ref;
        delete copy.$id;
        delete copy.$db;
        return new DBRef(doc.$ref, doc.$id, doc.$db, copy);
    };
    /** @internal */
    DBRef.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    DBRef.prototype.inspect = function () {
        // NOTE: if OID is an ObjectId class it will just print the oid string.
        var oid = this.oid === undefined || this.oid.toString === undefined ? this.oid : this.oid.toString();
        return "new DBRef(\"".concat(this.namespace, "\", new ObjectId(\"").concat(String(oid), "\")").concat(this.db ? ", \"".concat(this.db, "\"") : '', ")");
    };
    return DBRef;
}());
Object.defineProperty(DBRef.prototype, '_bsontype', { value: 'DBRef' });

/**
 * wasm optimizations, to do native i64 multiplication and divide
 */
var wasm = undefined;
try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(
    // prettier-ignore
    new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
}
catch (_a) {
    // no wasm support
}
var TWO_PWR_16_DBL = 1 << 16;
var TWO_PWR_24_DBL = 1 << 24;
var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
/** A cache of the Long representations of small integer values. */
var INT_CACHE = {};
/** A cache of the Long representations of small unsigned integer values. */
var UINT_CACHE = {};
/**
 * A class representing a 64-bit integer
 * @public
 * @category BSONType
 * @remarks
 * The internal representation of a long is the two given signed, 32-bit values.
 * We use 32-bit pieces because these are the size of integers on which
 * Javascript performs bit-operations.  For operations like addition and
 * multiplication, we split each number into 16 bit pieces, which can easily be
 * multiplied within Javascript's floating-point representation without overflow
 * or change in sign.
 * In the algorithms below, we frequently reduce the negative case to the
 * positive case by negating the input(s) and then post-processing the result.
 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
 * a positive number, it overflows back into a negative).  Not handling this
 * case would often result in infinite recursion.
 * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.
 */
var Long = /** @class */ (function () {
    /**
     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.
     *  See the from* functions below for more convenient ways of constructing Longs.
     *
     * Acceptable signatures are:
     * - Long(low, high, unsigned?)
     * - Long(bigint, unsigned?)
     * - Long(string, unsigned?)
     *
     * @param low - The low (signed) 32 bits of the long
     * @param high - The high (signed) 32 bits of the long
     * @param unsigned - Whether unsigned or not, defaults to signed
     */
    function Long(low, high, unsigned) {
        if (low === void 0) { low = 0; }
        if (!(this instanceof Long))
            return new Long(low, high, unsigned);
        if (typeof low === 'bigint') {
            Object.assign(this, Long.fromBigInt(low, !!high));
        }
        else if (typeof low === 'string') {
            Object.assign(this, Long.fromString(low, !!high));
        }
        else {
            this.low = low | 0;
            this.high = high | 0;
            this.unsigned = !!unsigned;
        }
        Object.defineProperty(this, '__isLong__', {
            value: true,
            configurable: false,
            writable: false,
            enumerable: false
        });
    }
    /**
     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.
     * Each is assumed to use 32 bits.
     * @param lowBits - The low 32 bits
     * @param highBits - The high 32 bits
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */
    Long.fromBits = function (lowBits, highBits, unsigned) {
        return new Long(lowBits, highBits, unsigned);
    };
    /**
     * Returns a Long representing the given 32 bit integer value.
     * @param value - The 32 bit integer in question
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */
    Long.fromInt = function (value, unsigned) {
        var obj, cachedObj, cache;
        if (unsigned) {
            value >>>= 0;
            if ((cache = 0 <= value && value < 256)) {
                cachedObj = UINT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = Long.fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache)
                UINT_CACHE[value] = obj;
            return obj;
        }
        else {
            value |= 0;
            if ((cache = -128 <= value && value < 128)) {
                cachedObj = INT_CACHE[value];
                if (cachedObj)
                    return cachedObj;
            }
            obj = Long.fromBits(value, value < 0 ? -1 : 0, false);
            if (cache)
                INT_CACHE[value] = obj;
            return obj;
        }
    };
    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @param value - The number in question
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */
    Long.fromNumber = function (value, unsigned) {
        if (isNaN(value))
            return unsigned ? Long.UZERO : Long.ZERO;
        if (unsigned) {
            if (value < 0)
                return Long.UZERO;
            if (value >= TWO_PWR_64_DBL)
                return Long.MAX_UNSIGNED_VALUE;
        }
        else {
            if (value <= -TWO_PWR_63_DBL)
                return Long.MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL)
                return Long.MAX_VALUE;
        }
        if (value < 0)
            return Long.fromNumber(-value, unsigned).neg();
        return Long.fromBits(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
    };
    /**
     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.
     * @param value - The number in question
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */
    Long.fromBigInt = function (value, unsigned) {
        return Long.fromString(value.toString(), unsigned);
    };
    /**
     * Returns a Long representation of the given string, written using the specified radix.
     * @param str - The textual representation of the Long
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @param radix - The radix in which the text is written (2-36), defaults to 10
     * @returns The corresponding Long value
     */
    Long.fromString = function (str, unsigned, radix) {
        if (str.length === 0)
            throw Error('empty string');
        if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity')
            return Long.ZERO;
        if (typeof unsigned === 'number') {
            // For goog.math.long compatibility
            (radix = unsigned), (unsigned = false);
        }
        else {
            unsigned = !!unsigned;
        }
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');
        var p;
        if ((p = str.indexOf('-')) > 0)
            throw Error('interior hyphen');
        else if (p === 0) {
            return Long.fromString(str.substring(1), unsigned, radix).neg();
        }
        // Do several (8) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 8));
        var result = Long.ZERO;
        for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
                var power = Long.fromNumber(Math.pow(radix, size));
                result = result.mul(power).add(Long.fromNumber(value));
            }
            else {
                result = result.mul(radixToPower);
                result = result.add(Long.fromNumber(value));
            }
        }
        result.unsigned = unsigned;
        return result;
    };
    /**
     * Creates a Long from its byte representation.
     * @param bytes - Byte representation
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @param le - Whether little or big endian, defaults to big endian
     * @returns The corresponding Long value
     */
    Long.fromBytes = function (bytes, unsigned, le) {
        return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
    };
    /**
     * Creates a Long from its little endian byte representation.
     * @param bytes - Little endian byte representation
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */
    Long.fromBytesLE = function (bytes, unsigned) {
        return new Long(bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24), bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24), unsigned);
    };
    /**
     * Creates a Long from its big endian byte representation.
     * @param bytes - Big endian byte representation
     * @param unsigned - Whether unsigned or not, defaults to signed
     * @returns The corresponding Long value
     */
    Long.fromBytesBE = function (bytes, unsigned) {
        return new Long((bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7], (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3], unsigned);
    };
    /**
     * Tests if the specified object is a Long.
     */
    Long.isLong = function (value) {
        return isObjectLike(value) && value['__isLong__'] === true;
    };
    /**
     * Converts the specified value to a Long.
     * @param unsigned - Whether unsigned or not, defaults to signed
     */
    Long.fromValue = function (val, unsigned) {
        if (typeof val === 'number')
            return Long.fromNumber(val, unsigned);
        if (typeof val === 'string')
            return Long.fromString(val, unsigned);
        // Throws for non-objects, converts non-instanceof Long:
        return Long.fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
    };
    /** Returns the sum of this and the specified Long. */
    Long.prototype.add = function (addend) {
        if (!Long.isLong(addend))
            addend = Long.fromValue(addend);
        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xffff;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xffff;
        var b48 = addend.high >>> 16;
        var b32 = addend.high & 0xffff;
        var b16 = addend.low >>> 16;
        var b00 = addend.low & 0xffff;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 + b00;
        c16 += c00 >>> 16;
        c00 &= 0xffff;
        c16 += a16 + b16;
        c32 += c16 >>> 16;
        c16 &= 0xffff;
        c32 += a32 + b32;
        c48 += c32 >>> 16;
        c32 &= 0xffff;
        c48 += a48 + b48;
        c48 &= 0xffff;
        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };
    /**
     * Returns the sum of this and the specified Long.
     * @returns Sum
     */
    Long.prototype.and = function (other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return Long.fromBits(this.low & other.low, this.high & other.high, this.unsigned);
    };
    /**
     * Compares this Long's value with the specified's.
     * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater
     */
    Long.prototype.compare = function (other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        if (this.eq(other))
            return 0;
        var thisNeg = this.isNegative(), otherNeg = other.isNegative();
        if (thisNeg && !otherNeg)
            return -1;
        if (!thisNeg && otherNeg)
            return 1;
        // At this point the sign bits are the same
        if (!this.unsigned)
            return this.sub(other).isNegative() ? -1 : 1;
        // Both are positive if at least one is unsigned
        return other.high >>> 0 > this.high >>> 0 ||
            (other.high === this.high && other.low >>> 0 > this.low >>> 0)
            ? -1
            : 1;
    };
    /** This is an alias of {@link Long.compare} */
    Long.prototype.comp = function (other) {
        return this.compare(other);
    };
    /**
     * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.
     * @returns Quotient
     */
    Long.prototype.divide = function (divisor) {
        if (!Long.isLong(divisor))
            divisor = Long.fromValue(divisor);
        if (divisor.isZero())
            throw Error('division by zero');
        // use wasm support if present
        if (wasm) {
            // guard against signed division overflow: the largest
            // negative number / -1 would be 1 larger than the largest
            // positive number, due to two's complement.
            if (!this.unsigned &&
                this.high === -0x80000000 &&
                divisor.low === -1 &&
                divisor.high === -1) {
                // be consistent with non-wasm code path
                return this;
            }
            var low = (this.unsigned ? wasm.div_u : wasm.div_s)(this.low, this.high, divisor.low, divisor.high);
            return Long.fromBits(low, wasm.get_high(), this.unsigned);
        }
        if (this.isZero())
            return this.unsigned ? Long.UZERO : Long.ZERO;
        var approx, rem, res;
        if (!this.unsigned) {
            // This section is only relevant for signed longs and is derived from the
            // closure library as a whole.
            if (this.eq(Long.MIN_VALUE)) {
                if (divisor.eq(Long.ONE) || divisor.eq(Long.NEG_ONE))
                    return Long.MIN_VALUE;
                // recall that -MIN_VALUE == MIN_VALUE
                else if (divisor.eq(Long.MIN_VALUE))
                    return Long.ONE;
                else {
                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
                    var halfThis = this.shr(1);
                    approx = halfThis.div(divisor).shl(1);
                    if (approx.eq(Long.ZERO)) {
                        return divisor.isNegative() ? Long.ONE : Long.NEG_ONE;
                    }
                    else {
                        rem = this.sub(divisor.mul(approx));
                        res = approx.add(rem.div(divisor));
                        return res;
                    }
                }
            }
            else if (divisor.eq(Long.MIN_VALUE))
                return this.unsigned ? Long.UZERO : Long.ZERO;
            if (this.isNegative()) {
                if (divisor.isNegative())
                    return this.neg().div(divisor.neg());
                return this.neg().div(divisor).neg();
            }
            else if (divisor.isNegative())
                return this.div(divisor.neg()).neg();
            res = Long.ZERO;
        }
        else {
            // The algorithm below has not been made for unsigned longs. It's therefore
            // required to take special care of the MSB prior to running it.
            if (!divisor.unsigned)
                divisor = divisor.toUnsigned();
            if (divisor.gt(this))
                return Long.UZERO;
            if (divisor.gt(this.shru(1)))
                // 15 >>> 1 = 7 ; with divisor = 8 ; true
                return Long.UONE;
            res = Long.UZERO;
        }
        // Repeat the following until the remainder is less than other:  find a
        // floating-point that approximates remainder / other *from below*, add this
        // into the result, and subtract it from the remainder.  It is critical that
        // the approximate value is less than or equal to the real value so that the
        // remainder never becomes negative.
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        rem = this;
        while (rem.gte(divisor)) {
            // Approximate the result of division. This may be a little greater or
            // smaller than the actual value.
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
            // We will tweak the approximate result by changing it in the 48-th digit or
            // the smallest non-fractional digit, whichever is larger.
            var log2 = Math.ceil(Math.log(approx) / Math.LN2);
            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
            // Decrease the approximation until it is smaller than the remainder.  Note
            // that if it is too large, the product overflows and is negative.
            var approxRes = Long.fromNumber(approx);
            var approxRem = approxRes.mul(divisor);
            while (approxRem.isNegative() || approxRem.gt(rem)) {
                approx -= delta;
                approxRes = Long.fromNumber(approx, this.unsigned);
                approxRem = approxRes.mul(divisor);
            }
            // We know the answer can't be zero... and actually, zero would cause
            // infinite recursion since we would make no progress.
            if (approxRes.isZero())
                approxRes = Long.ONE;
            res = res.add(approxRes);
            rem = rem.sub(approxRem);
        }
        return res;
    };
    /**This is an alias of {@link Long.divide} */
    Long.prototype.div = function (divisor) {
        return this.divide(divisor);
    };
    /**
     * Tests if this Long's value equals the specified's.
     * @param other - Other value
     */
    Long.prototype.equals = function (other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
            return false;
        return this.high === other.high && this.low === other.low;
    };
    /** This is an alias of {@link Long.equals} */
    Long.prototype.eq = function (other) {
        return this.equals(other);
    };
    /** Gets the high 32 bits as a signed integer. */
    Long.prototype.getHighBits = function () {
        return this.high;
    };
    /** Gets the high 32 bits as an unsigned integer. */
    Long.prototype.getHighBitsUnsigned = function () {
        return this.high >>> 0;
    };
    /** Gets the low 32 bits as a signed integer. */
    Long.prototype.getLowBits = function () {
        return this.low;
    };
    /** Gets the low 32 bits as an unsigned integer. */
    Long.prototype.getLowBitsUnsigned = function () {
        return this.low >>> 0;
    };
    /** Gets the number of bits needed to represent the absolute value of this Long. */
    Long.prototype.getNumBitsAbs = function () {
        if (this.isNegative()) {
            // Unsigned Longs are never negative
            return this.eq(Long.MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
        }
        var val = this.high !== 0 ? this.high : this.low;
        var bit;
        for (bit = 31; bit > 0; bit--)
            if ((val & (1 << bit)) !== 0)
                break;
        return this.high !== 0 ? bit + 33 : bit + 1;
    };
    /** Tests if this Long's value is greater than the specified's. */
    Long.prototype.greaterThan = function (other) {
        return this.comp(other) > 0;
    };
    /** This is an alias of {@link Long.greaterThan} */
    Long.prototype.gt = function (other) {
        return this.greaterThan(other);
    };
    /** Tests if this Long's value is greater than or equal the specified's. */
    Long.prototype.greaterThanOrEqual = function (other) {
        return this.comp(other) >= 0;
    };
    /** This is an alias of {@link Long.greaterThanOrEqual} */
    Long.prototype.gte = function (other) {
        return this.greaterThanOrEqual(other);
    };
    /** This is an alias of {@link Long.greaterThanOrEqual} */
    Long.prototype.ge = function (other) {
        return this.greaterThanOrEqual(other);
    };
    /** Tests if this Long's value is even. */
    Long.prototype.isEven = function () {
        return (this.low & 1) === 0;
    };
    /** Tests if this Long's value is negative. */
    Long.prototype.isNegative = function () {
        return !this.unsigned && this.high < 0;
    };
    /** Tests if this Long's value is odd. */
    Long.prototype.isOdd = function () {
        return (this.low & 1) === 1;
    };
    /** Tests if this Long's value is positive. */
    Long.prototype.isPositive = function () {
        return this.unsigned || this.high >= 0;
    };
    /** Tests if this Long's value equals zero. */
    Long.prototype.isZero = function () {
        return this.high === 0 && this.low === 0;
    };
    /** Tests if this Long's value is less than the specified's. */
    Long.prototype.lessThan = function (other) {
        return this.comp(other) < 0;
    };
    /** This is an alias of {@link Long#lessThan}. */
    Long.prototype.lt = function (other) {
        return this.lessThan(other);
    };
    /** Tests if this Long's value is less than or equal the specified's. */
    Long.prototype.lessThanOrEqual = function (other) {
        return this.comp(other) <= 0;
    };
    /** This is an alias of {@link Long.lessThanOrEqual} */
    Long.prototype.lte = function (other) {
        return this.lessThanOrEqual(other);
    };
    /** Returns this Long modulo the specified. */
    Long.prototype.modulo = function (divisor) {
        if (!Long.isLong(divisor))
            divisor = Long.fromValue(divisor);
        // use wasm support if present
        if (wasm) {
            var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(this.low, this.high, divisor.low, divisor.high);
            return Long.fromBits(low, wasm.get_high(), this.unsigned);
        }
        return this.sub(this.div(divisor).mul(divisor));
    };
    /** This is an alias of {@link Long.modulo} */
    Long.prototype.mod = function (divisor) {
        return this.modulo(divisor);
    };
    /** This is an alias of {@link Long.modulo} */
    Long.prototype.rem = function (divisor) {
        return this.modulo(divisor);
    };
    /**
     * Returns the product of this and the specified Long.
     * @param multiplier - Multiplier
     * @returns Product
     */
    Long.prototype.multiply = function (multiplier) {
        if (this.isZero())
            return Long.ZERO;
        if (!Long.isLong(multiplier))
            multiplier = Long.fromValue(multiplier);
        // use wasm support if present
        if (wasm) {
            var low = wasm.mul(this.low, this.high, multiplier.low, multiplier.high);
            return Long.fromBits(low, wasm.get_high(), this.unsigned);
        }
        if (multiplier.isZero())
            return Long.ZERO;
        if (this.eq(Long.MIN_VALUE))
            return multiplier.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        if (multiplier.eq(Long.MIN_VALUE))
            return this.isOdd() ? Long.MIN_VALUE : Long.ZERO;
        if (this.isNegative()) {
            if (multiplier.isNegative())
                return this.neg().mul(multiplier.neg());
            else
                return this.neg().mul(multiplier).neg();
        }
        else if (multiplier.isNegative())
            return this.mul(multiplier.neg()).neg();
        // If both longs are small, use float multiplication
        if (this.lt(Long.TWO_PWR_24) && multiplier.lt(Long.TWO_PWR_24))
            return Long.fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
        // We can skip products that would overflow.
        var a48 = this.high >>> 16;
        var a32 = this.high & 0xffff;
        var a16 = this.low >>> 16;
        var a00 = this.low & 0xffff;
        var b48 = multiplier.high >>> 16;
        var b32 = multiplier.high & 0xffff;
        var b16 = multiplier.low >>> 16;
        var b00 = multiplier.low & 0xffff;
        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
        c00 += a00 * b00;
        c16 += c00 >>> 16;
        c00 &= 0xffff;
        c16 += a16 * b00;
        c32 += c16 >>> 16;
        c16 &= 0xffff;
        c16 += a00 * b16;
        c32 += c16 >>> 16;
        c16 &= 0xffff;
        c32 += a32 * b00;
        c48 += c32 >>> 16;
        c32 &= 0xffff;
        c32 += a16 * b16;
        c48 += c32 >>> 16;
        c32 &= 0xffff;
        c32 += a00 * b32;
        c48 += c32 >>> 16;
        c32 &= 0xffff;
        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
        c48 &= 0xffff;
        return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);
    };
    /** This is an alias of {@link Long.multiply} */
    Long.prototype.mul = function (multiplier) {
        return this.multiply(multiplier);
    };
    /** Returns the Negation of this Long's value. */
    Long.prototype.negate = function () {
        if (!this.unsigned && this.eq(Long.MIN_VALUE))
            return Long.MIN_VALUE;
        return this.not().add(Long.ONE);
    };
    /** This is an alias of {@link Long.negate} */
    Long.prototype.neg = function () {
        return this.negate();
    };
    /** Returns the bitwise NOT of this Long. */
    Long.prototype.not = function () {
        return Long.fromBits(~this.low, ~this.high, this.unsigned);
    };
    /** Tests if this Long's value differs from the specified's. */
    Long.prototype.notEquals = function (other) {
        return !this.equals(other);
    };
    /** This is an alias of {@link Long.notEquals} */
    Long.prototype.neq = function (other) {
        return this.notEquals(other);
    };
    /** This is an alias of {@link Long.notEquals} */
    Long.prototype.ne = function (other) {
        return this.notEquals(other);
    };
    /**
     * Returns the bitwise OR of this Long and the specified.
     */
    Long.prototype.or = function (other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return Long.fromBits(this.low | other.low, this.high | other.high, this.unsigned);
    };
    /**
     * Returns this Long with bits shifted to the left by the given amount.
     * @param numBits - Number of bits
     * @returns Shifted Long
     */
    Long.prototype.shiftLeft = function (numBits) {
        if (Long.isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return Long.fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);
        else
            return Long.fromBits(0, this.low << (numBits - 32), this.unsigned);
    };
    /** This is an alias of {@link Long.shiftLeft} */
    Long.prototype.shl = function (numBits) {
        return this.shiftLeft(numBits);
    };
    /**
     * Returns this Long with bits arithmetically shifted to the right by the given amount.
     * @param numBits - Number of bits
     * @returns Shifted Long
     */
    Long.prototype.shiftRight = function (numBits) {
        if (Long.isLong(numBits))
            numBits = numBits.toInt();
        if ((numBits &= 63) === 0)
            return this;
        else if (numBits < 32)
            return Long.fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);
        else
            return Long.fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
    };
    /** This is an alias of {@link Long.shiftRight} */
    Long.prototype.shr = function (numBits) {
        return this.shiftRight(numBits);
    };
    /**
     * Returns this Long with bits logically shifted to the right by the given amount.
     * @param numBits - Number of bits
     * @returns Shifted Long
     */
    Long.prototype.shiftRightUnsigned = function (numBits) {
        if (Long.isLong(numBits))
            numBits = numBits.toInt();
        numBits &= 63;
        if (numBits === 0)
            return this;
        else {
            var high = this.high;
            if (numBits < 32) {
                var low = this.low;
                return Long.fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);
            }
            else if (numBits === 32)
                return Long.fromBits(high, 0, this.unsigned);
            else
                return Long.fromBits(high >>> (numBits - 32), 0, this.unsigned);
        }
    };
    /** This is an alias of {@link Long.shiftRightUnsigned} */
    Long.prototype.shr_u = function (numBits) {
        return this.shiftRightUnsigned(numBits);
    };
    /** This is an alias of {@link Long.shiftRightUnsigned} */
    Long.prototype.shru = function (numBits) {
        return this.shiftRightUnsigned(numBits);
    };
    /**
     * Returns the difference of this and the specified Long.
     * @param subtrahend - Subtrahend
     * @returns Difference
     */
    Long.prototype.subtract = function (subtrahend) {
        if (!Long.isLong(subtrahend))
            subtrahend = Long.fromValue(subtrahend);
        return this.add(subtrahend.neg());
    };
    /** This is an alias of {@link Long.subtract} */
    Long.prototype.sub = function (subtrahend) {
        return this.subtract(subtrahend);
    };
    /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */
    Long.prototype.toInt = function () {
        return this.unsigned ? this.low >>> 0 : this.low;
    };
    /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */
    Long.prototype.toNumber = function () {
        if (this.unsigned)
            return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
    };
    /** Converts the Long to a BigInt (arbitrary precision). */
    Long.prototype.toBigInt = function () {
        return BigInt(this.toString());
    };
    /**
     * Converts this Long to its byte representation.
     * @param le - Whether little or big endian, defaults to big endian
     * @returns Byte representation
     */
    Long.prototype.toBytes = function (le) {
        return le ? this.toBytesLE() : this.toBytesBE();
    };
    /**
     * Converts this Long to its little endian byte representation.
     * @returns Little endian byte representation
     */
    Long.prototype.toBytesLE = function () {
        var hi = this.high, lo = this.low;
        return [
            lo & 0xff,
            (lo >>> 8) & 0xff,
            (lo >>> 16) & 0xff,
            lo >>> 24,
            hi & 0xff,
            (hi >>> 8) & 0xff,
            (hi >>> 16) & 0xff,
            hi >>> 24
        ];
    };
    /**
     * Converts this Long to its big endian byte representation.
     * @returns Big endian byte representation
     */
    Long.prototype.toBytesBE = function () {
        var hi = this.high, lo = this.low;
        return [
            hi >>> 24,
            (hi >>> 16) & 0xff,
            (hi >>> 8) & 0xff,
            hi & 0xff,
            lo >>> 24,
            (lo >>> 16) & 0xff,
            (lo >>> 8) & 0xff,
            lo & 0xff
        ];
    };
    /**
     * Converts this Long to signed.
     */
    Long.prototype.toSigned = function () {
        if (!this.unsigned)
            return this;
        return Long.fromBits(this.low, this.high, false);
    };
    /**
     * Converts the Long to a string written in the specified radix.
     * @param radix - Radix (2-36), defaults to 10
     * @throws RangeError If `radix` is out of range
     */
    Long.prototype.toString = function (radix) {
        radix = radix || 10;
        if (radix < 2 || 36 < radix)
            throw RangeError('radix');
        if (this.isZero())
            return '0';
        if (this.isNegative()) {
            // Unsigned Longs are never negative
            if (this.eq(Long.MIN_VALUE)) {
                // We need to change the Long value before it can be negated, so we remove
                // the bottom-most digit in this base and then recurse to do the rest.
                var radixLong = Long.fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
                return div.toString(radix) + rem1.toInt().toString(radix);
            }
            else
                return '-' + this.neg().toString(radix);
        }
        // Do several (6) digits each time through the loop, so as to
        // minimize the calls to the very expensive emulated div.
        var radixToPower = Long.fromNumber(Math.pow(radix, 6), this.unsigned);
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var rem = this;
        var result = '';
        // eslint-disable-next-line no-constant-condition
        while (true) {
            var remDiv = rem.div(radixToPower);
            var intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0;
            var digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero()) {
                return digits + result;
            }
            else {
                while (digits.length < 6)
                    digits = '0' + digits;
                result = '' + digits + result;
            }
        }
    };
    /** Converts this Long to unsigned. */
    Long.prototype.toUnsigned = function () {
        if (this.unsigned)
            return this;
        return Long.fromBits(this.low, this.high, true);
    };
    /** Returns the bitwise XOR of this Long and the given one. */
    Long.prototype.xor = function (other) {
        if (!Long.isLong(other))
            other = Long.fromValue(other);
        return Long.fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
    };
    /** This is an alias of {@link Long.isZero} */
    Long.prototype.eqz = function () {
        return this.isZero();
    };
    /** This is an alias of {@link Long.lessThanOrEqual} */
    Long.prototype.le = function (other) {
        return this.lessThanOrEqual(other);
    };
    /*
     ****************************************************************
     *                  BSON SPECIFIC ADDITIONS                     *
     ****************************************************************
     */
    Long.prototype.toExtendedJSON = function (options) {
        if (options && options.relaxed)
            return this.toNumber();
        return { $numberLong: this.toString() };
    };
    Long.fromExtendedJSON = function (doc, options) {
        var result = Long.fromString(doc.$numberLong);
        return options && options.relaxed ? result.toNumber() : result;
    };
    /** @internal */
    Long.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    Long.prototype.inspect = function () {
        return "new Long(\"".concat(this.toString(), "\"").concat(this.unsigned ? ', true' : '', ")");
    };
    Long.TWO_PWR_24 = Long.fromInt(TWO_PWR_24_DBL);
    /** Maximum unsigned value. */
    Long.MAX_UNSIGNED_VALUE = Long.fromBits(0xffffffff | 0, 0xffffffff | 0, true);
    /** Signed zero */
    Long.ZERO = Long.fromInt(0);
    /** Unsigned zero. */
    Long.UZERO = Long.fromInt(0, true);
    /** Signed one. */
    Long.ONE = Long.fromInt(1);
    /** Unsigned one. */
    Long.UONE = Long.fromInt(1, true);
    /** Signed negative one. */
    Long.NEG_ONE = Long.fromInt(-1);
    /** Maximum signed value. */
    Long.MAX_VALUE = Long.fromBits(0xffffffff | 0, 0x7fffffff | 0, false);
    /** Minimum signed value. */
    Long.MIN_VALUE = Long.fromBits(0, 0x80000000 | 0, false);
    return Long;
}());
Object.defineProperty(Long.prototype, '__isLong__', { value: true });
Object.defineProperty(Long.prototype, '_bsontype', { value: 'Long' });

var PARSE_STRING_REGEXP = /^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/;
var PARSE_INF_REGEXP = /^(\+|-)?(Infinity|inf)$/i;
var PARSE_NAN_REGEXP = /^(\+|-)?NaN$/i;
var EXPONENT_MAX = 6111;
var EXPONENT_MIN = -6176;
var EXPONENT_BIAS = 6176;
var MAX_DIGITS = 34;
// Nan value bits as 32 bit values (due to lack of longs)
var NAN_BUFFER = [
    0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
].reverse();
// Infinity value bits 32 bit values (due to lack of longs)
var INF_NEGATIVE_BUFFER = [
    0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
].reverse();
var INF_POSITIVE_BUFFER = [
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
].reverse();
var EXPONENT_REGEX = /^([-+])?(\d+)?$/;
// Extract least significant 5 bits
var COMBINATION_MASK = 0x1f;
// Extract least significant 14 bits
var EXPONENT_MASK = 0x3fff;
// Value of combination field for Inf
var COMBINATION_INFINITY = 30;
// Value of combination field for NaN
var COMBINATION_NAN = 31;
// Detect if the value is a digit
function isDigit(value) {
    return !isNaN(parseInt(value, 10));
}
// Divide two uint128 values
function divideu128(value) {
    var DIVISOR = Long.fromNumber(1000 * 1000 * 1000);
    var _rem = Long.fromNumber(0);
    if (!value.parts[0] && !value.parts[1] && !value.parts[2] && !value.parts[3]) {
        return { quotient: value, rem: _rem };
    }
    for (var i = 0; i <= 3; i++) {
        // Adjust remainder to match value of next dividend
        _rem = _rem.shiftLeft(32);
        // Add the divided to _rem
        _rem = _rem.add(new Long(value.parts[i], 0));
        value.parts[i] = _rem.div(DIVISOR).low;
        _rem = _rem.modulo(DIVISOR);
    }
    return { quotient: value, rem: _rem };
}
// Multiply two Long values and return the 128 bit value
function multiply64x2(left, right) {
    if (!left && !right) {
        return { high: Long.fromNumber(0), low: Long.fromNumber(0) };
    }
    var leftHigh = left.shiftRightUnsigned(32);
    var leftLow = new Long(left.getLowBits(), 0);
    var rightHigh = right.shiftRightUnsigned(32);
    var rightLow = new Long(right.getLowBits(), 0);
    var productHigh = leftHigh.multiply(rightHigh);
    var productMid = leftHigh.multiply(rightLow);
    var productMid2 = leftLow.multiply(rightHigh);
    var productLow = leftLow.multiply(rightLow);
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productMid = new Long(productMid.getLowBits(), 0)
        .add(productMid2)
        .add(productLow.shiftRightUnsigned(32));
    productHigh = productHigh.add(productMid.shiftRightUnsigned(32));
    productLow = productMid.shiftLeft(32).add(new Long(productLow.getLowBits(), 0));
    // Return the 128 bit result
    return { high: productHigh, low: productLow };
}
function lessThan(left, right) {
    // Make values unsigned
    var uhleft = left.high >>> 0;
    var uhright = right.high >>> 0;
    // Compare high bits first
    if (uhleft < uhright) {
        return true;
    }
    else if (uhleft === uhright) {
        var ulleft = left.low >>> 0;
        var ulright = right.low >>> 0;
        if (ulleft < ulright)
            return true;
    }
    return false;
}
function invalidErr(string, message) {
    throw new BSONTypeError("\"".concat(string, "\" is not a valid Decimal128 string - ").concat(message));
}
/**
 * A class representation of the BSON Decimal128 type.
 * @public
 * @category BSONType
 */
var Decimal128 = /** @class */ (function () {
    /**
     * @param bytes - a buffer containing the raw Decimal128 bytes in little endian order,
     *                or a string representation as returned by .toString()
     */
    function Decimal128(bytes) {
        if (!(this instanceof Decimal128))
            return new Decimal128(bytes);
        if (typeof bytes === 'string') {
            this.bytes = Decimal128.fromString(bytes).bytes;
        }
        else if (isUint8Array(bytes)) {
            if (bytes.byteLength !== 16) {
                throw new BSONTypeError('Decimal128 must take a Buffer of 16 bytes');
            }
            this.bytes = bytes;
        }
        else {
            throw new BSONTypeError('Decimal128 must take a Buffer or string');
        }
    }
    /**
     * Create a Decimal128 instance from a string representation
     *
     * @param representation - a numeric string representation.
     */
    Decimal128.fromString = function (representation) {
        // Parse state tracking
        var isNegative = false;
        var sawRadix = false;
        var foundNonZero = false;
        // Total number of significant digits (no leading or trailing zero)
        var significantDigits = 0;
        // Total number of significand digits read
        var nDigitsRead = 0;
        // Total number of digits (no leading zeros)
        var nDigits = 0;
        // The number of the digits after radix
        var radixPosition = 0;
        // The index of the first non-zero in *str*
        var firstNonZero = 0;
        // Digits Array
        var digits = [0];
        // The number of digits in digits
        var nDigitsStored = 0;
        // Insertion pointer for digits
        var digitsInsert = 0;
        // The index of the first non-zero digit
        var firstDigit = 0;
        // The index of the last digit
        var lastDigit = 0;
        // Exponent
        var exponent = 0;
        // loop index over array
        var i = 0;
        // The high 17 digits of the significand
        var significandHigh = new Long(0, 0);
        // The low 17 digits of the significand
        var significandLow = new Long(0, 0);
        // The biased exponent
        var biasedExponent = 0;
        // Read index
        var index = 0;
        // Naively prevent against REDOS attacks.
        // TODO: implementing a custom parsing for this, or refactoring the regex would yield
        //       further gains.
        if (representation.length >= 7000) {
            throw new BSONTypeError('' + representation + ' not a valid Decimal128 string');
        }
        // Results
        var stringMatch = representation.match(PARSE_STRING_REGEXP);
        var infMatch = representation.match(PARSE_INF_REGEXP);
        var nanMatch = representation.match(PARSE_NAN_REGEXP);
        // Validate the string
        if ((!stringMatch && !infMatch && !nanMatch) || representation.length === 0) {
            throw new BSONTypeError('' + representation + ' not a valid Decimal128 string');
        }
        if (stringMatch) {
            // full_match = stringMatch[0]
            // sign = stringMatch[1]
            var unsignedNumber = stringMatch[2];
            // stringMatch[3] is undefined if a whole number (ex "1", 12")
            // but defined if a number w/ decimal in it (ex "1.0, 12.2")
            var e = stringMatch[4];
            var expSign = stringMatch[5];
            var expNumber = stringMatch[6];
            // they provided e, but didn't give an exponent number. for ex "1e"
            if (e && expNumber === undefined)
                invalidErr(representation, 'missing exponent power');
            // they provided e, but didn't give a number before it. for ex "e1"
            if (e && unsignedNumber === undefined)
                invalidErr(representation, 'missing exponent base');
            if (e === undefined && (expSign || expNumber)) {
                invalidErr(representation, 'missing e before exponent');
            }
        }
        // Get the negative or positive sign
        if (representation[index] === '+' || representation[index] === '-') {
            isNegative = representation[index++] === '-';
        }
        // Check if user passed Infinity or NaN
        if (!isDigit(representation[index]) && representation[index] !== '.') {
            if (representation[index] === 'i' || representation[index] === 'I') {
                return new Decimal128(Buffer$1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
            }
            else if (representation[index] === 'N') {
                return new Decimal128(Buffer$1.from(NAN_BUFFER));
            }
        }
        // Read all the digits
        while (isDigit(representation[index]) || representation[index] === '.') {
            if (representation[index] === '.') {
                if (sawRadix)
                    invalidErr(representation, 'contains multiple periods');
                sawRadix = true;
                index = index + 1;
                continue;
            }
            if (nDigitsStored < 34) {
                if (representation[index] !== '0' || foundNonZero) {
                    if (!foundNonZero) {
                        firstNonZero = nDigitsRead;
                    }
                    foundNonZero = true;
                    // Only store 34 digits
                    digits[digitsInsert++] = parseInt(representation[index], 10);
                    nDigitsStored = nDigitsStored + 1;
                }
            }
            if (foundNonZero)
                nDigits = nDigits + 1;
            if (sawRadix)
                radixPosition = radixPosition + 1;
            nDigitsRead = nDigitsRead + 1;
            index = index + 1;
        }
        if (sawRadix && !nDigitsRead)
            throw new BSONTypeError('' + representation + ' not a valid Decimal128 string');
        // Read exponent if exists
        if (representation[index] === 'e' || representation[index] === 'E') {
            // Read exponent digits
            var match = representation.substr(++index).match(EXPONENT_REGEX);
            // No digits read
            if (!match || !match[2])
                return new Decimal128(Buffer$1.from(NAN_BUFFER));
            // Get exponent
            exponent = parseInt(match[0], 10);
            // Adjust the index
            index = index + match[0].length;
        }
        // Return not a number
        if (representation[index])
            return new Decimal128(Buffer$1.from(NAN_BUFFER));
        // Done reading input
        // Find first non-zero digit in digits
        firstDigit = 0;
        if (!nDigitsStored) {
            firstDigit = 0;
            lastDigit = 0;
            digits[0] = 0;
            nDigits = 1;
            nDigitsStored = 1;
            significantDigits = 0;
        }
        else {
            lastDigit = nDigitsStored - 1;
            significantDigits = nDigits;
            if (significantDigits !== 1) {
                while (digits[firstNonZero + significantDigits - 1] === 0) {
                    significantDigits = significantDigits - 1;
                }
            }
        }
        // Normalization of exponent
        // Correct exponent based on radix position, and shift significand as needed
        // to represent user input
        // Overflow prevention
        if (exponent <= radixPosition && radixPosition - exponent > 1 << 14) {
            exponent = EXPONENT_MIN;
        }
        else {
            exponent = exponent - radixPosition;
        }
        // Attempt to normalize the exponent
        while (exponent > EXPONENT_MAX) {
            // Shift exponent to significand and decrease
            lastDigit = lastDigit + 1;
            if (lastDigit - firstDigit > MAX_DIGITS) {
                // Check if we have a zero then just hard clamp, otherwise fail
                var digitsString = digits.join('');
                if (digitsString.match(/^0+$/)) {
                    exponent = EXPONENT_MAX;
                    break;
                }
                invalidErr(representation, 'overflow');
            }
            exponent = exponent - 1;
        }
        while (exponent < EXPONENT_MIN || nDigitsStored < nDigits) {
            // Shift last digit. can only do this if < significant digits than # stored.
            if (lastDigit === 0 && significantDigits < nDigitsStored) {
                exponent = EXPONENT_MIN;
                significantDigits = 0;
                break;
            }
            if (nDigitsStored < nDigits) {
                // adjust to match digits not stored
                nDigits = nDigits - 1;
            }
            else {
                // adjust to round
                lastDigit = lastDigit - 1;
            }
            if (exponent < EXPONENT_MAX) {
                exponent = exponent + 1;
            }
            else {
                // Check if we have a zero then just hard clamp, otherwise fail
                var digitsString = digits.join('');
                if (digitsString.match(/^0+$/)) {
                    exponent = EXPONENT_MAX;
                    break;
                }
                invalidErr(representation, 'overflow');
            }
        }
        // Round
        // We've normalized the exponent, but might still need to round.
        if (lastDigit - firstDigit + 1 < significantDigits) {
            var endOfString = nDigitsRead;
            // If we have seen a radix point, 'string' is 1 longer than we have
            // documented with ndigits_read, so inc the position of the first nonzero
            // digit and the position that digits are read to.
            if (sawRadix) {
                firstNonZero = firstNonZero + 1;
                endOfString = endOfString + 1;
            }
            // if negative, we need to increment again to account for - sign at start.
            if (isNegative) {
                firstNonZero = firstNonZero + 1;
                endOfString = endOfString + 1;
            }
            var roundDigit = parseInt(representation[firstNonZero + lastDigit + 1], 10);
            var roundBit = 0;
            if (roundDigit >= 5) {
                roundBit = 1;
                if (roundDigit === 5) {
                    roundBit = digits[lastDigit] % 2 === 1 ? 1 : 0;
                    for (i = firstNonZero + lastDigit + 2; i < endOfString; i++) {
                        if (parseInt(representation[i], 10)) {
                            roundBit = 1;
                            break;
                        }
                    }
                }
            }
            if (roundBit) {
                var dIdx = lastDigit;
                for (; dIdx >= 0; dIdx--) {
                    if (++digits[dIdx] > 9) {
                        digits[dIdx] = 0;
                        // overflowed most significant digit
                        if (dIdx === 0) {
                            if (exponent < EXPONENT_MAX) {
                                exponent = exponent + 1;
                                digits[dIdx] = 1;
                            }
                            else {
                                return new Decimal128(Buffer$1.from(isNegative ? INF_NEGATIVE_BUFFER : INF_POSITIVE_BUFFER));
                            }
                        }
                    }
                }
            }
        }
        // Encode significand
        // The high 17 digits of the significand
        significandHigh = Long.fromNumber(0);
        // The low 17 digits of the significand
        significandLow = Long.fromNumber(0);
        // read a zero
        if (significantDigits === 0) {
            significandHigh = Long.fromNumber(0);
            significandLow = Long.fromNumber(0);
        }
        else if (lastDigit - firstDigit < 17) {
            var dIdx = firstDigit;
            significandLow = Long.fromNumber(digits[dIdx++]);
            significandHigh = new Long(0, 0);
            for (; dIdx <= lastDigit; dIdx++) {
                significandLow = significandLow.multiply(Long.fromNumber(10));
                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
            }
        }
        else {
            var dIdx = firstDigit;
            significandHigh = Long.fromNumber(digits[dIdx++]);
            for (; dIdx <= lastDigit - 17; dIdx++) {
                significandHigh = significandHigh.multiply(Long.fromNumber(10));
                significandHigh = significandHigh.add(Long.fromNumber(digits[dIdx]));
            }
            significandLow = Long.fromNumber(digits[dIdx++]);
            for (; dIdx <= lastDigit; dIdx++) {
                significandLow = significandLow.multiply(Long.fromNumber(10));
                significandLow = significandLow.add(Long.fromNumber(digits[dIdx]));
            }
        }
        var significand = multiply64x2(significandHigh, Long.fromString('100000000000000000'));
        significand.low = significand.low.add(significandLow);
        if (lessThan(significand.low, significandLow)) {
            significand.high = significand.high.add(Long.fromNumber(1));
        }
        // Biased exponent
        biasedExponent = exponent + EXPONENT_BIAS;
        var dec = { low: Long.fromNumber(0), high: Long.fromNumber(0) };
        // Encode combination, exponent, and significand.
        if (significand.high.shiftRightUnsigned(49).and(Long.fromNumber(1)).equals(Long.fromNumber(1))) {
            // Encode '11' into bits 1 to 3
            dec.high = dec.high.or(Long.fromNumber(0x3).shiftLeft(61));
            dec.high = dec.high.or(Long.fromNumber(biasedExponent).and(Long.fromNumber(0x3fff).shiftLeft(47)));
            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x7fffffffffff)));
        }
        else {
            dec.high = dec.high.or(Long.fromNumber(biasedExponent & 0x3fff).shiftLeft(49));
            dec.high = dec.high.or(significand.high.and(Long.fromNumber(0x1ffffffffffff)));
        }
        dec.low = significand.low;
        // Encode sign
        if (isNegative) {
            dec.high = dec.high.or(Long.fromString('9223372036854775808'));
        }
        // Encode into a buffer
        var buffer = Buffer$1.alloc(16);
        index = 0;
        // Encode the low 64 bits of the decimal
        // Encode low bits
        buffer[index++] = dec.low.low & 0xff;
        buffer[index++] = (dec.low.low >> 8) & 0xff;
        buffer[index++] = (dec.low.low >> 16) & 0xff;
        buffer[index++] = (dec.low.low >> 24) & 0xff;
        // Encode high bits
        buffer[index++] = dec.low.high & 0xff;
        buffer[index++] = (dec.low.high >> 8) & 0xff;
        buffer[index++] = (dec.low.high >> 16) & 0xff;
        buffer[index++] = (dec.low.high >> 24) & 0xff;
        // Encode the high 64 bits of the decimal
        // Encode low bits
        buffer[index++] = dec.high.low & 0xff;
        buffer[index++] = (dec.high.low >> 8) & 0xff;
        buffer[index++] = (dec.high.low >> 16) & 0xff;
        buffer[index++] = (dec.high.low >> 24) & 0xff;
        // Encode high bits
        buffer[index++] = dec.high.high & 0xff;
        buffer[index++] = (dec.high.high >> 8) & 0xff;
        buffer[index++] = (dec.high.high >> 16) & 0xff;
        buffer[index++] = (dec.high.high >> 24) & 0xff;
        // Return the new Decimal128
        return new Decimal128(buffer);
    };
    /** Create a string representation of the raw Decimal128 value */
    Decimal128.prototype.toString = function () {
        // Note: bits in this routine are referred to starting at 0,
        // from the sign bit, towards the coefficient.
        // decoded biased exponent (14 bits)
        var biased_exponent;
        // the number of significand digits
        var significand_digits = 0;
        // the base-10 digits in the significand
        var significand = new Array(36);
        for (var i = 0; i < significand.length; i++)
            significand[i] = 0;
        // read pointer into significand
        var index = 0;
        // true if the number is zero
        var is_zero = false;
        // the most significant significand bits (50-46)
        var significand_msb;
        // temporary storage for significand decoding
        var significand128 = { parts: [0, 0, 0, 0] };
        // indexing variables
        var j, k;
        // Output string
        var string = [];
        // Unpack index
        index = 0;
        // Buffer reference
        var buffer = this.bytes;
        // Unpack the low 64bits into a long
        // bits 96 - 127
        var low = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
        // bits 64 - 95
        var midl = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
        // Unpack the high 64bits into a long
        // bits 32 - 63
        var midh = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
        // bits 0 - 31
        var high = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
        // Unpack index
        index = 0;
        // Create the state of the decimal
        var dec = {
            low: new Long(low, midl),
            high: new Long(midh, high)
        };
        if (dec.high.lessThan(Long.ZERO)) {
            string.push('-');
        }
        // Decode combination field and exponent
        // bits 1 - 5
        var combination = (high >> 26) & COMBINATION_MASK;
        if (combination >> 3 === 3) {
            // Check for 'special' values
            if (combination === COMBINATION_INFINITY) {
                return string.join('') + 'Infinity';
            }
            else if (combination === COMBINATION_NAN) {
                return 'NaN';
            }
            else {
                biased_exponent = (high >> 15) & EXPONENT_MASK;
                significand_msb = 0x08 + ((high >> 14) & 0x01);
            }
        }
        else {
            significand_msb = (high >> 14) & 0x07;
            biased_exponent = (high >> 17) & EXPONENT_MASK;
        }
        // unbiased exponent
        var exponent = biased_exponent - EXPONENT_BIAS;
        // Create string of significand digits
        // Convert the 114-bit binary number represented by
        // (significand_high, significand_low) to at most 34 decimal
        // digits through modulo and division.
        significand128.parts[0] = (high & 0x3fff) + ((significand_msb & 0xf) << 14);
        significand128.parts[1] = midh;
        significand128.parts[2] = midl;
        significand128.parts[3] = low;
        if (significand128.parts[0] === 0 &&
            significand128.parts[1] === 0 &&
            significand128.parts[2] === 0 &&
            significand128.parts[3] === 0) {
            is_zero = true;
        }
        else {
            for (k = 3; k >= 0; k--) {
                var least_digits = 0;
                // Perform the divide
                var result = divideu128(significand128);
                significand128 = result.quotient;
                least_digits = result.rem.low;
                // We now have the 9 least significant digits (in base 2).
                // Convert and output to string.
                if (!least_digits)
                    continue;
                for (j = 8; j >= 0; j--) {
                    // significand[k * 9 + j] = Math.round(least_digits % 10);
                    significand[k * 9 + j] = least_digits % 10;
                    // least_digits = Math.round(least_digits / 10);
                    least_digits = Math.floor(least_digits / 10);
                }
            }
        }
        // Output format options:
        // Scientific - [-]d.dddE(+/-)dd or [-]dE(+/-)dd
        // Regular    - ddd.ddd
        if (is_zero) {
            significand_digits = 1;
            significand[index] = 0;
        }
        else {
            significand_digits = 36;
            while (!significand[index]) {
                significand_digits = significand_digits - 1;
                index = index + 1;
            }
        }
        // the exponent if scientific notation is used
        var scientific_exponent = significand_digits - 1 + exponent;
        // The scientific exponent checks are dictated by the string conversion
        // specification and are somewhat arbitrary cutoffs.
        //
        // We must check exponent > 0, because if this is the case, the number
        // has trailing zeros.  However, we *cannot* output these trailing zeros,
        // because doing so would change the precision of the value, and would
        // change stored data if the string converted number is round tripped.
        if (scientific_exponent >= 34 || scientific_exponent <= -7 || exponent > 0) {
            // Scientific format
            // if there are too many significant digits, we should just be treating numbers
            // as + or - 0 and using the non-scientific exponent (this is for the "invalid
            // representation should be treated as 0/-0" spec cases in decimal128-1.json)
            if (significand_digits > 34) {
                string.push("".concat(0));
                if (exponent > 0)
                    string.push("E+".concat(exponent));
                else if (exponent < 0)
                    string.push("E".concat(exponent));
                return string.join('');
            }
            string.push("".concat(significand[index++]));
            significand_digits = significand_digits - 1;
            if (significand_digits) {
                string.push('.');
            }
            for (var i = 0; i < significand_digits; i++) {
                string.push("".concat(significand[index++]));
            }
            // Exponent
            string.push('E');
            if (scientific_exponent > 0) {
                string.push("+".concat(scientific_exponent));
            }
            else {
                string.push("".concat(scientific_exponent));
            }
        }
        else {
            // Regular format with no decimal place
            if (exponent >= 0) {
                for (var i = 0; i < significand_digits; i++) {
                    string.push("".concat(significand[index++]));
                }
            }
            else {
                var radix_position = significand_digits + exponent;
                // non-zero digits before radix
                if (radix_position > 0) {
                    for (var i = 0; i < radix_position; i++) {
                        string.push("".concat(significand[index++]));
                    }
                }
                else {
                    string.push('0');
                }
                string.push('.');
                // add leading zeros after radix
                while (radix_position++ < 0) {
                    string.push('0');
                }
                for (var i = 0; i < significand_digits - Math.max(radix_position - 1, 0); i++) {
                    string.push("".concat(significand[index++]));
                }
            }
        }
        return string.join('');
    };
    Decimal128.prototype.toJSON = function () {
        return { $numberDecimal: this.toString() };
    };
    /** @internal */
    Decimal128.prototype.toExtendedJSON = function () {
        return { $numberDecimal: this.toString() };
    };
    /** @internal */
    Decimal128.fromExtendedJSON = function (doc) {
        return Decimal128.fromString(doc.$numberDecimal);
    };
    /** @internal */
    Decimal128.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    Decimal128.prototype.inspect = function () {
        return "new Decimal128(\"".concat(this.toString(), "\")");
    };
    return Decimal128;
}());
Object.defineProperty(Decimal128.prototype, '_bsontype', { value: 'Decimal128' });

/**
 * A class representation of the BSON Double type.
 * @public
 * @category BSONType
 */
var Double = /** @class */ (function () {
    /**
     * Create a Double type
     *
     * @param value - the number we want to represent as a double.
     */
    function Double(value) {
        if (!(this instanceof Double))
            return new Double(value);
        if (value instanceof Number) {
            value = value.valueOf();
        }
        this.value = +value;
    }
    /**
     * Access the number value.
     *
     * @returns returns the wrapped double number.
     */
    Double.prototype.valueOf = function () {
        return this.value;
    };
    Double.prototype.toJSON = function () {
        return this.value;
    };
    Double.prototype.toString = function (radix) {
        return this.value.toString(radix);
    };
    /** @internal */
    Double.prototype.toExtendedJSON = function (options) {
        if (options && (options.legacy || (options.relaxed && isFinite(this.value)))) {
            return this.value;
        }
        if (Object.is(Math.sign(this.value), -0)) {
            // NOTE: JavaScript has +0 and -0, apparently to model limit calculations. If a user
            // explicitly provided `-0` then we need to ensure the sign makes it into the output
            return { $numberDouble: "-".concat(this.value.toFixed(1)) };
        }
        return {
            $numberDouble: Number.isInteger(this.value) ? this.value.toFixed(1) : this.value.toString()
        };
    };
    /** @internal */
    Double.fromExtendedJSON = function (doc, options) {
        var doubleValue = parseFloat(doc.$numberDouble);
        return options && options.relaxed ? doubleValue : new Double(doubleValue);
    };
    /** @internal */
    Double.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    Double.prototype.inspect = function () {
        var eJSON = this.toExtendedJSON();
        return "new Double(".concat(eJSON.$numberDouble, ")");
    };
    return Double;
}());
Object.defineProperty(Double.prototype, '_bsontype', { value: 'Double' });

/**
 * A class representation of a BSON Int32 type.
 * @public
 * @category BSONType
 */
var Int32 = /** @class */ (function () {
    /**
     * Create an Int32 type
     *
     * @param value - the number we want to represent as an int32.
     */
    function Int32(value) {
        if (!(this instanceof Int32))
            return new Int32(value);
        if (value instanceof Number) {
            value = value.valueOf();
        }
        this.value = +value | 0;
    }
    /**
     * Access the number value.
     *
     * @returns returns the wrapped int32 number.
     */
    Int32.prototype.valueOf = function () {
        return this.value;
    };
    Int32.prototype.toString = function (radix) {
        return this.value.toString(radix);
    };
    Int32.prototype.toJSON = function () {
        return this.value;
    };
    /** @internal */
    Int32.prototype.toExtendedJSON = function (options) {
        if (options && (options.relaxed || options.legacy))
            return this.value;
        return { $numberInt: this.value.toString() };
    };
    /** @internal */
    Int32.fromExtendedJSON = function (doc, options) {
        return options && options.relaxed ? parseInt(doc.$numberInt, 10) : new Int32(doc.$numberInt);
    };
    /** @internal */
    Int32.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    Int32.prototype.inspect = function () {
        return "new Int32(".concat(this.valueOf(), ")");
    };
    return Int32;
}());
Object.defineProperty(Int32.prototype, '_bsontype', { value: 'Int32' });

/**
 * A class representation of the BSON MaxKey type.
 * @public
 * @category BSONType
 */
var MaxKey = /** @class */ (function () {
    function MaxKey() {
        if (!(this instanceof MaxKey))
            return new MaxKey();
    }
    /** @internal */
    MaxKey.prototype.toExtendedJSON = function () {
        return { $maxKey: 1 };
    };
    /** @internal */
    MaxKey.fromExtendedJSON = function () {
        return new MaxKey();
    };
    /** @internal */
    MaxKey.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    MaxKey.prototype.inspect = function () {
        return 'new MaxKey()';
    };
    return MaxKey;
}());
Object.defineProperty(MaxKey.prototype, '_bsontype', { value: 'MaxKey' });

/**
 * A class representation of the BSON MinKey type.
 * @public
 * @category BSONType
 */
var MinKey = /** @class */ (function () {
    function MinKey() {
        if (!(this instanceof MinKey))
            return new MinKey();
    }
    /** @internal */
    MinKey.prototype.toExtendedJSON = function () {
        return { $minKey: 1 };
    };
    /** @internal */
    MinKey.fromExtendedJSON = function () {
        return new MinKey();
    };
    /** @internal */
    MinKey.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    MinKey.prototype.inspect = function () {
        return 'new MinKey()';
    };
    return MinKey;
}());
Object.defineProperty(MinKey.prototype, '_bsontype', { value: 'MinKey' });

// Regular expression that checks for hex value
var checkForHexRegExp = new RegExp('^[0-9a-fA-F]{24}$');
// Unique sequence for the current process (initialized on first use)
var PROCESS_UNIQUE = null;
var kId = Symbol('id');
/**
 * A class representation of the BSON ObjectId type.
 * @public
 * @category BSONType
 */
var ObjectId = /** @class */ (function () {
    /**
     * Create an ObjectId type
     *
     * @param inputId - Can be a 24 character hex string, 12 byte binary Buffer, or a number.
     */
    function ObjectId(inputId) {
        if (!(this instanceof ObjectId))
            return new ObjectId(inputId);
        // workingId is set based on type of input and whether valid id exists for the input
        var workingId;
        if (typeof inputId === 'object' && inputId && 'id' in inputId) {
            if (typeof inputId.id !== 'string' && !ArrayBuffer.isView(inputId.id)) {
                throw new BSONTypeError('Argument passed in must have an id that is of type string or Buffer');
            }
            if ('toHexString' in inputId && typeof inputId.toHexString === 'function') {
                workingId = Buffer$1.from(inputId.toHexString(), 'hex');
            }
            else {
                workingId = inputId.id;
            }
        }
        else {
            workingId = inputId;
        }
        // the following cases use workingId to construct an ObjectId
        if (workingId == null || typeof workingId === 'number') {
            // The most common use case (blank id, new objectId instance)
            // Generate a new id
            this[kId] = ObjectId.generate(typeof workingId === 'number' ? workingId : undefined);
        }
        else if (ArrayBuffer.isView(workingId) && workingId.byteLength === 12) {
            // If intstanceof matches we can escape calling ensure buffer in Node.js environments
            this[kId] = workingId instanceof Buffer$1 ? workingId : ensureBuffer(workingId);
        }
        else if (typeof workingId === 'string') {
            if (workingId.length === 12) {
                var bytes = Buffer$1.from(workingId);
                if (bytes.byteLength === 12) {
                    this[kId] = bytes;
                }
                else {
                    throw new BSONTypeError('Argument passed in must be a string of 12 bytes');
                }
            }
            else if (workingId.length === 24 && checkForHexRegExp.test(workingId)) {
                this[kId] = Buffer$1.from(workingId, 'hex');
            }
            else {
                throw new BSONTypeError('Argument passed in must be a string of 12 bytes or a string of 24 hex characters or an integer');
            }
        }
        else {
            throw new BSONTypeError('Argument passed in does not match the accepted types');
        }
        // If we are caching the hex string
        if (ObjectId.cacheHexString) {
            this.__id = this.id.toString('hex');
        }
    }
    Object.defineProperty(ObjectId.prototype, "id", {
        /**
         * The ObjectId bytes
         * @readonly
         */
        get: function () {
            return this[kId];
        },
        set: function (value) {
            this[kId] = value;
            if (ObjectId.cacheHexString) {
                this.__id = value.toString('hex');
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ObjectId.prototype, "generationTime", {
        /**
         * The generation time of this ObjectId instance
         * @deprecated Please use getTimestamp / createFromTime which returns an int32 epoch
         */
        get: function () {
            return this.id.readInt32BE(0);
        },
        set: function (value) {
            // Encode time into first 4 bytes
            this.id.writeUInt32BE(value, 0);
        },
        enumerable: false,
        configurable: true
    });
    /** Returns the ObjectId id as a 24 character hex string representation */
    ObjectId.prototype.toHexString = function () {
        if (ObjectId.cacheHexString && this.__id) {
            return this.__id;
        }
        var hexString = this.id.toString('hex');
        if (ObjectId.cacheHexString && !this.__id) {
            this.__id = hexString;
        }
        return hexString;
    };
    /**
     * Update the ObjectId index
     * @privateRemarks
     * Used in generating new ObjectId's on the driver
     * @internal
     */
    ObjectId.getInc = function () {
        return (ObjectId.index = (ObjectId.index + 1) % 0xffffff);
    };
    /**
     * Generate a 12 byte id buffer used in ObjectId's
     *
     * @param time - pass in a second based timestamp.
     */
    ObjectId.generate = function (time) {
        if ('number' !== typeof time) {
            time = Math.floor(Date.now() / 1000);
        }
        var inc = ObjectId.getInc();
        var buffer = Buffer$1.alloc(12);
        // 4-byte timestamp
        buffer.writeUInt32BE(time, 0);
        // set PROCESS_UNIQUE if yet not initialized
        if (PROCESS_UNIQUE === null) {
            PROCESS_UNIQUE = randomBytes(5);
        }
        // 5-byte process unique
        buffer[4] = PROCESS_UNIQUE[0];
        buffer[5] = PROCESS_UNIQUE[1];
        buffer[6] = PROCESS_UNIQUE[2];
        buffer[7] = PROCESS_UNIQUE[3];
        buffer[8] = PROCESS_UNIQUE[4];
        // 3-byte counter
        buffer[11] = inc & 0xff;
        buffer[10] = (inc >> 8) & 0xff;
        buffer[9] = (inc >> 16) & 0xff;
        return buffer;
    };
    /**
     * Converts the id into a 24 character hex string for printing
     *
     * @param format - The Buffer toString format parameter.
     */
    ObjectId.prototype.toString = function (format) {
        // Is the id a buffer then use the buffer toString method to return the format
        if (format)
            return this.id.toString(format);
        return this.toHexString();
    };
    /** Converts to its JSON the 24 character hex string representation. */
    ObjectId.prototype.toJSON = function () {
        return this.toHexString();
    };
    /**
     * Compares the equality of this ObjectId with `otherID`.
     *
     * @param otherId - ObjectId instance to compare against.
     */
    ObjectId.prototype.equals = function (otherId) {
        if (otherId === undefined || otherId === null) {
            return false;
        }
        if (otherId instanceof ObjectId) {
            return this[kId][11] === otherId[kId][11] && this[kId].equals(otherId[kId]);
        }
        if (typeof otherId === 'string' &&
            ObjectId.isValid(otherId) &&
            otherId.length === 12 &&
            isUint8Array(this.id)) {
            return otherId === Buffer$1.prototype.toString.call(this.id, 'latin1');
        }
        if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 24) {
            return otherId.toLowerCase() === this.toHexString();
        }
        if (typeof otherId === 'string' && ObjectId.isValid(otherId) && otherId.length === 12) {
            return Buffer$1.from(otherId).equals(this.id);
        }
        if (typeof otherId === 'object' &&
            'toHexString' in otherId &&
            typeof otherId.toHexString === 'function') {
            var otherIdString = otherId.toHexString();
            var thisIdString = this.toHexString().toLowerCase();
            return typeof otherIdString === 'string' && otherIdString.toLowerCase() === thisIdString;
        }
        return false;
    };
    /** Returns the generation date (accurate up to the second) that this ID was generated. */
    ObjectId.prototype.getTimestamp = function () {
        var timestamp = new Date();
        var time = this.id.readUInt32BE(0);
        timestamp.setTime(Math.floor(time) * 1000);
        return timestamp;
    };
    /** @internal */
    ObjectId.createPk = function () {
        return new ObjectId();
    };
    /**
     * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.
     *
     * @param time - an integer number representing a number of seconds.
     */
    ObjectId.createFromTime = function (time) {
        var buffer = Buffer$1.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        // Encode time into first 4 bytes
        buffer.writeUInt32BE(time, 0);
        // Return the new objectId
        return new ObjectId(buffer);
    };
    /**
     * Creates an ObjectId from a hex string representation of an ObjectId.
     *
     * @param hexString - create a ObjectId from a passed in 24 character hexstring.
     */
    ObjectId.createFromHexString = function (hexString) {
        // Throw an error if it's not a valid setup
        if (typeof hexString === 'undefined' || (hexString != null && hexString.length !== 24)) {
            throw new BSONTypeError('Argument passed in must be a single String of 12 bytes or a string of 24 hex characters');
        }
        return new ObjectId(Buffer$1.from(hexString, 'hex'));
    };
    /**
     * Checks if a value is a valid bson ObjectId
     *
     * @param id - ObjectId instance to validate.
     */
    ObjectId.isValid = function (id) {
        if (id == null)
            return false;
        try {
            new ObjectId(id);
            return true;
        }
        catch (_a) {
            return false;
        }
    };
    /** @internal */
    ObjectId.prototype.toExtendedJSON = function () {
        if (this.toHexString)
            return { $oid: this.toHexString() };
        return { $oid: this.toString('hex') };
    };
    /** @internal */
    ObjectId.fromExtendedJSON = function (doc) {
        return new ObjectId(doc.$oid);
    };
    /**
     * Converts to a string representation of this Id.
     *
     * @returns return the 24 character hex string representation.
     * @internal
     */
    ObjectId.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    ObjectId.prototype.inspect = function () {
        return "new ObjectId(\"".concat(this.toHexString(), "\")");
    };
    /** @internal */
    ObjectId.index = Math.floor(Math.random() * 0xffffff);
    return ObjectId;
}());
// Deprecated methods
Object.defineProperty(ObjectId.prototype, 'generate', {
    value: deprecate$1(function (time) { return ObjectId.generate(time); }, 'Please use the static `ObjectId.generate(time)` instead')
});
Object.defineProperty(ObjectId.prototype, 'getInc', {
    value: deprecate$1(function () { return ObjectId.getInc(); }, 'Please use the static `ObjectId.getInc()` instead')
});
Object.defineProperty(ObjectId.prototype, 'get_inc', {
    value: deprecate$1(function () { return ObjectId.getInc(); }, 'Please use the static `ObjectId.getInc()` instead')
});
Object.defineProperty(ObjectId, 'get_inc', {
    value: deprecate$1(function () { return ObjectId.getInc(); }, 'Please use the static `ObjectId.getInc()` instead')
});
Object.defineProperty(ObjectId.prototype, '_bsontype', { value: 'ObjectID' });

function alphabetize(str) {
    return str.split('').sort().join('');
}
/**
 * A class representation of the BSON RegExp type.
 * @public
 * @category BSONType
 */
var BSONRegExp = /** @class */ (function () {
    /**
     * @param pattern - The regular expression pattern to match
     * @param options - The regular expression options
     */
    function BSONRegExp(pattern, options) {
        if (!(this instanceof BSONRegExp))
            return new BSONRegExp(pattern, options);
        this.pattern = pattern;
        this.options = alphabetize(options !== null && options !== void 0 ? options : '');
        if (this.pattern.indexOf('\x00') !== -1) {
            throw new BSONError("BSON Regex patterns cannot contain null bytes, found: ".concat(JSON.stringify(this.pattern)));
        }
        if (this.options.indexOf('\x00') !== -1) {
            throw new BSONError("BSON Regex options cannot contain null bytes, found: ".concat(JSON.stringify(this.options)));
        }
        // Validate options
        for (var i = 0; i < this.options.length; i++) {
            if (!(this.options[i] === 'i' ||
                this.options[i] === 'm' ||
                this.options[i] === 'x' ||
                this.options[i] === 'l' ||
                this.options[i] === 's' ||
                this.options[i] === 'u')) {
                throw new BSONError("The regular expression option [".concat(this.options[i], "] is not supported"));
            }
        }
    }
    BSONRegExp.parseOptions = function (options) {
        return options ? options.split('').sort().join('') : '';
    };
    /** @internal */
    BSONRegExp.prototype.toExtendedJSON = function (options) {
        options = options || {};
        if (options.legacy) {
            return { $regex: this.pattern, $options: this.options };
        }
        return { $regularExpression: { pattern: this.pattern, options: this.options } };
    };
    /** @internal */
    BSONRegExp.fromExtendedJSON = function (doc) {
        if ('$regex' in doc) {
            if (typeof doc.$regex !== 'string') {
                // This is for $regex query operators that have extended json values.
                if (doc.$regex._bsontype === 'BSONRegExp') {
                    return doc;
                }
            }
            else {
                return new BSONRegExp(doc.$regex, BSONRegExp.parseOptions(doc.$options));
            }
        }
        if ('$regularExpression' in doc) {
            return new BSONRegExp(doc.$regularExpression.pattern, BSONRegExp.parseOptions(doc.$regularExpression.options));
        }
        throw new BSONTypeError("Unexpected BSONRegExp EJSON object form: ".concat(JSON.stringify(doc)));
    };
    return BSONRegExp;
}());
Object.defineProperty(BSONRegExp.prototype, '_bsontype', { value: 'BSONRegExp' });

/**
 * A class representation of the BSON Symbol type.
 * @public
 * @category BSONType
 */
var BSONSymbol = /** @class */ (function () {
    /**
     * @param value - the string representing the symbol.
     */
    function BSONSymbol(value) {
        if (!(this instanceof BSONSymbol))
            return new BSONSymbol(value);
        this.value = value;
    }
    /** Access the wrapped string value. */
    BSONSymbol.prototype.valueOf = function () {
        return this.value;
    };
    BSONSymbol.prototype.toString = function () {
        return this.value;
    };
    /** @internal */
    BSONSymbol.prototype.inspect = function () {
        return "new BSONSymbol(\"".concat(this.value, "\")");
    };
    BSONSymbol.prototype.toJSON = function () {
        return this.value;
    };
    /** @internal */
    BSONSymbol.prototype.toExtendedJSON = function () {
        return { $symbol: this.value };
    };
    /** @internal */
    BSONSymbol.fromExtendedJSON = function (doc) {
        return new BSONSymbol(doc.$symbol);
    };
    /** @internal */
    BSONSymbol.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    return BSONSymbol;
}());
Object.defineProperty(BSONSymbol.prototype, '_bsontype', { value: 'Symbol' });

/** @public */
var LongWithoutOverridesClass = Long;
/**
 * @public
 * @category BSONType
 * */
var Timestamp = /** @class */ (function (_super) {
    __extends(Timestamp, _super);
    function Timestamp(low, high) {
        var _this = this;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        if (!(_this instanceof Timestamp))
            return new Timestamp(low, high);
        if (Long.isLong(low)) {
            _this = _super.call(this, low.low, low.high, true) || this;
        }
        else if (isObjectLike(low) && typeof low.t !== 'undefined' && typeof low.i !== 'undefined') {
            _this = _super.call(this, low.i, low.t, true) || this;
        }
        else {
            _this = _super.call(this, low, high, true) || this;
        }
        Object.defineProperty(_this, '_bsontype', {
            value: 'Timestamp',
            writable: false,
            configurable: false,
            enumerable: false
        });
        return _this;
    }
    Timestamp.prototype.toJSON = function () {
        return {
            $timestamp: this.toString()
        };
    };
    /** Returns a Timestamp represented by the given (32-bit) integer value. */
    Timestamp.fromInt = function (value) {
        return new Timestamp(Long.fromInt(value, true));
    };
    /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */
    Timestamp.fromNumber = function (value) {
        return new Timestamp(Long.fromNumber(value, true));
    };
    /**
     * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.
     *
     * @param lowBits - the low 32-bits.
     * @param highBits - the high 32-bits.
     */
    Timestamp.fromBits = function (lowBits, highBits) {
        return new Timestamp(lowBits, highBits);
    };
    /**
     * Returns a Timestamp from the given string, optionally using the given radix.
     *
     * @param str - the textual representation of the Timestamp.
     * @param optRadix - the radix in which the text is written.
     */
    Timestamp.fromString = function (str, optRadix) {
        return new Timestamp(Long.fromString(str, true, optRadix));
    };
    /** @internal */
    Timestamp.prototype.toExtendedJSON = function () {
        return { $timestamp: { t: this.high >>> 0, i: this.low >>> 0 } };
    };
    /** @internal */
    Timestamp.fromExtendedJSON = function (doc) {
        return new Timestamp(doc.$timestamp);
    };
    /** @internal */
    Timestamp.prototype[Symbol.for('nodejs.util.inspect.custom')] = function () {
        return this.inspect();
    };
    Timestamp.prototype.inspect = function () {
        return "new Timestamp({ t: ".concat(this.getHighBits(), ", i: ").concat(this.getLowBits(), " })");
    };
    Timestamp.MAX_VALUE = Long.MAX_UNSIGNED_VALUE;
    return Timestamp;
}(LongWithoutOverridesClass));

function isBSONType(value) {
    return (isObjectLike(value) && Reflect.has(value, '_bsontype') && typeof value._bsontype === 'string');
}
// INT32 boundaries
var BSON_INT32_MAX = 0x7fffffff;
var BSON_INT32_MIN = -0x80000000;
// INT64 boundaries
// const BSON_INT64_MAX = 0x7fffffffffffffff; // TODO(NODE-4377): This number cannot be precisely represented in JS
var BSON_INT64_MAX = 0x8000000000000000;
var BSON_INT64_MIN = -0x8000000000000000;
// all the types where we don't need to do any special processing and can just pass the EJSON
//straight to type.fromExtendedJSON
var keysToCodecs = {
    $oid: ObjectId,
    $binary: Binary,
    $uuid: Binary,
    $symbol: BSONSymbol,
    $numberInt: Int32,
    $numberDecimal: Decimal128,
    $numberDouble: Double,
    $numberLong: Long,
    $minKey: MinKey,
    $maxKey: MaxKey,
    $regex: BSONRegExp,
    $regularExpression: BSONRegExp,
    $timestamp: Timestamp
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function deserializeValue(value, options) {
    if (options === void 0) { options = {}; }
    if (typeof value === 'number') {
        if (options.relaxed || options.legacy) {
            return value;
        }
        // if it's an integer, should interpret as smallest BSON integer
        // that can represent it exactly. (if out of range, interpret as double.)
        if (Math.floor(value) === value) {
            if (value >= BSON_INT32_MIN && value <= BSON_INT32_MAX)
                return new Int32(value);
            if (value >= BSON_INT64_MIN && value <= BSON_INT64_MAX)
                return Long.fromNumber(value);
        }
        // If the number is a non-integer or out of integer range, should interpret as BSON Double.
        return new Double(value);
    }
    // from here on out we're looking for bson types, so bail if its not an object
    if (value == null || typeof value !== 'object')
        return value;
    // upgrade deprecated undefined to null
    if (value.$undefined)
        return null;
    var keys = Object.keys(value).filter(function (k) { return k.startsWith('$') && value[k] != null; });
    for (var i = 0; i < keys.length; i++) {
        var c = keysToCodecs[keys[i]];
        if (c)
            return c.fromExtendedJSON(value, options);
    }
    if (value.$date != null) {
        var d = value.$date;
        var date = new Date();
        if (options.legacy) {
            if (typeof d === 'number')
                date.setTime(d);
            else if (typeof d === 'string')
                date.setTime(Date.parse(d));
        }
        else {
            if (typeof d === 'string')
                date.setTime(Date.parse(d));
            else if (Long.isLong(d))
                date.setTime(d.toNumber());
            else if (typeof d === 'number' && options.relaxed)
                date.setTime(d);
        }
        return date;
    }
    if (value.$code != null) {
        var copy = Object.assign({}, value);
        if (value.$scope) {
            copy.$scope = deserializeValue(value.$scope);
        }
        return Code.fromExtendedJSON(value);
    }
    if (isDBRefLike(value) || value.$dbPointer) {
        var v = value.$ref ? value : value.$dbPointer;
        // we run into this in a "degenerate EJSON" case (with $id and $ref order flipped)
        // because of the order JSON.parse goes through the document
        if (v instanceof DBRef)
            return v;
        var dollarKeys = Object.keys(v).filter(function (k) { return k.startsWith('$'); });
        var valid_1 = true;
        dollarKeys.forEach(function (k) {
            if (['$ref', '$id', '$db'].indexOf(k) === -1)
                valid_1 = false;
        });
        // only make DBRef if $ keys are all valid
        if (valid_1)
            return DBRef.fromExtendedJSON(v);
    }
    return value;
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function serializeArray(array, options) {
    return array.map(function (v, index) {
        options.seenObjects.push({ propertyName: "index ".concat(index), obj: null });
        try {
            return serializeValue(v, options);
        }
        finally {
            options.seenObjects.pop();
        }
    });
}
function getISOString(date) {
    var isoStr = date.toISOString();
    // we should only show milliseconds in timestamp if they're non-zero
    return date.getUTCMilliseconds() !== 0 ? isoStr : isoStr.slice(0, -5) + 'Z';
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function serializeValue(value, options) {
    if ((typeof value === 'object' || typeof value === 'function') && value !== null) {
        var index = options.seenObjects.findIndex(function (entry) { return entry.obj === value; });
        if (index !== -1) {
            var props = options.seenObjects.map(function (entry) { return entry.propertyName; });
            var leadingPart = props
                .slice(0, index)
                .map(function (prop) { return "".concat(prop, " -> "); })
                .join('');
            var alreadySeen = props[index];
            var circularPart = ' -> ' +
                props
                    .slice(index + 1, props.length - 1)
                    .map(function (prop) { return "".concat(prop, " -> "); })
                    .join('');
            var current = props[props.length - 1];
            var leadingSpace = ' '.repeat(leadingPart.length + alreadySeen.length / 2);
            var dashes = '-'.repeat(circularPart.length + (alreadySeen.length + current.length) / 2 - 1);
            throw new BSONTypeError('Converting circular structure to EJSON:\n' +
                "    ".concat(leadingPart).concat(alreadySeen).concat(circularPart).concat(current, "\n") +
                "    ".concat(leadingSpace, "\\").concat(dashes, "/"));
        }
        options.seenObjects[options.seenObjects.length - 1].obj = value;
    }
    if (Array.isArray(value))
        return serializeArray(value, options);
    if (value === undefined)
        return null;
    if (value instanceof Date || isDate(value)) {
        var dateNum = value.getTime(), 
        // is it in year range 1970-9999?
        inRange = dateNum > -1 && dateNum < 253402318800000;
        if (options.legacy) {
            return options.relaxed && inRange
                ? { $date: value.getTime() }
                : { $date: getISOString(value) };
        }
        return options.relaxed && inRange
            ? { $date: getISOString(value) }
            : { $date: { $numberLong: value.getTime().toString() } };
    }
    if (typeof value === 'number' && (!options.relaxed || !isFinite(value))) {
        // it's an integer
        if (Math.floor(value) === value) {
            var int32Range = value >= BSON_INT32_MIN && value <= BSON_INT32_MAX, int64Range = value >= BSON_INT64_MIN && value <= BSON_INT64_MAX;
            // interpret as being of the smallest BSON integer type that can represent the number exactly
            if (int32Range)
                return { $numberInt: value.toString() };
            if (int64Range)
                return { $numberLong: value.toString() };
        }
        return { $numberDouble: value.toString() };
    }
    if (value instanceof RegExp || isRegExp(value)) {
        var flags = value.flags;
        if (flags === undefined) {
            var match = value.toString().match(/[gimuy]*$/);
            if (match) {
                flags = match[0];
            }
        }
        var rx = new BSONRegExp(value.source, flags);
        return rx.toExtendedJSON(options);
    }
    if (value != null && typeof value === 'object')
        return serializeDocument(value, options);
    return value;
}
var BSON_TYPE_MAPPINGS = {
    Binary: function (o) { return new Binary(o.value(), o.sub_type); },
    Code: function (o) { return new Code(o.code, o.scope); },
    DBRef: function (o) { return new DBRef(o.collection || o.namespace, o.oid, o.db, o.fields); },
    Decimal128: function (o) { return new Decimal128(o.bytes); },
    Double: function (o) { return new Double(o.value); },
    Int32: function (o) { return new Int32(o.value); },
    Long: function (o) {
        return Long.fromBits(
        // underscore variants for 1.x backwards compatibility
        o.low != null ? o.low : o.low_, o.low != null ? o.high : o.high_, o.low != null ? o.unsigned : o.unsigned_);
    },
    MaxKey: function () { return new MaxKey(); },
    MinKey: function () { return new MinKey(); },
    ObjectID: function (o) { return new ObjectId(o); },
    ObjectId: function (o) { return new ObjectId(o); },
    BSONRegExp: function (o) { return new BSONRegExp(o.pattern, o.options); },
    Symbol: function (o) { return new BSONSymbol(o.value); },
    Timestamp: function (o) { return Timestamp.fromBits(o.low, o.high); }
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function serializeDocument(doc, options) {
    if (doc == null || typeof doc !== 'object')
        throw new BSONError('not an object instance');
    var bsontype = doc._bsontype;
    if (typeof bsontype === 'undefined') {
        // It's a regular object. Recursively serialize its property values.
        var _doc = {};
        for (var name in doc) {
            options.seenObjects.push({ propertyName: name, obj: null });
            try {
                var value = serializeValue(doc[name], options);
                if (name === '__proto__') {
                    Object.defineProperty(_doc, name, {
                        value: value,
                        writable: true,
                        enumerable: true,
                        configurable: true
                    });
                }
                else {
                    _doc[name] = value;
                }
            }
            finally {
                options.seenObjects.pop();
            }
        }
        return _doc;
    }
    else if (isBSONType(doc)) {
        // the "document" is really just a BSON type object
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var outDoc = doc;
        if (typeof outDoc.toExtendedJSON !== 'function') {
            // There's no EJSON serialization function on the object. It's probably an
            // object created by a previous version of this library (or another library)
            // that's duck-typing objects to look like they were generated by this library).
            // Copy the object into this library's version of that type.
            var mapper = BSON_TYPE_MAPPINGS[doc._bsontype];
            if (!mapper) {
                throw new BSONTypeError('Unrecognized or invalid _bsontype: ' + doc._bsontype);
            }
            outDoc = mapper(outDoc);
        }
        // Two BSON types may have nested objects that may need to be serialized too
        if (bsontype === 'Code' && outDoc.scope) {
            outDoc = new Code(outDoc.code, serializeValue(outDoc.scope, options));
        }
        else if (bsontype === 'DBRef' && outDoc.oid) {
            outDoc = new DBRef(serializeValue(outDoc.collection, options), serializeValue(outDoc.oid, options), serializeValue(outDoc.db, options), serializeValue(outDoc.fields, options));
        }
        return outDoc.toExtendedJSON(options);
    }
    else {
        throw new BSONError('_bsontype must be a string, but was: ' + typeof bsontype);
    }
}
/**
 * EJSON parse / stringify API
 * @public
 */
// the namespace here is used to emulate `export * as EJSON from '...'`
// which as of now (sept 2020) api-extractor does not support
// eslint-disable-next-line @typescript-eslint/no-namespace
var EJSON;
(function (EJSON) {
    /**
     * Parse an Extended JSON string, constructing the JavaScript value or object described by that
     * string.
     *
     * @example
     * ```js
     * const { EJSON } = require('bson');
     * const text = '{ "int32": { "$numberInt": "10" } }';
     *
     * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }
     * console.log(EJSON.parse(text, { relaxed: false }));
     *
     * // prints { int32: 10 }
     * console.log(EJSON.parse(text));
     * ```
     */
    function parse(text, options) {
        var finalOptions = Object.assign({}, { relaxed: true, legacy: false }, options);
        // relaxed implies not strict
        if (typeof finalOptions.relaxed === 'boolean')
            finalOptions.strict = !finalOptions.relaxed;
        if (typeof finalOptions.strict === 'boolean')
            finalOptions.relaxed = !finalOptions.strict;
        return JSON.parse(text, function (key, value) {
            if (key.indexOf('\x00') !== -1) {
                throw new BSONError("BSON Document field names cannot contain null bytes, found: ".concat(JSON.stringify(key)));
            }
            return deserializeValue(value, finalOptions);
        });
    }
    EJSON.parse = parse;
    /**
     * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer
     * function is specified or optionally including only the specified properties if a replacer array
     * is specified.
     *
     * @param value - The value to convert to extended JSON
     * @param replacer - A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string
     * @param space - A String or Number object that's used to insert white space into the output JSON string for readability purposes.
     * @param options - Optional settings
     *
     * @example
     * ```js
     * const { EJSON } = require('bson');
     * const Int32 = require('mongodb').Int32;
     * const doc = { int32: new Int32(10) };
     *
     * // prints '{"int32":{"$numberInt":"10"}}'
     * console.log(EJSON.stringify(doc, { relaxed: false }));
     *
     * // prints '{"int32":10}'
     * console.log(EJSON.stringify(doc));
     * ```
     */
    function stringify(value, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    replacer, space, options) {
        if (space != null && typeof space === 'object') {
            options = space;
            space = 0;
        }
        if (replacer != null && typeof replacer === 'object' && !Array.isArray(replacer)) {
            options = replacer;
            replacer = undefined;
            space = 0;
        }
        var serializeOptions = Object.assign({ relaxed: true, legacy: false }, options, {
            seenObjects: [{ propertyName: '(root)', obj: null }]
        });
        var doc = serializeValue(value, serializeOptions);
        return JSON.stringify(doc, replacer, space);
    }
    EJSON.stringify = stringify;
    /**
     * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.
     *
     * @param value - The object to serialize
     * @param options - Optional settings passed to the `stringify` function
     */
    function serialize(value, options) {
        options = options || {};
        return JSON.parse(stringify(value, options));
    }
    EJSON.serialize = serialize;
    /**
     * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types
     *
     * @param ejson - The Extended JSON object to deserialize
     * @param options - Optional settings passed to the parse method
     */
    function deserialize(ejson, options) {
        options = options || {};
        return parse(JSON.stringify(ejson), options);
    }
    EJSON.deserialize = deserialize;
})(EJSON || (EJSON = {}));

/* eslint-disable @typescript-eslint/no-explicit-any */
/** @public */
var bsonMap;
var bsonGlobal = getGlobal();
if (bsonGlobal.Map) {
    bsonMap = bsonGlobal.Map;
}
else {
    // We will return a polyfill
    bsonMap = /** @class */ (function () {
        function Map(array) {
            if (array === void 0) { array = []; }
            this._keys = [];
            this._values = {};
            for (var i = 0; i < array.length; i++) {
                if (array[i] == null)
                    continue; // skip null and undefined
                var entry = array[i];
                var key = entry[0];
                var value = entry[1];
                // Add the key to the list of keys in order
                this._keys.push(key);
                // Add the key and value to the values dictionary with a point
                // to the location in the ordered keys list
                this._values[key] = { v: value, i: this._keys.length - 1 };
            }
        }
        Map.prototype.clear = function () {
            this._keys = [];
            this._values = {};
        };
        Map.prototype.delete = function (key) {
            var value = this._values[key];
            if (value == null)
                return false;
            // Delete entry
            delete this._values[key];
            // Remove the key from the ordered keys list
            this._keys.splice(value.i, 1);
            return true;
        };
        Map.prototype.entries = function () {
            var _this = this;
            var index = 0;
            return {
                next: function () {
                    var key = _this._keys[index++];
                    return {
                        value: key !== undefined ? [key, _this._values[key].v] : undefined,
                        done: key !== undefined ? false : true
                    };
                }
            };
        };
        Map.prototype.forEach = function (callback, self) {
            self = self || this;
            for (var i = 0; i < this._keys.length; i++) {
                var key = this._keys[i];
                // Call the forEach callback
                callback.call(self, this._values[key].v, key, self);
            }
        };
        Map.prototype.get = function (key) {
            return this._values[key] ? this._values[key].v : undefined;
        };
        Map.prototype.has = function (key) {
            return this._values[key] != null;
        };
        Map.prototype.keys = function () {
            var _this = this;
            var index = 0;
            return {
                next: function () {
                    var key = _this._keys[index++];
                    return {
                        value: key !== undefined ? key : undefined,
                        done: key !== undefined ? false : true
                    };
                }
            };
        };
        Map.prototype.set = function (key, value) {
            if (this._values[key]) {
                this._values[key].v = value;
                return this;
            }
            // Add the key to the list of keys in order
            this._keys.push(key);
            // Add the key and value to the values dictionary with a point
            // to the location in the ordered keys list
            this._values[key] = { v: value, i: this._keys.length - 1 };
            return this;
        };
        Map.prototype.values = function () {
            var _this = this;
            var index = 0;
            return {
                next: function () {
                    var key = _this._keys[index++];
                    return {
                        value: key !== undefined ? _this._values[key].v : undefined,
                        done: key !== undefined ? false : true
                    };
                }
            };
        };
        Object.defineProperty(Map.prototype, "size", {
            get: function () {
                return this._keys.length;
            },
            enumerable: false,
            configurable: true
        });
        return Map;
    }());
}

function calculateObjectSize$1(object, serializeFunctions, ignoreUndefined) {
    var totalLength = 4 + 1;
    if (Array.isArray(object)) {
        for (var i = 0; i < object.length; i++) {
            totalLength += calculateElement(i.toString(), object[i], serializeFunctions, true, ignoreUndefined);
        }
    }
    else {
        // If we have toBSON defined, override the current object
        if (typeof (object === null || object === void 0 ? void 0 : object.toBSON) === 'function') {
            object = object.toBSON();
        }
        // Calculate size
        for (var key in object) {
            totalLength += calculateElement(key, object[key], serializeFunctions, false, ignoreUndefined);
        }
    }
    return totalLength;
}
/** @internal */
function calculateElement(name, 
// eslint-disable-next-line @typescript-eslint/no-explicit-any
value, serializeFunctions, isArray, ignoreUndefined) {
    if (serializeFunctions === void 0) { serializeFunctions = false; }
    if (isArray === void 0) { isArray = false; }
    if (ignoreUndefined === void 0) { ignoreUndefined = false; }
    // If we have toBSON defined, override the current object
    if (typeof (value === null || value === void 0 ? void 0 : value.toBSON) === 'function') {
        value = value.toBSON();
    }
    switch (typeof value) {
        case 'string':
            return 1 + Buffer$1.byteLength(name, 'utf8') + 1 + 4 + Buffer$1.byteLength(value, 'utf8') + 1;
        case 'number':
            if (Math.floor(value) === value &&
                value >= JS_INT_MIN &&
                value <= JS_INT_MAX) {
                if (value >= BSON_INT32_MIN$1 && value <= BSON_INT32_MAX$1) {
                    // 32 bit
                    return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (4 + 1);
                }
                else {
                    return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
                }
            }
            else {
                // 64 bit
                return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
            }
        case 'undefined':
            if (isArray || !ignoreUndefined)
                return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + 1;
            return 0;
        case 'boolean':
            return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (1 + 1);
        case 'object':
            if (value == null || value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
                return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + 1;
            }
            else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {
                return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (12 + 1);
            }
            else if (value instanceof Date || isDate(value)) {
                return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
            }
            else if (ArrayBuffer.isView(value) ||
                value instanceof ArrayBuffer ||
                isAnyArrayBuffer(value)) {
                return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (1 + 4 + 1) + value.byteLength);
            }
            else if (value['_bsontype'] === 'Long' ||
                value['_bsontype'] === 'Double' ||
                value['_bsontype'] === 'Timestamp') {
                return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (8 + 1);
            }
            else if (value['_bsontype'] === 'Decimal128') {
                return (name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (16 + 1);
            }
            else if (value['_bsontype'] === 'Code') {
                // Calculate size depending on the availability of a scope
                if (value.scope != null && Object.keys(value.scope).length > 0) {
                    return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                        1 +
                        4 +
                        4 +
                        Buffer$1.byteLength(value.code.toString(), 'utf8') +
                        1 +
                        calculateObjectSize$1(value.scope, serializeFunctions, ignoreUndefined));
                }
                else {
                    return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                        1 +
                        4 +
                        Buffer$1.byteLength(value.code.toString(), 'utf8') +
                        1);
                }
            }
            else if (value['_bsontype'] === 'Binary') {
                var binary = value;
                // Check what kind of subtype we have
                if (binary.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {
                    return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                        (binary.position + 1 + 4 + 1 + 4));
                }
                else {
                    return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) + (binary.position + 1 + 4 + 1));
                }
            }
            else if (value['_bsontype'] === 'Symbol') {
                return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                    Buffer$1.byteLength(value.value, 'utf8') +
                    4 +
                    1 +
                    1);
            }
            else if (value['_bsontype'] === 'DBRef') {
                // Set up correct object for serialization
                var ordered_values = Object.assign({
                    $ref: value.collection,
                    $id: value.oid
                }, value.fields);
                // Add db reference if it exists
                if (value.db != null) {
                    ordered_values['$db'] = value.db;
                }
                return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                    1 +
                    calculateObjectSize$1(ordered_values, serializeFunctions, ignoreUndefined));
            }
            else if (value instanceof RegExp || isRegExp(value)) {
                return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                    1 +
                    Buffer$1.byteLength(value.source, 'utf8') +
                    1 +
                    (value.global ? 1 : 0) +
                    (value.ignoreCase ? 1 : 0) +
                    (value.multiline ? 1 : 0) +
                    1);
            }
            else if (value['_bsontype'] === 'BSONRegExp') {
                return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                    1 +
                    Buffer$1.byteLength(value.pattern, 'utf8') +
                    1 +
                    Buffer$1.byteLength(value.options, 'utf8') +
                    1);
            }
            else {
                return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                    calculateObjectSize$1(value, serializeFunctions, ignoreUndefined) +
                    1);
            }
        case 'function':
            // WTF for 0.4.X where typeof /someregexp/ === 'function'
            if (value instanceof RegExp || isRegExp(value) || String.call(value) === '[object RegExp]') {
                return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                    1 +
                    Buffer$1.byteLength(value.source, 'utf8') +
                    1 +
                    (value.global ? 1 : 0) +
                    (value.ignoreCase ? 1 : 0) +
                    (value.multiline ? 1 : 0) +
                    1);
            }
            else {
                if (serializeFunctions && value.scope != null && Object.keys(value.scope).length > 0) {
                    return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                        1 +
                        4 +
                        4 +
                        Buffer$1.byteLength(normalizedFunctionString(value), 'utf8') +
                        1 +
                        calculateObjectSize$1(value.scope, serializeFunctions, ignoreUndefined));
                }
                else if (serializeFunctions) {
                    return ((name != null ? Buffer$1.byteLength(name, 'utf8') + 1 : 0) +
                        1 +
                        4 +
                        Buffer$1.byteLength(normalizedFunctionString(value), 'utf8') +
                        1);
                }
            }
    }
    return 0;
}

var FIRST_BIT = 0x80;
var FIRST_TWO_BITS = 0xc0;
var FIRST_THREE_BITS = 0xe0;
var FIRST_FOUR_BITS = 0xf0;
var FIRST_FIVE_BITS = 0xf8;
var TWO_BIT_CHAR = 0xc0;
var THREE_BIT_CHAR = 0xe0;
var FOUR_BIT_CHAR = 0xf0;
var CONTINUING_CHAR = 0x80;
/**
 * Determines if the passed in bytes are valid utf8
 * @param bytes - An array of 8-bit bytes. Must be indexable and have length property
 * @param start - The index to start validating
 * @param end - The index to end validating
 */
function validateUtf8(bytes, start, end) {
    var continuation = 0;
    for (var i = start; i < end; i += 1) {
        var byte = bytes[i];
        if (continuation) {
            if ((byte & FIRST_TWO_BITS) !== CONTINUING_CHAR) {
                return false;
            }
            continuation -= 1;
        }
        else if (byte & FIRST_BIT) {
            if ((byte & FIRST_THREE_BITS) === TWO_BIT_CHAR) {
                continuation = 1;
            }
            else if ((byte & FIRST_FOUR_BITS) === THREE_BIT_CHAR) {
                continuation = 2;
            }
            else if ((byte & FIRST_FIVE_BITS) === FOUR_BIT_CHAR) {
                continuation = 3;
            }
            else {
                return false;
            }
        }
    }
    return !continuation;
}

// Internal long versions
var JS_INT_MAX_LONG = Long.fromNumber(JS_INT_MAX);
var JS_INT_MIN_LONG = Long.fromNumber(JS_INT_MIN);
var functionCache = {};
function deserialize$1(buffer, options, isArray) {
    options = options == null ? {} : options;
    var index = options && options.index ? options.index : 0;
    // Read the document size
    var size = buffer[index] |
        (buffer[index + 1] << 8) |
        (buffer[index + 2] << 16) |
        (buffer[index + 3] << 24);
    if (size < 5) {
        throw new BSONError("bson size must be >= 5, is ".concat(size));
    }
    if (options.allowObjectSmallerThanBufferSize && buffer.length < size) {
        throw new BSONError("buffer length ".concat(buffer.length, " must be >= bson size ").concat(size));
    }
    if (!options.allowObjectSmallerThanBufferSize && buffer.length !== size) {
        throw new BSONError("buffer length ".concat(buffer.length, " must === bson size ").concat(size));
    }
    if (size + index > buffer.byteLength) {
        throw new BSONError("(bson size ".concat(size, " + options.index ").concat(index, " must be <= buffer length ").concat(buffer.byteLength, ")"));
    }
    // Illegal end value
    if (buffer[index + size - 1] !== 0) {
        throw new BSONError("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");
    }
    // Start deserializtion
    return deserializeObject(buffer, index, options, isArray);
}
var allowedDBRefKeys = /^\$ref$|^\$id$|^\$db$/;
function deserializeObject(buffer, index, options, isArray) {
    if (isArray === void 0) { isArray = false; }
    var evalFunctions = options['evalFunctions'] == null ? false : options['evalFunctions'];
    var cacheFunctions = options['cacheFunctions'] == null ? false : options['cacheFunctions'];
    var fieldsAsRaw = options['fieldsAsRaw'] == null ? null : options['fieldsAsRaw'];
    // Return raw bson buffer instead of parsing it
    var raw = options['raw'] == null ? false : options['raw'];
    // Return BSONRegExp objects instead of native regular expressions
    var bsonRegExp = typeof options['bsonRegExp'] === 'boolean' ? options['bsonRegExp'] : false;
    // Controls the promotion of values vs wrapper classes
    var promoteBuffers = options['promoteBuffers'] == null ? false : options['promoteBuffers'];
    var promoteLongs = options['promoteLongs'] == null ? true : options['promoteLongs'];
    var promoteValues = options['promoteValues'] == null ? true : options['promoteValues'];
    // Ensures default validation option if none given
    var validation = options.validation == null ? { utf8: true } : options.validation;
    // Shows if global utf-8 validation is enabled or disabled
    var globalUTFValidation = true;
    // Reflects utf-8 validation setting regardless of global or specific key validation
    var validationSetting;
    // Set of keys either to enable or disable validation on
    var utf8KeysSet = new Set();
    // Check for boolean uniformity and empty validation option
    var utf8ValidatedKeys = validation.utf8;
    if (typeof utf8ValidatedKeys === 'boolean') {
        validationSetting = utf8ValidatedKeys;
    }
    else {
        globalUTFValidation = false;
        var utf8ValidationValues = Object.keys(utf8ValidatedKeys).map(function (key) {
            return utf8ValidatedKeys[key];
        });
        if (utf8ValidationValues.length === 0) {
            throw new BSONError('UTF-8 validation setting cannot be empty');
        }
        if (typeof utf8ValidationValues[0] !== 'boolean') {
            throw new BSONError('Invalid UTF-8 validation option, must specify boolean values');
        }
        validationSetting = utf8ValidationValues[0];
        // Ensures boolean uniformity in utf-8 validation (all true or all false)
        if (!utf8ValidationValues.every(function (item) { return item === validationSetting; })) {
            throw new BSONError('Invalid UTF-8 validation option - keys must be all true or all false');
        }
    }
    // Add keys to set that will either be validated or not based on validationSetting
    if (!globalUTFValidation) {
        for (var _i = 0, _a = Object.keys(utf8ValidatedKeys); _i < _a.length; _i++) {
            var key = _a[_i];
            utf8KeysSet.add(key);
        }
    }
    // Set the start index
    var startIndex = index;
    // Validate that we have at least 4 bytes of buffer
    if (buffer.length < 5)
        throw new BSONError('corrupt bson message < 5 bytes long');
    // Read the document size
    var size = buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24);
    // Ensure buffer is valid size
    if (size < 5 || size > buffer.length)
        throw new BSONError('corrupt bson message');
    // Create holding object
    var object = isArray ? [] : {};
    // Used for arrays to skip having to perform utf8 decoding
    var arrayIndex = 0;
    var done = false;
    var isPossibleDBRef = isArray ? false : null;
    // While we have more left data left keep parsing
    var dataview = new DataView(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    while (!done) {
        // Read the type
        var elementType = buffer[index++];
        // If we get a zero it's the last byte, exit
        if (elementType === 0)
            break;
        // Get the start search index
        var i = index;
        // Locate the end of the c string
        while (buffer[i] !== 0x00 && i < buffer.length) {
            i++;
        }
        // If are at the end of the buffer there is a problem with the document
        if (i >= buffer.byteLength)
            throw new BSONError('Bad BSON Document: illegal CString');
        // Represents the key
        var name = isArray ? arrayIndex++ : buffer.toString('utf8', index, i);
        // shouldValidateKey is true if the key should be validated, false otherwise
        var shouldValidateKey = true;
        if (globalUTFValidation || utf8KeysSet.has(name)) {
            shouldValidateKey = validationSetting;
        }
        else {
            shouldValidateKey = !validationSetting;
        }
        if (isPossibleDBRef !== false && name[0] === '$') {
            isPossibleDBRef = allowedDBRefKeys.test(name);
        }
        var value = void 0;
        index = i + 1;
        if (elementType === BSON_DATA_STRING) {
            var stringSize = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            if (stringSize <= 0 ||
                stringSize > buffer.length - index ||
                buffer[index + stringSize - 1] !== 0) {
                throw new BSONError('bad string length in bson');
            }
            value = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            index = index + stringSize;
        }
        else if (elementType === BSON_DATA_OID) {
            var oid = Buffer$1.alloc(12);
            buffer.copy(oid, 0, index, index + 12);
            value = new ObjectId(oid);
            index = index + 12;
        }
        else if (elementType === BSON_DATA_INT && promoteValues === false) {
            value = new Int32(buffer[index++] | (buffer[index++] << 8) | (buffer[index++] << 16) | (buffer[index++] << 24));
        }
        else if (elementType === BSON_DATA_INT) {
            value =
                buffer[index++] |
                    (buffer[index++] << 8) |
                    (buffer[index++] << 16) |
                    (buffer[index++] << 24);
        }
        else if (elementType === BSON_DATA_NUMBER && promoteValues === false) {
            value = new Double(dataview.getFloat64(index, true));
            index = index + 8;
        }
        else if (elementType === BSON_DATA_NUMBER) {
            value = dataview.getFloat64(index, true);
            index = index + 8;
        }
        else if (elementType === BSON_DATA_DATE) {
            var lowBits = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            var highBits = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            value = new Date(new Long(lowBits, highBits).toNumber());
        }
        else if (elementType === BSON_DATA_BOOLEAN) {
            if (buffer[index] !== 0 && buffer[index] !== 1)
                throw new BSONError('illegal boolean type value');
            value = buffer[index++] === 1;
        }
        else if (elementType === BSON_DATA_OBJECT) {
            var _index = index;
            var objectSize = buffer[index] |
                (buffer[index + 1] << 8) |
                (buffer[index + 2] << 16) |
                (buffer[index + 3] << 24);
            if (objectSize <= 0 || objectSize > buffer.length - index)
                throw new BSONError('bad embedded document length in bson');
            // We have a raw value
            if (raw) {
                value = buffer.slice(index, index + objectSize);
            }
            else {
                var objectOptions = options;
                if (!globalUTFValidation) {
                    objectOptions = _assign(_assign({}, options), { validation: { utf8: shouldValidateKey } });
                }
                value = deserializeObject(buffer, _index, objectOptions, false);
            }
            index = index + objectSize;
        }
        else if (elementType === BSON_DATA_ARRAY) {
            var _index = index;
            var objectSize = buffer[index] |
                (buffer[index + 1] << 8) |
                (buffer[index + 2] << 16) |
                (buffer[index + 3] << 24);
            var arrayOptions = options;
            // Stop index
            var stopIndex = index + objectSize;
            // All elements of array to be returned as raw bson
            if (fieldsAsRaw && fieldsAsRaw[name]) {
                arrayOptions = {};
                for (var n in options) {
                    arrayOptions[n] = options[n];
                }
                arrayOptions['raw'] = true;
            }
            if (!globalUTFValidation) {
                arrayOptions = _assign(_assign({}, arrayOptions), { validation: { utf8: shouldValidateKey } });
            }
            value = deserializeObject(buffer, _index, arrayOptions, true);
            index = index + objectSize;
            if (buffer[index - 1] !== 0)
                throw new BSONError('invalid array terminator byte');
            if (index !== stopIndex)
                throw new BSONError('corrupted array bson');
        }
        else if (elementType === BSON_DATA_UNDEFINED) {
            value = undefined;
        }
        else if (elementType === BSON_DATA_NULL) {
            value = null;
        }
        else if (elementType === BSON_DATA_LONG) {
            // Unpack the low and high bits
            var lowBits = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            var highBits = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            var long = new Long(lowBits, highBits);
            // Promote the long if possible
            if (promoteLongs && promoteValues === true) {
                value =
                    long.lessThanOrEqual(JS_INT_MAX_LONG) && long.greaterThanOrEqual(JS_INT_MIN_LONG)
                        ? long.toNumber()
                        : long;
            }
            else {
                value = long;
            }
        }
        else if (elementType === BSON_DATA_DECIMAL128) {
            // Buffer to contain the decimal bytes
            var bytes = Buffer$1.alloc(16);
            // Copy the next 16 bytes into the bytes buffer
            buffer.copy(bytes, 0, index, index + 16);
            // Update index
            index = index + 16;
            // Assign the new Decimal128 value
            var decimal128 = new Decimal128(bytes);
            // If we have an alternative mapper use that
            if ('toObject' in decimal128 && typeof decimal128.toObject === 'function') {
                value = decimal128.toObject();
            }
            else {
                value = decimal128;
            }
        }
        else if (elementType === BSON_DATA_BINARY) {
            var binarySize = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            var totalBinarySize = binarySize;
            var subType = buffer[index++];
            // Did we have a negative binary size, throw
            if (binarySize < 0)
                throw new BSONError('Negative binary type element size found');
            // Is the length longer than the document
            if (binarySize > buffer.byteLength)
                throw new BSONError('Binary type size larger than document size');
            // Decode as raw Buffer object if options specifies it
            if (buffer['slice'] != null) {
                // If we have subtype 2 skip the 4 bytes for the size
                if (subType === Binary.SUBTYPE_BYTE_ARRAY) {
                    binarySize =
                        buffer[index++] |
                            (buffer[index++] << 8) |
                            (buffer[index++] << 16) |
                            (buffer[index++] << 24);
                    if (binarySize < 0)
                        throw new BSONError('Negative binary type element size found for subtype 0x02');
                    if (binarySize > totalBinarySize - 4)
                        throw new BSONError('Binary type with subtype 0x02 contains too long binary size');
                    if (binarySize < totalBinarySize - 4)
                        throw new BSONError('Binary type with subtype 0x02 contains too short binary size');
                }
                if (promoteBuffers && promoteValues) {
                    value = buffer.slice(index, index + binarySize);
                }
                else {
                    value = new Binary(buffer.slice(index, index + binarySize), subType);
                    if (subType === BSON_BINARY_SUBTYPE_UUID_NEW) {
                        value = value.toUUID();
                    }
                }
            }
            else {
                var _buffer = Buffer$1.alloc(binarySize);
                // If we have subtype 2 skip the 4 bytes for the size
                if (subType === Binary.SUBTYPE_BYTE_ARRAY) {
                    binarySize =
                        buffer[index++] |
                            (buffer[index++] << 8) |
                            (buffer[index++] << 16) |
                            (buffer[index++] << 24);
                    if (binarySize < 0)
                        throw new BSONError('Negative binary type element size found for subtype 0x02');
                    if (binarySize > totalBinarySize - 4)
                        throw new BSONError('Binary type with subtype 0x02 contains too long binary size');
                    if (binarySize < totalBinarySize - 4)
                        throw new BSONError('Binary type with subtype 0x02 contains too short binary size');
                }
                // Copy the data
                for (i = 0; i < binarySize; i++) {
                    _buffer[i] = buffer[index + i];
                }
                if (promoteBuffers && promoteValues) {
                    value = _buffer;
                }
                else if (subType === BSON_BINARY_SUBTYPE_UUID_NEW) {
                    value = new Binary(buffer.slice(index, index + binarySize), subType).toUUID();
                }
                else {
                    value = new Binary(buffer.slice(index, index + binarySize), subType);
                }
            }
            // Update the index
            index = index + binarySize;
        }
        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === false) {
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while (buffer[i] !== 0x00 && i < buffer.length) {
                i++;
            }
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length)
                throw new BSONError('Bad BSON Document: illegal CString');
            // Return the C string
            var source = buffer.toString('utf8', index, i);
            // Create the regexp
            index = i + 1;
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while (buffer[i] !== 0x00 && i < buffer.length) {
                i++;
            }
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length)
                throw new BSONError('Bad BSON Document: illegal CString');
            // Return the C string
            var regExpOptions = buffer.toString('utf8', index, i);
            index = i + 1;
            // For each option add the corresponding one for javascript
            var optionsArray = new Array(regExpOptions.length);
            // Parse options
            for (i = 0; i < regExpOptions.length; i++) {
                switch (regExpOptions[i]) {
                    case 'm':
                        optionsArray[i] = 'm';
                        break;
                    case 's':
                        optionsArray[i] = 'g';
                        break;
                    case 'i':
                        optionsArray[i] = 'i';
                        break;
                }
            }
            value = new RegExp(source, optionsArray.join(''));
        }
        else if (elementType === BSON_DATA_REGEXP && bsonRegExp === true) {
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while (buffer[i] !== 0x00 && i < buffer.length) {
                i++;
            }
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length)
                throw new BSONError('Bad BSON Document: illegal CString');
            // Return the C string
            var source = buffer.toString('utf8', index, i);
            index = i + 1;
            // Get the start search index
            i = index;
            // Locate the end of the c string
            while (buffer[i] !== 0x00 && i < buffer.length) {
                i++;
            }
            // If are at the end of the buffer there is a problem with the document
            if (i >= buffer.length)
                throw new BSONError('Bad BSON Document: illegal CString');
            // Return the C string
            var regExpOptions = buffer.toString('utf8', index, i);
            index = i + 1;
            // Set the object
            value = new BSONRegExp(source, regExpOptions);
        }
        else if (elementType === BSON_DATA_SYMBOL) {
            var stringSize = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            if (stringSize <= 0 ||
                stringSize > buffer.length - index ||
                buffer[index + stringSize - 1] !== 0) {
                throw new BSONError('bad string length in bson');
            }
            var symbol = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            value = promoteValues ? symbol : new BSONSymbol(symbol);
            index = index + stringSize;
        }
        else if (elementType === BSON_DATA_TIMESTAMP) {
            var lowBits = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            var highBits = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            value = new Timestamp(lowBits, highBits);
        }
        else if (elementType === BSON_DATA_MIN_KEY) {
            value = new MinKey();
        }
        else if (elementType === BSON_DATA_MAX_KEY) {
            value = new MaxKey();
        }
        else if (elementType === BSON_DATA_CODE) {
            var stringSize = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            if (stringSize <= 0 ||
                stringSize > buffer.length - index ||
                buffer[index + stringSize - 1] !== 0) {
                throw new BSONError('bad string length in bson');
            }
            var functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            // If we are evaluating the functions
            if (evalFunctions) {
                // If we have cache enabled let's look for the md5 of the function in the cache
                if (cacheFunctions) {
                    // Got to do this to avoid V8 deoptimizing the call due to finding eval
                    value = isolateEval(functionString, functionCache, object);
                }
                else {
                    value = isolateEval(functionString);
                }
            }
            else {
                value = new Code(functionString);
            }
            // Update parse index position
            index = index + stringSize;
        }
        else if (elementType === BSON_DATA_CODE_W_SCOPE) {
            var totalSize = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            // Element cannot be shorter than totalSize + stringSize + documentSize + terminator
            if (totalSize < 4 + 4 + 4 + 1) {
                throw new BSONError('code_w_scope total size shorter minimum expected length');
            }
            // Get the code string size
            var stringSize = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            // Check if we have a valid string
            if (stringSize <= 0 ||
                stringSize > buffer.length - index ||
                buffer[index + stringSize - 1] !== 0) {
                throw new BSONError('bad string length in bson');
            }
            // Javascript function
            var functionString = getValidatedString(buffer, index, index + stringSize - 1, shouldValidateKey);
            // Update parse index position
            index = index + stringSize;
            // Parse the element
            var _index = index;
            // Decode the size of the object document
            var objectSize = buffer[index] |
                (buffer[index + 1] << 8) |
                (buffer[index + 2] << 16) |
                (buffer[index + 3] << 24);
            // Decode the scope object
            var scopeObject = deserializeObject(buffer, _index, options, false);
            // Adjust the index
            index = index + objectSize;
            // Check if field length is too short
            if (totalSize < 4 + 4 + objectSize + stringSize) {
                throw new BSONError('code_w_scope total size is too short, truncating scope');
            }
            // Check if totalSize field is too long
            if (totalSize > 4 + 4 + objectSize + stringSize) {
                throw new BSONError('code_w_scope total size is too long, clips outer document');
            }
            // If we are evaluating the functions
            if (evalFunctions) {
                // If we have cache enabled let's look for the md5 of the function in the cache
                if (cacheFunctions) {
                    // Got to do this to avoid V8 deoptimizing the call due to finding eval
                    value = isolateEval(functionString, functionCache, object);
                }
                else {
                    value = isolateEval(functionString);
                }
                value.scope = scopeObject;
            }
            else {
                value = new Code(functionString, scopeObject);
            }
        }
        else if (elementType === BSON_DATA_DBPOINTER) {
            // Get the code string size
            var stringSize = buffer[index++] |
                (buffer[index++] << 8) |
                (buffer[index++] << 16) |
                (buffer[index++] << 24);
            // Check if we have a valid string
            if (stringSize <= 0 ||
                stringSize > buffer.length - index ||
                buffer[index + stringSize - 1] !== 0)
                throw new BSONError('bad string length in bson');
            // Namespace
            if (validation != null && validation.utf8) {
                if (!validateUtf8(buffer, index, index + stringSize - 1)) {
                    throw new BSONError('Invalid UTF-8 string in BSON document');
                }
            }
            var namespace = buffer.toString('utf8', index, index + stringSize - 1);
            // Update parse index position
            index = index + stringSize;
            // Read the oid
            var oidBuffer = Buffer$1.alloc(12);
            buffer.copy(oidBuffer, 0, index, index + 12);
            var oid = new ObjectId(oidBuffer);
            // Update the index
            index = index + 12;
            // Upgrade to DBRef type
            value = new DBRef(namespace, oid);
        }
        else {
            throw new BSONError("Detected unknown BSON type ".concat(elementType.toString(16), " for fieldname \"").concat(name, "\""));
        }
        if (name === '__proto__') {
            Object.defineProperty(object, name, {
                value: value,
                writable: true,
                enumerable: true,
                configurable: true
            });
        }
        else {
            object[name] = value;
        }
    }
    // Check if the deserialization was against a valid array/object
    if (size !== index - startIndex) {
        if (isArray)
            throw new BSONError('corrupt array bson');
        throw new BSONError('corrupt object bson');
    }
    // if we did not find "$ref", "$id", "$db", or found an extraneous $key, don't make a DBRef
    if (!isPossibleDBRef)
        return object;
    if (isDBRefLike(object)) {
        var copy = Object.assign({}, object);
        delete copy.$ref;
        delete copy.$id;
        delete copy.$db;
        return new DBRef(object.$ref, object.$id, object.$db, copy);
    }
    return object;
}
/**
 * Ensure eval is isolated, store the result in functionCache.
 *
 * @internal
 */
function isolateEval(functionString, functionCache, object) {
    // eslint-disable-next-line @typescript-eslint/no-implied-eval
    if (!functionCache)
        return new Function(functionString);
    // Check for cache hit, eval if missing and return cached function
    if (functionCache[functionString] == null) {
        // eslint-disable-next-line @typescript-eslint/no-implied-eval
        functionCache[functionString] = new Function(functionString);
    }
    // Set the object
    return functionCache[functionString].bind(object);
}
function getValidatedString(buffer, start, end, shouldValidateUtf8) {
    var value = buffer.toString('utf8', start, end);
    // if utf8 validation is on, do the check
    if (shouldValidateUtf8) {
        for (var i = 0; i < value.length; i++) {
            if (value.charCodeAt(i) === 0xfffd) {
                if (!validateUtf8(buffer, start, end)) {
                    throw new BSONError('Invalid UTF-8 string in BSON document');
                }
                break;
            }
        }
    }
    return value;
}

var regexp = /\x00/; // eslint-disable-line no-control-regex
var ignoreKeys = new Set(['$db', '$ref', '$id', '$clusterTime']);
/*
 * isArray indicates if we are writing to a BSON array (type 0x04)
 * which forces the "key" which really an array index as a string to be written as ascii
 * This will catch any errors in index as a string generation
 */
function serializeString(buffer, key, value, index, isArray) {
    // Encode String type
    buffer[index++] = BSON_DATA_STRING;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes + 1;
    buffer[index - 1] = 0;
    // Write the string
    var size = buffer.write(value, index + 4, undefined, 'utf8');
    // Write the size of the string to buffer
    buffer[index + 3] = ((size + 1) >> 24) & 0xff;
    buffer[index + 2] = ((size + 1) >> 16) & 0xff;
    buffer[index + 1] = ((size + 1) >> 8) & 0xff;
    buffer[index] = (size + 1) & 0xff;
    // Update index
    index = index + 4 + size;
    // Write zero
    buffer[index++] = 0;
    return index;
}
var SPACE_FOR_FLOAT64 = new Uint8Array(8);
var DV_FOR_FLOAT64 = new DataView(SPACE_FOR_FLOAT64.buffer, SPACE_FOR_FLOAT64.byteOffset, SPACE_FOR_FLOAT64.byteLength);
function serializeNumber(buffer, key, value, index, isArray) {
    // We have an integer value
    // TODO(NODE-2529): Add support for big int
    if (Number.isInteger(value) &&
        value >= BSON_INT32_MIN$1 &&
        value <= BSON_INT32_MAX$1) {
        // If the value fits in 32 bits encode as int32
        // Set int type 32 bits or less
        buffer[index++] = BSON_DATA_INT;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray
            ? buffer.write(key, index, undefined, 'utf8')
            : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Write the int value
        buffer[index++] = value & 0xff;
        buffer[index++] = (value >> 8) & 0xff;
        buffer[index++] = (value >> 16) & 0xff;
        buffer[index++] = (value >> 24) & 0xff;
    }
    else {
        // Encode as double
        buffer[index++] = BSON_DATA_NUMBER;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray
            ? buffer.write(key, index, undefined, 'utf8')
            : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Write float
        DV_FOR_FLOAT64.setFloat64(0, value, true);
        buffer.set(SPACE_FOR_FLOAT64, index);
        // Adjust index
        index = index + 8;
    }
    return index;
}
function serializeNull(buffer, key, _, index, isArray) {
    // Set long type
    buffer[index++] = BSON_DATA_NULL;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    return index;
}
function serializeBoolean(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_BOOLEAN;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Encode the boolean value
    buffer[index++] = value ? 1 : 0;
    return index;
}
function serializeDate(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_DATE;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the date
    var dateInMilis = Long.fromNumber(value.getTime());
    var lowBits = dateInMilis.getLowBits();
    var highBits = dateInMilis.getHighBits();
    // Encode low bits
    buffer[index++] = lowBits & 0xff;
    buffer[index++] = (lowBits >> 8) & 0xff;
    buffer[index++] = (lowBits >> 16) & 0xff;
    buffer[index++] = (lowBits >> 24) & 0xff;
    // Encode high bits
    buffer[index++] = highBits & 0xff;
    buffer[index++] = (highBits >> 8) & 0xff;
    buffer[index++] = (highBits >> 16) & 0xff;
    buffer[index++] = (highBits >> 24) & 0xff;
    return index;
}
function serializeRegExp(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_REGEXP;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    if (value.source && value.source.match(regexp) != null) {
        throw Error('value ' + value.source + ' must not contain null bytes');
    }
    // Adjust the index
    index = index + buffer.write(value.source, index, undefined, 'utf8');
    // Write zero
    buffer[index++] = 0x00;
    // Write the parameters
    if (value.ignoreCase)
        buffer[index++] = 0x69; // i
    if (value.global)
        buffer[index++] = 0x73; // s
    if (value.multiline)
        buffer[index++] = 0x6d; // m
    // Add ending zero
    buffer[index++] = 0x00;
    return index;
}
function serializeBSONRegExp(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_REGEXP;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Check the pattern for 0 bytes
    if (value.pattern.match(regexp) != null) {
        // The BSON spec doesn't allow keys with null bytes because keys are
        // null-terminated.
        throw Error('pattern ' + value.pattern + ' must not contain null bytes');
    }
    // Adjust the index
    index = index + buffer.write(value.pattern, index, undefined, 'utf8');
    // Write zero
    buffer[index++] = 0x00;
    // Write the options
    index = index + buffer.write(value.options.split('').sort().join(''), index, undefined, 'utf8');
    // Add ending zero
    buffer[index++] = 0x00;
    return index;
}
function serializeMinMax(buffer, key, value, index, isArray) {
    // Write the type of either min or max key
    if (value === null) {
        buffer[index++] = BSON_DATA_NULL;
    }
    else if (value._bsontype === 'MinKey') {
        buffer[index++] = BSON_DATA_MIN_KEY;
    }
    else {
        buffer[index++] = BSON_DATA_MAX_KEY;
    }
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    return index;
}
function serializeObjectId(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_OID;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the objectId into the shared buffer
    if (typeof value.id === 'string') {
        buffer.write(value.id, index, undefined, 'binary');
    }
    else if (isUint8Array(value.id)) {
        // Use the standard JS methods here because buffer.copy() is buggy with the
        // browser polyfill
        buffer.set(value.id.subarray(0, 12), index);
    }
    else {
        throw new BSONTypeError('object [' + JSON.stringify(value) + '] is not a valid ObjectId');
    }
    // Adjust index
    return index + 12;
}
function serializeBuffer(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_BINARY;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Get size of the buffer (current write point)
    var size = value.length;
    // Write the size of the string to buffer
    buffer[index++] = size & 0xff;
    buffer[index++] = (size >> 8) & 0xff;
    buffer[index++] = (size >> 16) & 0xff;
    buffer[index++] = (size >> 24) & 0xff;
    // Write the default subtype
    buffer[index++] = BSON_BINARY_SUBTYPE_DEFAULT;
    // Copy the content form the binary field to the buffer
    buffer.set(ensureBuffer(value), index);
    // Adjust the index
    index = index + size;
    return index;
}
function serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray, path) {
    if (checkKeys === void 0) { checkKeys = false; }
    if (depth === void 0) { depth = 0; }
    if (serializeFunctions === void 0) { serializeFunctions = false; }
    if (ignoreUndefined === void 0) { ignoreUndefined = true; }
    if (isArray === void 0) { isArray = false; }
    if (path === void 0) { path = []; }
    for (var i = 0; i < path.length; i++) {
        if (path[i] === value)
            throw new BSONError('cyclic dependency detected');
    }
    // Push value to stack
    path.push(value);
    // Write the type
    buffer[index++] = Array.isArray(value) ? BSON_DATA_ARRAY : BSON_DATA_OBJECT;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    var endIndex = serializeInto(buffer, value, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined, path);
    // Pop stack
    path.pop();
    return endIndex;
}
function serializeDecimal128(buffer, key, value, index, isArray) {
    buffer[index++] = BSON_DATA_DECIMAL128;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the data from the value
    // Prefer the standard JS methods because their typechecking is not buggy,
    // unlike the `buffer` polyfill's.
    buffer.set(value.bytes.subarray(0, 16), index);
    return index + 16;
}
function serializeLong(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] =
        value._bsontype === 'Long' ? BSON_DATA_LONG : BSON_DATA_TIMESTAMP;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the date
    var lowBits = value.getLowBits();
    var highBits = value.getHighBits();
    // Encode low bits
    buffer[index++] = lowBits & 0xff;
    buffer[index++] = (lowBits >> 8) & 0xff;
    buffer[index++] = (lowBits >> 16) & 0xff;
    buffer[index++] = (lowBits >> 24) & 0xff;
    // Encode high bits
    buffer[index++] = highBits & 0xff;
    buffer[index++] = (highBits >> 8) & 0xff;
    buffer[index++] = (highBits >> 16) & 0xff;
    buffer[index++] = (highBits >> 24) & 0xff;
    return index;
}
function serializeInt32(buffer, key, value, index, isArray) {
    value = value.valueOf();
    // Set int type 32 bits or less
    buffer[index++] = BSON_DATA_INT;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the int value
    buffer[index++] = value & 0xff;
    buffer[index++] = (value >> 8) & 0xff;
    buffer[index++] = (value >> 16) & 0xff;
    buffer[index++] = (value >> 24) & 0xff;
    return index;
}
function serializeDouble(buffer, key, value, index, isArray) {
    // Encode as double
    buffer[index++] = BSON_DATA_NUMBER;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write float
    DV_FOR_FLOAT64.setFloat64(0, value.value, true);
    buffer.set(SPACE_FOR_FLOAT64, index);
    // Adjust index
    index = index + 8;
    return index;
}
function serializeFunction(buffer, key, value, index, _checkKeys, _depth, isArray) {
    buffer[index++] = BSON_DATA_CODE;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Function string
    var functionString = normalizedFunctionString(value);
    // Write the string
    var size = buffer.write(functionString, index + 4, undefined, 'utf8') + 1;
    // Write the size of the string to buffer
    buffer[index] = size & 0xff;
    buffer[index + 1] = (size >> 8) & 0xff;
    buffer[index + 2] = (size >> 16) & 0xff;
    buffer[index + 3] = (size >> 24) & 0xff;
    // Update index
    index = index + 4 + size - 1;
    // Write zero
    buffer[index++] = 0;
    return index;
}
function serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, isArray) {
    if (checkKeys === void 0) { checkKeys = false; }
    if (depth === void 0) { depth = 0; }
    if (serializeFunctions === void 0) { serializeFunctions = false; }
    if (ignoreUndefined === void 0) { ignoreUndefined = true; }
    if (isArray === void 0) { isArray = false; }
    if (value.scope && typeof value.scope === 'object') {
        // Write the type
        buffer[index++] = BSON_DATA_CODE_W_SCOPE;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray
            ? buffer.write(key, index, undefined, 'utf8')
            : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Starting index
        var startIndex = index;
        // Serialize the function
        // Get the function string
        var functionString = typeof value.code === 'string' ? value.code : value.code.toString();
        // Index adjustment
        index = index + 4;
        // Write string into buffer
        var codeSize = buffer.write(functionString, index + 4, undefined, 'utf8') + 1;
        // Write the size of the string to buffer
        buffer[index] = codeSize & 0xff;
        buffer[index + 1] = (codeSize >> 8) & 0xff;
        buffer[index + 2] = (codeSize >> 16) & 0xff;
        buffer[index + 3] = (codeSize >> 24) & 0xff;
        // Write end 0
        buffer[index + 4 + codeSize - 1] = 0;
        // Write the
        index = index + codeSize + 4;
        //
        // Serialize the scope value
        var endIndex = serializeInto(buffer, value.scope, checkKeys, index, depth + 1, serializeFunctions, ignoreUndefined);
        index = endIndex - 1;
        // Writ the total
        var totalSize = endIndex - startIndex;
        // Write the total size of the object
        buffer[startIndex++] = totalSize & 0xff;
        buffer[startIndex++] = (totalSize >> 8) & 0xff;
        buffer[startIndex++] = (totalSize >> 16) & 0xff;
        buffer[startIndex++] = (totalSize >> 24) & 0xff;
        // Write trailing zero
        buffer[index++] = 0;
    }
    else {
        buffer[index++] = BSON_DATA_CODE;
        // Number of written bytes
        var numberOfWrittenBytes = !isArray
            ? buffer.write(key, index, undefined, 'utf8')
            : buffer.write(key, index, undefined, 'ascii');
        // Encode the name
        index = index + numberOfWrittenBytes;
        buffer[index++] = 0;
        // Function string
        var functionString = value.code.toString();
        // Write the string
        var size = buffer.write(functionString, index + 4, undefined, 'utf8') + 1;
        // Write the size of the string to buffer
        buffer[index] = size & 0xff;
        buffer[index + 1] = (size >> 8) & 0xff;
        buffer[index + 2] = (size >> 16) & 0xff;
        buffer[index + 3] = (size >> 24) & 0xff;
        // Update index
        index = index + 4 + size - 1;
        // Write zero
        buffer[index++] = 0;
    }
    return index;
}
function serializeBinary(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_BINARY;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Extract the buffer
    var data = value.value(true);
    // Calculate size
    var size = value.position;
    // Add the deprecated 02 type 4 bytes of size to total
    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY)
        size = size + 4;
    // Write the size of the string to buffer
    buffer[index++] = size & 0xff;
    buffer[index++] = (size >> 8) & 0xff;
    buffer[index++] = (size >> 16) & 0xff;
    buffer[index++] = (size >> 24) & 0xff;
    // Write the subtype to the buffer
    buffer[index++] = value.sub_type;
    // If we have binary type 2 the 4 first bytes are the size
    if (value.sub_type === Binary.SUBTYPE_BYTE_ARRAY) {
        size = size - 4;
        buffer[index++] = size & 0xff;
        buffer[index++] = (size >> 8) & 0xff;
        buffer[index++] = (size >> 16) & 0xff;
        buffer[index++] = (size >> 24) & 0xff;
    }
    // Write the data to the object
    buffer.set(data, index);
    // Adjust the index
    index = index + value.position;
    return index;
}
function serializeSymbol(buffer, key, value, index, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_SYMBOL;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    // Write the string
    var size = buffer.write(value.value, index + 4, undefined, 'utf8') + 1;
    // Write the size of the string to buffer
    buffer[index] = size & 0xff;
    buffer[index + 1] = (size >> 8) & 0xff;
    buffer[index + 2] = (size >> 16) & 0xff;
    buffer[index + 3] = (size >> 24) & 0xff;
    // Update index
    index = index + 4 + size - 1;
    // Write zero
    buffer[index++] = 0x00;
    return index;
}
function serializeDBRef(buffer, key, value, index, depth, serializeFunctions, isArray) {
    // Write the type
    buffer[index++] = BSON_DATA_OBJECT;
    // Number of written bytes
    var numberOfWrittenBytes = !isArray
        ? buffer.write(key, index, undefined, 'utf8')
        : buffer.write(key, index, undefined, 'ascii');
    // Encode the name
    index = index + numberOfWrittenBytes;
    buffer[index++] = 0;
    var startIndex = index;
    var output = {
        $ref: value.collection || value.namespace,
        $id: value.oid
    };
    if (value.db != null) {
        output.$db = value.db;
    }
    output = Object.assign(output, value.fields);
    var endIndex = serializeInto(buffer, output, false, index, depth + 1, serializeFunctions);
    // Calculate object size
    var size = endIndex - startIndex;
    // Write the size
    buffer[startIndex++] = size & 0xff;
    buffer[startIndex++] = (size >> 8) & 0xff;
    buffer[startIndex++] = (size >> 16) & 0xff;
    buffer[startIndex++] = (size >> 24) & 0xff;
    // Set index
    return endIndex;
}
function serializeInto(buffer, object, checkKeys, startingIndex, depth, serializeFunctions, ignoreUndefined, path) {
    if (checkKeys === void 0) { checkKeys = false; }
    if (startingIndex === void 0) { startingIndex = 0; }
    if (depth === void 0) { depth = 0; }
    if (serializeFunctions === void 0) { serializeFunctions = false; }
    if (ignoreUndefined === void 0) { ignoreUndefined = true; }
    if (path === void 0) { path = []; }
    startingIndex = startingIndex || 0;
    path = path || [];
    // Push the object to the path
    path.push(object);
    // Start place to serialize into
    var index = startingIndex + 4;
    // Special case isArray
    if (Array.isArray(object)) {
        // Get object keys
        for (var i = 0; i < object.length; i++) {
            var key = "".concat(i);
            var value = object[i];
            // Is there an override value
            if (typeof (value === null || value === void 0 ? void 0 : value.toBSON) === 'function') {
                value = value.toBSON();
            }
            if (typeof value === 'string') {
                index = serializeString(buffer, key, value, index, true);
            }
            else if (typeof value === 'number') {
                index = serializeNumber(buffer, key, value, index, true);
            }
            else if (typeof value === 'bigint') {
                throw new BSONTypeError('Unsupported type BigInt, please use Decimal128');
            }
            else if (typeof value === 'boolean') {
                index = serializeBoolean(buffer, key, value, index, true);
            }
            else if (value instanceof Date || isDate(value)) {
                index = serializeDate(buffer, key, value, index, true);
            }
            else if (value === undefined) {
                index = serializeNull(buffer, key, value, index, true);
            }
            else if (value === null) {
                index = serializeNull(buffer, key, value, index, true);
            }
            else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {
                index = serializeObjectId(buffer, key, value, index, true);
            }
            else if (isUint8Array(value)) {
                index = serializeBuffer(buffer, key, value, index, true);
            }
            else if (value instanceof RegExp || isRegExp(value)) {
                index = serializeRegExp(buffer, key, value, index, true);
            }
            else if (typeof value === 'object' && value['_bsontype'] == null) {
                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true, path);
            }
            else if (typeof value === 'object' &&
                isBSONType(value) &&
                value._bsontype === 'Decimal128') {
                index = serializeDecimal128(buffer, key, value, index, true);
            }
            else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {
                index = serializeLong(buffer, key, value, index, true);
            }
            else if (value['_bsontype'] === 'Double') {
                index = serializeDouble(buffer, key, value, index, true);
            }
            else if (typeof value === 'function' && serializeFunctions) {
                index = serializeFunction(buffer, key, value, index, checkKeys, depth, true);
            }
            else if (value['_bsontype'] === 'Code') {
                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, true);
            }
            else if (value['_bsontype'] === 'Binary') {
                index = serializeBinary(buffer, key, value, index, true);
            }
            else if (value['_bsontype'] === 'Symbol') {
                index = serializeSymbol(buffer, key, value, index, true);
            }
            else if (value['_bsontype'] === 'DBRef') {
                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions, true);
            }
            else if (value['_bsontype'] === 'BSONRegExp') {
                index = serializeBSONRegExp(buffer, key, value, index, true);
            }
            else if (value['_bsontype'] === 'Int32') {
                index = serializeInt32(buffer, key, value, index, true);
            }
            else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
                index = serializeMinMax(buffer, key, value, index, true);
            }
            else if (typeof value['_bsontype'] !== 'undefined') {
                throw new BSONTypeError("Unrecognized or invalid _bsontype: ".concat(String(value['_bsontype'])));
            }
        }
    }
    else if (object instanceof bsonMap || isMap(object)) {
        var iterator = object.entries();
        var done = false;
        while (!done) {
            // Unpack the next entry
            var entry = iterator.next();
            done = !!entry.done;
            // Are we done, then skip and terminate
            if (done)
                continue;
            // Get the entry values
            var key = entry.value[0];
            var value = entry.value[1];
            // Check the type of the value
            var type = typeof value;
            // Check the key and throw error if it's illegal
            if (typeof key === 'string' && !ignoreKeys.has(key)) {
                if (key.match(regexp) != null) {
                    // The BSON spec doesn't allow keys with null bytes because keys are
                    // null-terminated.
                    throw Error('key ' + key + ' must not contain null bytes');
                }
                if (checkKeys) {
                    if ('$' === key[0]) {
                        throw Error('key ' + key + " must not start with '$'");
                    }
                    else if (~key.indexOf('.')) {
                        throw Error('key ' + key + " must not contain '.'");
                    }
                }
            }
            if (type === 'string') {
                index = serializeString(buffer, key, value, index);
            }
            else if (type === 'number') {
                index = serializeNumber(buffer, key, value, index);
            }
            else if (type === 'bigint' || isBigInt64Array(value) || isBigUInt64Array(value)) {
                throw new BSONTypeError('Unsupported type BigInt, please use Decimal128');
            }
            else if (type === 'boolean') {
                index = serializeBoolean(buffer, key, value, index);
            }
            else if (value instanceof Date || isDate(value)) {
                index = serializeDate(buffer, key, value, index);
            }
            else if (value === null || (value === undefined && ignoreUndefined === false)) {
                index = serializeNull(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {
                index = serializeObjectId(buffer, key, value, index);
            }
            else if (isUint8Array(value)) {
                index = serializeBuffer(buffer, key, value, index);
            }
            else if (value instanceof RegExp || isRegExp(value)) {
                index = serializeRegExp(buffer, key, value, index);
            }
            else if (type === 'object' && value['_bsontype'] == null) {
                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
            }
            else if (type === 'object' && value['_bsontype'] === 'Decimal128') {
                index = serializeDecimal128(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {
                index = serializeLong(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Double') {
                index = serializeDouble(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Code') {
                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
            }
            else if (typeof value === 'function' && serializeFunctions) {
                index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
            }
            else if (value['_bsontype'] === 'Binary') {
                index = serializeBinary(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Symbol') {
                index = serializeSymbol(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'DBRef') {
                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
            }
            else if (value['_bsontype'] === 'BSONRegExp') {
                index = serializeBSONRegExp(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Int32') {
                index = serializeInt32(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
                index = serializeMinMax(buffer, key, value, index);
            }
            else if (typeof value['_bsontype'] !== 'undefined') {
                throw new BSONTypeError("Unrecognized or invalid _bsontype: ".concat(String(value['_bsontype'])));
            }
        }
    }
    else {
        if (typeof (object === null || object === void 0 ? void 0 : object.toBSON) === 'function') {
            // Provided a custom serialization method
            object = object.toBSON();
            if (object != null && typeof object !== 'object') {
                throw new BSONTypeError('toBSON function did not return an object');
            }
        }
        // Iterate over all the keys
        for (var key in object) {
            var value = object[key];
            // Is there an override value
            if (typeof (value === null || value === void 0 ? void 0 : value.toBSON) === 'function') {
                value = value.toBSON();
            }
            // Check the type of the value
            var type = typeof value;
            // Check the key and throw error if it's illegal
            if (typeof key === 'string' && !ignoreKeys.has(key)) {
                if (key.match(regexp) != null) {
                    // The BSON spec doesn't allow keys with null bytes because keys are
                    // null-terminated.
                    throw Error('key ' + key + ' must not contain null bytes');
                }
                if (checkKeys) {
                    if ('$' === key[0]) {
                        throw Error('key ' + key + " must not start with '$'");
                    }
                    else if (~key.indexOf('.')) {
                        throw Error('key ' + key + " must not contain '.'");
                    }
                }
            }
            if (type === 'string') {
                index = serializeString(buffer, key, value, index);
            }
            else if (type === 'number') {
                index = serializeNumber(buffer, key, value, index);
            }
            else if (type === 'bigint') {
                throw new BSONTypeError('Unsupported type BigInt, please use Decimal128');
            }
            else if (type === 'boolean') {
                index = serializeBoolean(buffer, key, value, index);
            }
            else if (value instanceof Date || isDate(value)) {
                index = serializeDate(buffer, key, value, index);
            }
            else if (value === undefined) {
                if (ignoreUndefined === false)
                    index = serializeNull(buffer, key, value, index);
            }
            else if (value === null) {
                index = serializeNull(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'ObjectId' || value['_bsontype'] === 'ObjectID') {
                index = serializeObjectId(buffer, key, value, index);
            }
            else if (isUint8Array(value)) {
                index = serializeBuffer(buffer, key, value, index);
            }
            else if (value instanceof RegExp || isRegExp(value)) {
                index = serializeRegExp(buffer, key, value, index);
            }
            else if (type === 'object' && value['_bsontype'] == null) {
                index = serializeObject(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined, false, path);
            }
            else if (type === 'object' && value['_bsontype'] === 'Decimal128') {
                index = serializeDecimal128(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Long' || value['_bsontype'] === 'Timestamp') {
                index = serializeLong(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Double') {
                index = serializeDouble(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Code') {
                index = serializeCode(buffer, key, value, index, checkKeys, depth, serializeFunctions, ignoreUndefined);
            }
            else if (typeof value === 'function' && serializeFunctions) {
                index = serializeFunction(buffer, key, value, index, checkKeys, depth, serializeFunctions);
            }
            else if (value['_bsontype'] === 'Binary') {
                index = serializeBinary(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Symbol') {
                index = serializeSymbol(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'DBRef') {
                index = serializeDBRef(buffer, key, value, index, depth, serializeFunctions);
            }
            else if (value['_bsontype'] === 'BSONRegExp') {
                index = serializeBSONRegExp(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'Int32') {
                index = serializeInt32(buffer, key, value, index);
            }
            else if (value['_bsontype'] === 'MinKey' || value['_bsontype'] === 'MaxKey') {
                index = serializeMinMax(buffer, key, value, index);
            }
            else if (typeof value['_bsontype'] !== 'undefined') {
                throw new BSONTypeError("Unrecognized or invalid _bsontype: ".concat(String(value['_bsontype'])));
            }
        }
    }
    // Remove the path
    path.pop();
    // Final padding byte for object
    buffer[index++] = 0x00;
    // Final size
    var size = index - startingIndex;
    // Write the size of the object
    buffer[startingIndex++] = size & 0xff;
    buffer[startingIndex++] = (size >> 8) & 0xff;
    buffer[startingIndex++] = (size >> 16) & 0xff;
    buffer[startingIndex++] = (size >> 24) & 0xff;
    return index;
}

/** @internal */
// Default Max Size
var MAXSIZE = 1024 * 1024 * 17;
// Current Internal Temporary Serialization Buffer
var buffer = Buffer$1.alloc(MAXSIZE);
/**
 * Sets the size of the internal serialization buffer.
 *
 * @param size - The desired size for the internal serialization buffer
 * @public
 */
function setInternalBufferSize(size) {
    // Resize the internal serialization buffer if needed
    if (buffer.length < size) {
        buffer = Buffer$1.alloc(size);
    }
}
/**
 * Serialize a Javascript object.
 *
 * @param object - the Javascript object to serialize.
 * @returns Buffer object containing the serialized object.
 * @public
 */
function serialize(object, options) {
    if (options === void 0) { options = {}; }
    // Unpack the options
    var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
    var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    var minInternalBufferSize = typeof options.minInternalBufferSize === 'number' ? options.minInternalBufferSize : MAXSIZE;
    // Resize the internal serialization buffer if needed
    if (buffer.length < minInternalBufferSize) {
        buffer = Buffer$1.alloc(minInternalBufferSize);
    }
    // Attempt to serialize
    var serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined, []);
    // Create the final buffer
    var finishedBuffer = Buffer$1.alloc(serializationIndex);
    // Copy into the finished buffer
    buffer.copy(finishedBuffer, 0, 0, finishedBuffer.length);
    // Return the buffer
    return finishedBuffer;
}
/**
 * Serialize a Javascript object using a predefined Buffer and index into the buffer,
 * useful when pre-allocating the space for serialization.
 *
 * @param object - the Javascript object to serialize.
 * @param finalBuffer - the Buffer you pre-allocated to store the serialized BSON object.
 * @returns the index pointing to the last written byte in the buffer.
 * @public
 */
function serializeWithBufferAndIndex(object, finalBuffer, options) {
    if (options === void 0) { options = {}; }
    // Unpack the options
    var checkKeys = typeof options.checkKeys === 'boolean' ? options.checkKeys : false;
    var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    var startIndex = typeof options.index === 'number' ? options.index : 0;
    // Attempt to serialize
    var serializationIndex = serializeInto(buffer, object, checkKeys, 0, 0, serializeFunctions, ignoreUndefined);
    buffer.copy(finalBuffer, startIndex, 0, serializationIndex);
    // Return the index
    return startIndex + serializationIndex - 1;
}
/**
 * Deserialize data as BSON.
 *
 * @param buffer - the buffer containing the serialized set of BSON documents.
 * @returns returns the deserialized Javascript Object.
 * @public
 */
function deserialize(buffer, options) {
    if (options === void 0) { options = {}; }
    return deserialize$1(buffer instanceof Buffer$1 ? buffer : ensureBuffer(buffer), options);
}
/**
 * Calculate the bson size for a passed in Javascript object.
 *
 * @param object - the Javascript object to calculate the BSON byte size for
 * @returns size of BSON object in bytes
 * @public
 */
function calculateObjectSize(object, options) {
    if (options === void 0) { options = {}; }
    options = options || {};
    var serializeFunctions = typeof options.serializeFunctions === 'boolean' ? options.serializeFunctions : false;
    var ignoreUndefined = typeof options.ignoreUndefined === 'boolean' ? options.ignoreUndefined : true;
    return calculateObjectSize$1(object, serializeFunctions, ignoreUndefined);
}
/**
 * Deserialize stream data as BSON documents.
 *
 * @param data - the buffer containing the serialized set of BSON documents.
 * @param startIndex - the start index in the data Buffer where the deserialization is to start.
 * @param numberOfDocuments - number of documents to deserialize.
 * @param documents - an array where to store the deserialized documents.
 * @param docStartIndex - the index in the documents array from where to start inserting documents.
 * @param options - additional options used for the deserialization.
 * @returns next index in the buffer after deserialization **x** numbers of documents.
 * @public
 */
function deserializeStream(data, startIndex, numberOfDocuments, documents, docStartIndex, options) {
    var internalOptions = Object.assign({ allowObjectSmallerThanBufferSize: true, index: 0 }, options);
    var bufferData = ensureBuffer(data);
    var index = startIndex;
    // Loop over all documents
    for (var i = 0; i < numberOfDocuments; i++) {
        // Find size of the document
        var size = bufferData[index] |
            (bufferData[index + 1] << 8) |
            (bufferData[index + 2] << 16) |
            (bufferData[index + 3] << 24);
        // Update options with index
        internalOptions.index = index;
        // Parse the document at this point
        documents[docStartIndex + i] = deserialize$1(bufferData, internalOptions);
        // Adjust index by the document size
        index = index + size;
    }
    // Return object containing end index of parsing and list of documents
    return index;
}
/**
 * BSON default export
 * @deprecated Please use named exports
 * @privateRemarks
 * We want to someday deprecate the default export,
 * so none of the new TS types are being exported on the default
 * @public
 */
var BSON = {
    Binary: Binary,
    Code: Code,
    DBRef: DBRef,
    Decimal128: Decimal128,
    Double: Double,
    Int32: Int32,
    Long: Long,
    UUID: UUID,
    Map: bsonMap,
    MaxKey: MaxKey,
    MinKey: MinKey,
    ObjectId: ObjectId,
    ObjectID: ObjectId,
    BSONRegExp: BSONRegExp,
    BSONSymbol: BSONSymbol,
    Timestamp: Timestamp,
    EJSON: EJSON,
    setInternalBufferSize: setInternalBufferSize,
    serialize: serialize,
    serializeWithBufferAndIndex: serializeWithBufferAndIndex,
    deserialize: deserialize,
    calculateObjectSize: calculateObjectSize,
    deserializeStream: deserializeStream,
    BSONError: BSONError,
    BSONTypeError: BSONTypeError
};

var bson_esm = /*#__PURE__*/Object.freeze({
	__proto__: null,
	BSONError: BSONError,
	BSONRegExp: BSONRegExp,
	BSONSymbol: BSONSymbol,
	BSONTypeError: BSONTypeError,
	BSON_BINARY_SUBTYPE_BYTE_ARRAY: BSON_BINARY_SUBTYPE_BYTE_ARRAY,
	BSON_BINARY_SUBTYPE_COLUMN: BSON_BINARY_SUBTYPE_COLUMN,
	BSON_BINARY_SUBTYPE_DEFAULT: BSON_BINARY_SUBTYPE_DEFAULT,
	BSON_BINARY_SUBTYPE_ENCRYPTED: BSON_BINARY_SUBTYPE_ENCRYPTED,
	BSON_BINARY_SUBTYPE_FUNCTION: BSON_BINARY_SUBTYPE_FUNCTION,
	BSON_BINARY_SUBTYPE_MD5: BSON_BINARY_SUBTYPE_MD5,
	BSON_BINARY_SUBTYPE_USER_DEFINED: BSON_BINARY_SUBTYPE_USER_DEFINED,
	BSON_BINARY_SUBTYPE_UUID: BSON_BINARY_SUBTYPE_UUID,
	BSON_BINARY_SUBTYPE_UUID_NEW: BSON_BINARY_SUBTYPE_UUID_NEW,
	BSON_DATA_ARRAY: BSON_DATA_ARRAY,
	BSON_DATA_BINARY: BSON_DATA_BINARY,
	BSON_DATA_BOOLEAN: BSON_DATA_BOOLEAN,
	BSON_DATA_CODE: BSON_DATA_CODE,
	BSON_DATA_CODE_W_SCOPE: BSON_DATA_CODE_W_SCOPE,
	BSON_DATA_DATE: BSON_DATA_DATE,
	BSON_DATA_DBPOINTER: BSON_DATA_DBPOINTER,
	BSON_DATA_DECIMAL128: BSON_DATA_DECIMAL128,
	BSON_DATA_INT: BSON_DATA_INT,
	BSON_DATA_LONG: BSON_DATA_LONG,
	BSON_DATA_MAX_KEY: BSON_DATA_MAX_KEY,
	BSON_DATA_MIN_KEY: BSON_DATA_MIN_KEY,
	BSON_DATA_NULL: BSON_DATA_NULL,
	BSON_DATA_NUMBER: BSON_DATA_NUMBER,
	BSON_DATA_OBJECT: BSON_DATA_OBJECT,
	BSON_DATA_OID: BSON_DATA_OID,
	BSON_DATA_REGEXP: BSON_DATA_REGEXP,
	BSON_DATA_STRING: BSON_DATA_STRING,
	BSON_DATA_SYMBOL: BSON_DATA_SYMBOL,
	BSON_DATA_TIMESTAMP: BSON_DATA_TIMESTAMP,
	BSON_DATA_UNDEFINED: BSON_DATA_UNDEFINED,
	BSON_INT32_MAX: BSON_INT32_MAX$1,
	BSON_INT32_MIN: BSON_INT32_MIN$1,
	BSON_INT64_MAX: BSON_INT64_MAX$1,
	BSON_INT64_MIN: BSON_INT64_MIN$1,
	Binary: Binary,
	Code: Code,
	DBRef: DBRef,
	Decimal128: Decimal128,
	Double: Double,
	get EJSON () { return EJSON; },
	Int32: Int32,
	Long: Long,
	LongWithoutOverridesClass: LongWithoutOverridesClass,
	get Map () { return bsonMap; },
	MaxKey: MaxKey,
	MinKey: MinKey,
	ObjectID: ObjectId,
	ObjectId: ObjectId,
	Timestamp: Timestamp,
	UUID: UUID,
	calculateObjectSize: calculateObjectSize,
	default: BSON,
	deserialize: deserialize,
	deserializeStream: deserializeStream,
	serialize: serialize,
	serializeWithBufferAndIndex: serializeWithBufferAndIndex,
	setInternalBufferSize: setInternalBufferSize
});

var require$$1 = /*@__PURE__*/getAugmentedNamespace(bson_esm);

var __createBinding$9 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$9 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$9 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$9(result, mod, k);
    __setModuleDefault$9(result, mod);
    return result;
};
Object.defineProperty(encoder, "__esModule", { value: true });
encoder.createBSONStreamEncoder = void 0;
const stream$1 = __importStar$9(crossStream);
const constants$2 = __importStar$9(constants$3);
const bson$2 = __importStar$9(require$$1);
const createBSONStreamEncoder = (params) => {
    let readableStrategy = params?.readableStrategy;
    if (!readableStrategy) {
        readableStrategy = new stream$1.ByteLengthStrategy({
            highWaterMark: 1024 * 16
        });
    }
    return new stream$1.Transform({
        transform(chunk, controller) {
            controller.enqueue(bson$2.serialize(chunk, params?.serialize_options));
        },
        flush(controller) {
            if (params?.sendTerminatorOnEnd ?? true) {
                controller.enqueue(constants$2.TERMINATOR);
            }
        }
    }, params?.writableStrategy, readableStrategy);
};
encoder.createBSONStreamEncoder = createBSONStreamEncoder;

var decoder = {};

var __createBinding$8 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$8 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$8 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$8(result, mod, k);
    __setModuleDefault$8(result, mod);
    return result;
};
Object.defineProperty(decoder, "__esModule", { value: true });
decoder.createBSONStreamDecoder = void 0;
const buffer_array$1 = __importStar$8(bufferArray);
const stream = __importStar$8(crossStream);
const constants$1 = __importStar$8(constants$3);
const bson$1 = __importStar$8(require$$1);
const createBSONStreamDecoder = (params) => {
    const buffer = buffer_array$1.createReadableBufferArray();
    let frame_size = null;
    function* decodeFrames() {
        while (true) {
            if (frame_size === null) {
                frame_size = buffer.peek(4)?.readInt32LE(0) || null;
            }
            if (frame_size === null) {
                break;
            }
            if (buffer.size() < frame_size) {
                break;
            }
            const frame = buffer.read(frame_size);
            if (!frame) {
                break;
            }
            frame_size = null;
            yield bson$1.deserialize(frame, {
                promoteBuffers: true,
                validation: {
                    utf8: false
                },
                ...(params?.deserialize_options || {})
            });
        }
    }
    let writableStrategy = params?.writableStrategy;
    if (!writableStrategy) {
        writableStrategy = new stream.ByteLengthStrategy({
            highWaterMark: 1024 * 16
        });
    }
    return new stream.Transform({
        transform(chunk, controller) {
            buffer.push(chunk);
            for (const frame of decodeFrames()) {
                controller.enqueue(frame);
            }
        },
        flush(controller) {
            for (const frame of decodeFrames()) {
                controller.enqueue(frame);
            }
            const tail = buffer.peek(4);
            if (tail && Buffer.compare(constants$1.TERMINATOR, tail) === 0) {
                return;
            }
            if (params?.require_terminator === false) {
                return;
            }
            throw new Error('stream did not complete successfully');
        }
    }, writableStrategy, params?.readableStrategy);
};
decoder.createBSONStreamDecoder = createBSONStreamDecoder;

var header = {};

var __createBinding$7 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$7 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$7 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$7(result, mod, k);
    __setModuleDefault$7(result, mod);
    return result;
};
Object.defineProperty(header, "__esModule", { value: true });
header.prependHeaderToStream = header.extractHeaderFromStream = void 0;
const buffer_array = __importStar$7(bufferArray);
const bson = __importStar$7(require$$1);
const extractHeaderFromStream = async (input_stream, params) => {
    const iterator = input_stream[Symbol.asyncIterator]();
    const buffer = buffer_array.createReadableBufferArray();
    let frame_size = null;
    async function* resplice(data, iterator) {
        if (data) {
            yield data;
        }
        while (true) {
            const next = await iterator.next();
            if (next.done) {
                return;
            }
            yield next.value;
        }
    }
    while (true) {
        const chunk = await iterator.next();
        if (chunk.done) {
            throw new Error('Stream did not complete successfully');
        }
        buffer.push(chunk.value);
        if (frame_size === null) {
            frame_size = buffer.peek(4)?.readInt32LE(0) || null;
        }
        if (frame_size === null) {
            continue;
        }
        const frame = buffer.read(frame_size);
        if (!frame) {
            continue;
        }
        const header = bson.deserialize(frame, {
            promoteBuffers: true,
            ...(params?.deserialize_options || {})
        });
        return {
            header: header,
            stream: resplice(buffer.read(buffer.size()), iterator)
        };
    }
};
header.extractHeaderFromStream = extractHeaderFromStream;
async function* prependHeaderToStream(header, input_stream) {
    yield bson.serialize(header);
    yield* input_stream;
}
header.prependHeaderToStream = prependHeaderToStream;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(bufferArray, exports);
	__exportStar(constants$3, exports);
	__exportStar(encoder, exports);
	__exportStar(decoder, exports);
	__exportStar(header, exports); 
} (bson$3));

var transformers = {};

/**
 * A set of standard helpers for working with iterators.
 *
 * The majority of the utils included here can be removed if and when the tc39 iterator-helpers proposal lands:
 * https://github.com/tc39/proposal-iterator-helpers
 */
Object.defineProperty(transformers, "__esModule", { value: true });
transformers.drain = transformers.reduce = transformers.reduced = transformers.filter = transformers.map = transformers.concat = void 0;
/**
 * Takes n number of streams (or any AsyncIterators) and returns an AsyncGenerator that
 * yields the concatenated output of all input streams
 */
async function* concat(...sources) {
    for (const source of sources) {
        yield* source;
    }
}
transformers.concat = concat;
/**
 * Implements `Array.prototype.map` for iterables
 */
async function* map(iterable, transform) {
    for await (const element of iterable) {
        yield await transform(element);
    }
}
transformers.map = map;
/**
 * Implements `Array.prototype.filter` for iterables
 */
async function* filter(iterable, comparator) {
    for await (const element of iterable) {
        if (await comparator(element)) {
            yield element;
        }
    }
}
transformers.filter = filter;
const reduced = (value) => {
    return {
        __reduced: true,
        value
    };
};
transformers.reduced = reduced;
const isReducedValue = (value) => {
    return '__reduced' in value && value.__reduced;
};
/**
 * Implements `Array.prototype.reduce` for iterables.
 *
 * The reducer can return `reduced(accumulator)` to end execution early
 */
const reduce = async (iterable, reducer, init) => {
    let accumulator = init;
    for await (const element of iterable) {
        const result = await reducer(accumulator, element);
        if (isReducedValue(result)) {
            return result.value;
        }
        accumulator = result;
    }
    return accumulator;
};
transformers.reduce = reduce;
/**
 * Drain a given iterables contents into an array. This is kind of like `Array.from` except it works
 * with AsyncIterables
 */
const drain = async (iterator) => {
    const data = [];
    for await (const chunk of iterator) {
        data.push(chunk);
    }
    return data;
};
transformers.drain = drain;

var utils$8 = {};

var dist$5 = {};

var errors$1 = {};

/**
 * This error class is designed to give consumers of Journey Micro
 * a consistent way of "throwing" errors. Specifically, these errors
 * will give clients to Journey Micro implementations two things:
 *
 * 1. An consistent, static error code by which to easily classify errors
 * 2. An error message intended for humans
 *
 * Errors will usually assume that there is some client side error and default to 400 for
 * a rest-like response. This can be changed however to more accurately, in restful terms,
 * indicate what went wrong.
 *
 */
Object.defineProperty(errors$1, "__esModule", { value: true });
errors$1.ResourceConflict = errors$1.ResourceNotFound = errors$1.InternalServerError = errors$1.AuthorizationError = errors$1.ValidationError = errors$1.JourneyError = errors$1.ErrorSeverity = void 0;
var ErrorSeverity;
(function (ErrorSeverity) {
    ErrorSeverity["INFO"] = "info";
    ErrorSeverity["WARNING"] = "warning";
    ErrorSeverity["ERROR"] = "error";
})(ErrorSeverity || (errors$1.ErrorSeverity = ErrorSeverity = {}));
class JourneyError extends Error {
    constructor(data) {
        super(`[${data.code}] ${data.description}\n  ${data.details}`);
        this.is_journey_error = true;
        this.errorData = data;
        if (data.stack) {
            this.stack = data.stack;
        }
        this.name = data.name || this.constructor.name;
        this.errorData.name = this.name;
    }
    toString() {
        return this.stack;
    }
    toJSON() {
        if (process.env.NODE_ENV !== 'production') {
            return this.errorData;
        }
        return {
            name: this.errorData.name,
            code: this.errorData.code,
            status: this.errorData.status,
            description: this.errorData.description,
            details: this.errorData.details,
            trace_id: this.errorData.trace_id,
            severity: this.errorData.severity,
            origin: this.errorData.origin
        };
    }
    setTraceId(id) {
        this.errorData.trace_id = id;
    }
}
errors$1.JourneyError = JourneyError;
class ValidationError extends JourneyError {
    constructor(errors) {
        super({
            code: ValidationError.CODE,
            status: 400,
            description: 'Validation failed',
            details: JSON.stringify(errors)
        });
    }
}
errors$1.ValidationError = ValidationError;
ValidationError.CODE = 'VALIDATION_ERROR';
class AuthorizationError extends JourneyError {
    constructor(errors) {
        super({
            code: AuthorizationError.CODE,
            status: 401,
            description: 'Authorization failed',
            details: errors
        });
    }
}
errors$1.AuthorizationError = AuthorizationError;
AuthorizationError.CODE = 'AUTHORIZATION';
class InternalServerError extends JourneyError {
    constructor(err) {
        super({
            code: InternalServerError.CODE,
            severity: ErrorSeverity.ERROR,
            status: 500,
            description: 'Something went wrong',
            details: err.message,
            stack: process.env.NODE_ENV !== 'production' ? err.stack : undefined
        });
    }
}
errors$1.InternalServerError = InternalServerError;
InternalServerError.CODE = 'INTERNAL_SERVER_ERROR';
class ResourceNotFound extends JourneyError {
    constructor(resource, id) {
        const combinedId = id ? `${resource}/${id}` : resource;
        super({
            code: ResourceNotFound.CODE,
            status: 404,
            description: 'The requested resource does not exist on this server',
            details: `The resource ${combinedId} does not exist on this server`,
            severity: ErrorSeverity.INFO
        });
    }
}
errors$1.ResourceNotFound = ResourceNotFound;
ResourceNotFound.CODE = 'RESOURCE_NOT_FOUND';
class ResourceConflict extends JourneyError {
    constructor(details) {
        super({
            code: ResourceConflict.CODE,
            status: 409,
            description: 'The specified resource already exists on this server',
            details: details,
            severity: ErrorSeverity.INFO
        });
    }
}
errors$1.ResourceConflict = ResourceConflict;
ResourceConflict.CODE = 'RESOURCE_CONFLICT';

var utils$7 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.matchesErrorCode = exports.getErrorData = exports.isJourneyError = void 0;
	const errors_1 = errors$1;
	const isJourneyError = (err) => {
	    const matches = err instanceof errors_1.JourneyError || err.is_journey_error;
	    return !!matches;
	};
	exports.isJourneyError = isJourneyError;
	const getErrorData = (err) => {
	    if (!(0, exports.isJourneyError)(err)) {
	        return;
	    }
	    return err.toJSON();
	};
	exports.getErrorData = getErrorData;
	const matchesErrorCode = (err, code) => {
	    if ((0, exports.isJourneyError)(err)) {
	        return err.errorData.code === code;
	    }
	    return false;
	};
	exports.matchesErrorCode = matchesErrorCode; 
} (utils$7));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(errors$1, exports);
	__exportStar(utils$7, exports); 
} (dist$5));

var __createBinding$6 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$6 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$6 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$6(result, mod, k);
    __setModuleDefault$6(result, mod);
    return result;
};
Object.defineProperty(utils$8, "__esModule", { value: true });
utils$8.validateDataStream = utils$8.readableFrom = utils$8.iterableFromReadable = void 0;
const micro_errors$1 = __importStar$6(dist$5);
const cross_stream = __importStar$6(crossStream);
/**
 * Construct an AsyncIterator from a given ReadableStream.
 *
 * This is only really intended to be used from browser runtimes or within code intended to
 * be used cross-platform. This is because Node ReadableStreams already implement AsyncIterators
 */
async function* iterableFromReadable(readable) {
    const reader = readable.getReader();
    try {
        while (true) {
            const res = await reader.read();
            if (res.done) {
                return;
            }
            yield res.value;
        }
    }
    finally {
        reader.releaseLock();
    }
}
utils$8.iterableFromReadable = iterableFromReadable;
/**
 * Construct a ReadableStream from a given Iterable or AsyncIterable.
 *
 * If the given iterable is already a readable then this is a noop
 */
const readableFrom = (iterable, strategy) => {
    if (iterable instanceof cross_stream.Readable) {
        return iterable;
    }
    let resume;
    return new cross_stream.Readable({
        start(controller) {
            void (async function () {
                for await (const chunk of iterable) {
                    controller.enqueue(chunk);
                    if (controller.desiredSize != null && controller.desiredSize <= 0) {
                        await new Promise((resolve) => {
                            resume = resolve;
                        });
                    }
                }
                controller.close();
            })().catch((err) => {
                controller.error(err);
            });
        },
        async pull() {
            resume?.();
        }
    }, strategy);
};
utils$8.readableFrom = readableFrom;
/**
 * Yield a generator that validates data flowing through it
 */
async function* validateDataStream(iterable, validator) {
    for await (const chunk of iterable) {
        const res = validator.validate(chunk);
        if (!res.valid) {
            throw new micro_errors$1.ValidationError(res.errors);
        }
        yield chunk;
    }
}
utils$8.validateDataStream = validateDataStream;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.bson = exports.compat = void 0;
	exports.compat = __importStar(crossStream);
	exports.bson = __importStar(bson$3);
	__exportStar(transformers, exports);
	__exportStar(utils$8, exports); 
} (web$1));

var definitions$5 = {};

Object.defineProperty(definitions$5, "__esModule", { value: true });
definitions$5.METHOD = definitions$5.ContentType = definitions$5.Header = void 0;
var Header;
(function (Header) {
    Header["ContentType"] = "Content-Type";
    Header["Accept"] = "Accept";
    Header["Authorization"] = "Authorization";
    Header["UserAgent"] = "User-Agent";
})(Header || (definitions$5.Header = Header = {}));
var ContentType;
(function (ContentType) {
    ContentType["JSON"] = "application/json";
    ContentType["BSON"] = "application/bson";
    ContentType["HeaderStream"] = "application/vnd.journeyapps.raw+header";
    ContentType["BSONStream"] = "application/vnd.journeyapps.bson-stream+header";
})(ContentType || (definitions$5.ContentType = ContentType = {}));
var METHOD;
(function (METHOD) {
    METHOD["POST"] = "POST";
    METHOD["PUT"] = "PUT";
    METHOD["PATCH"] = "PATCH";
    METHOD["GET"] = "GET";
    METHOD["DELETE"] = "DELETE";
})(METHOD || (definitions$5.METHOD = METHOD = {}));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.headersForStream = exports.isBsonStream = exports.isHeaderStream = exports.isRawStream = exports.isStreamedPayload = exports.BsonStream = exports.HeaderStream = exports.RawStream = exports.StreamType = exports.ensureIterable = void 0;
	const micro_streaming = __importStar(web$1);
	const defs = __importStar(definitions$5);
	/**
	 * This is for web compatibility. Web based ReadableStreams are not iterable even though we type them as such
	 */
	const ensureIterable = (iterable) => {
	    if (iterable instanceof micro_streaming.compat.Readable && !(Symbol.asyncIterator in iterable)) {
	        return micro_streaming.iterableFromReadable(iterable);
	    }
	    return iterable;
	};
	exports.ensureIterable = ensureIterable;
	var StreamType;
	(function (StreamType) {
	    StreamType["Raw"] = "raw";
	    StreamType["Header"] = "header";
	    StreamType["Bson"] = "bson";
	})(StreamType || (exports.StreamType = StreamType = {}));
	class RawStream {
	    constructor(stream) {
	        this.type = StreamType.Raw;
	        this.header = undefined;
	        this.encode = () => {
	            return this.stream;
	        };
	        this.setHeader = () => {
	            return new RawStream(this.stream);
	        };
	        this.stream = stream;
	    }
	}
	exports.RawStream = RawStream;
	class HeaderStream {
	    constructor(stream, header) {
	        this.type = StreamType.Header;
	        this.encode = () => {
	            return micro_streaming.bson.prependHeaderToStream(this.header, (0, exports.ensureIterable)(this.stream));
	        };
	        this.setHeader = (header) => {
	            return new HeaderStream(this.stream, header);
	        };
	        this.stream = stream;
	        this.header = header;
	    }
	}
	exports.HeaderStream = HeaderStream;
	class BsonStream {
	    constructor(stream, header) {
	        this.type = StreamType.Bson;
	        this.setHeader = (header) => {
	            return new BsonStream(this.stream, header);
	        };
	        this.stream = stream;
	        this.header = header;
	    }
	    encode() {
	        const encoded = micro_streaming
	            .readableFrom(this.stream)
	            .pipeThrough(micro_streaming.bson.createBSONStreamEncoder());
	        return micro_streaming.bson.prependHeaderToStream(this.header, (0, exports.ensureIterable)(encoded));
	    }
	}
	exports.BsonStream = BsonStream;
	const isStreamedPayload = (payload) => {
	    return Object.values(StreamType).includes(payload?.type);
	};
	exports.isStreamedPayload = isStreamedPayload;
	const isRawStream = (payload) => {
	    return payload?.type === 'raw';
	};
	exports.isRawStream = isRawStream;
	const isHeaderStream = (payload) => {
	    return payload?.type === 'header';
	};
	exports.isHeaderStream = isHeaderStream;
	const isBsonStream = (payload) => {
	    return payload?.type === 'bson';
	};
	exports.isBsonStream = isBsonStream;
	const headersForStream = (stream) => {
	    switch (stream.type) {
	        case StreamType.Header: {
	            return {
	                [defs.Header.ContentType]: defs.ContentType.HeaderStream
	            };
	        }
	        case StreamType.Bson: {
	            return {
	                [defs.Header.ContentType]: defs.ContentType.BSONStream
	            };
	        }
	        default: {
	            return {};
	        }
	    }
	};
	exports.headersForStream = headersForStream; 
} (streaming));

var agentkeepalive = {exports: {}};

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms$2 = function (val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse$1(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse$1(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/*!
 * humanize-ms - index.js
 * Copyright(c) 2014 dead_horse <dead_horse@qq.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var util = require$$0$1;
var ms$1 = ms$2;

var humanizeMs = function (t) {
  if (typeof t === 'number') return t;
  var r = ms$1(t);
  if (r === undefined) {
    var err = new Error(util.format('humanize-ms(%j) result undefined', t));
    console.warn(err.stack);
  }
  return r;
};

var constants = {
  // agent
  CURRENT_ID: Symbol('agentkeepalive#currentId'),
  CREATE_ID: Symbol('agentkeepalive#createId'),
  INIT_SOCKET: Symbol('agentkeepalive#initSocket'),
  CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),
  // socket
  SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),
  SOCKET_NAME: Symbol('agentkeepalive#socketName'),
  SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),
  SOCKET_REQUEST_FINISHED_COUNT: Symbol('agentkeepalive#socketRequestFinishedCount'),
};

const OriginalAgent = require$$0$2.Agent;
const ms = humanizeMs;
const debug = require$$0$1.debuglog('agentkeepalive');
const {
  INIT_SOCKET: INIT_SOCKET$1,
  CURRENT_ID,
  CREATE_ID,
  SOCKET_CREATED_TIME,
  SOCKET_NAME,
  SOCKET_REQUEST_COUNT,
  SOCKET_REQUEST_FINISHED_COUNT,
} = constants;

// OriginalAgent come from
// - https://github.com/nodejs/node/blob/v8.12.0/lib/_http_agent.js
// - https://github.com/nodejs/node/blob/v10.12.0/lib/_http_agent.js

// node <= 10
let defaultTimeoutListenerCount = 1;
const majorVersion = parseInt(process.version.split('.', 1)[0].substring(1));
if (majorVersion >= 11 && majorVersion <= 12) {
  defaultTimeoutListenerCount = 2;
} else if (majorVersion >= 13) {
  defaultTimeoutListenerCount = 3;
}

function deprecate(message) {
  console.log('[agentkeepalive:deprecated] %s', message);
}

class Agent extends OriginalAgent {
  constructor(options) {
    options = options || {};
    options.keepAlive = options.keepAlive !== false;
    // default is keep-alive and 4s free socket timeout
    // see https://medium.com/ssense-tech/reduce-networking-errors-in-nodejs-23b4eb9f2d83
    if (options.freeSocketTimeout === undefined) {
      options.freeSocketTimeout = 4000;
    }
    // Legacy API: keepAliveTimeout should be rename to `freeSocketTimeout`
    if (options.keepAliveTimeout) {
      deprecate('options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');
      options.freeSocketTimeout = options.keepAliveTimeout;
      delete options.keepAliveTimeout;
    }
    // Legacy API: freeSocketKeepAliveTimeout should be rename to `freeSocketTimeout`
    if (options.freeSocketKeepAliveTimeout) {
      deprecate('options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead');
      options.freeSocketTimeout = options.freeSocketKeepAliveTimeout;
      delete options.freeSocketKeepAliveTimeout;
    }

    // Sets the socket to timeout after timeout milliseconds of inactivity on the socket.
    // By default is double free socket timeout.
    if (options.timeout === undefined) {
      // make sure socket default inactivity timeout >= 8s
      options.timeout = Math.max(options.freeSocketTimeout * 2, 8000);
    }

    // support humanize format
    options.timeout = ms(options.timeout);
    options.freeSocketTimeout = ms(options.freeSocketTimeout);
    options.socketActiveTTL = options.socketActiveTTL ? ms(options.socketActiveTTL) : 0;

    super(options);

    this[CURRENT_ID] = 0;

    // create socket success counter
    this.createSocketCount = 0;
    this.createSocketCountLastCheck = 0;

    this.createSocketErrorCount = 0;
    this.createSocketErrorCountLastCheck = 0;

    this.closeSocketCount = 0;
    this.closeSocketCountLastCheck = 0;

    // socket error event count
    this.errorSocketCount = 0;
    this.errorSocketCountLastCheck = 0;

    // request finished counter
    this.requestCount = 0;
    this.requestCountLastCheck = 0;

    // including free socket timeout counter
    this.timeoutSocketCount = 0;
    this.timeoutSocketCountLastCheck = 0;

    this.on('free', socket => {
      // https://github.com/nodejs/node/pull/32000
      // Node.js native agent will check socket timeout eqs agent.options.timeout.
      // Use the ttl or freeSocketTimeout to overwrite.
      const timeout = this.calcSocketTimeout(socket);
      if (timeout > 0 && socket.timeout !== timeout) {
        socket.setTimeout(timeout);
      }
    });
  }

  get freeSocketKeepAliveTimeout() {
    deprecate('agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead');
    return this.options.freeSocketTimeout;
  }

  get timeout() {
    deprecate('agent.timeout is deprecated, please use agent.options.timeout instead');
    return this.options.timeout;
  }

  get socketActiveTTL() {
    deprecate('agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead');
    return this.options.socketActiveTTL;
  }

  calcSocketTimeout(socket) {
    /**
     * return <= 0: should free socket
     * return > 0: should update socket timeout
     * return undefined: not find custom timeout
     */
    let freeSocketTimeout = this.options.freeSocketTimeout;
    const socketActiveTTL = this.options.socketActiveTTL;
    if (socketActiveTTL) {
      // check socketActiveTTL
      const aliveTime = Date.now() - socket[SOCKET_CREATED_TIME];
      const diff = socketActiveTTL - aliveTime;
      if (diff <= 0) {
        return diff;
      }
      if (freeSocketTimeout && diff < freeSocketTimeout) {
        freeSocketTimeout = diff;
      }
    }
    // set freeSocketTimeout
    if (freeSocketTimeout) {
      // set free keepalive timer
      // try to use socket custom freeSocketTimeout first, support headers['keep-alive']
      // https://github.com/node-modules/urllib/blob/b76053020923f4d99a1c93cf2e16e0c5ba10bacf/lib/urllib.js#L498
      const customFreeSocketTimeout = socket.freeSocketTimeout || socket.freeSocketKeepAliveTimeout;
      return customFreeSocketTimeout || freeSocketTimeout;
    }
  }

  keepSocketAlive(socket) {
    const result = super.keepSocketAlive(socket);
    // should not keepAlive, do nothing
    if (!result) return result;

    const customTimeout = this.calcSocketTimeout(socket);
    if (typeof customTimeout === 'undefined') {
      return true;
    }
    if (customTimeout <= 0) {
      debug('%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',
        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], customTimeout);
      return false;
    }
    if (socket.timeout !== customTimeout) {
      socket.setTimeout(customTimeout);
    }
    return true;
  }

  // only call on addRequest
  reuseSocket(...args) {
    // reuseSocket(socket, req)
    super.reuseSocket(...args);
    const socket = args[0];
    const req = args[1];
    req.reusedSocket = true;
    const agentTimeout = this.options.timeout;
    if (getSocketTimeout(socket) !== agentTimeout) {
      // reset timeout before use
      socket.setTimeout(agentTimeout);
      debug('%s reset timeout to %sms', socket[SOCKET_NAME], agentTimeout);
    }
    socket[SOCKET_REQUEST_COUNT]++;
    debug('%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],
      getSocketTimeout(socket));
  }

  [CREATE_ID]() {
    const id = this[CURRENT_ID]++;
    if (this[CURRENT_ID] === Number.MAX_SAFE_INTEGER) this[CURRENT_ID] = 0;
    return id;
  }

  [INIT_SOCKET$1](socket, options) {
    // bugfix here.
    // https on node 8, 10 won't set agent.options.timeout by default
    // TODO: need to fix on node itself
    if (options.timeout) {
      const timeout = getSocketTimeout(socket);
      if (!timeout) {
        socket.setTimeout(options.timeout);
      }
    }

    if (this.options.keepAlive) {
      // Disable Nagle's algorithm: http://blog.caustik.com/2012/04/08/scaling-node-js-to-100k-concurrent-connections/
      // https://fengmk2.com/benchmark/nagle-algorithm-delayed-ack-mock.html
      socket.setNoDelay(true);
    }
    this.createSocketCount++;
    if (this.options.socketActiveTTL) {
      socket[SOCKET_CREATED_TIME] = Date.now();
    }
    // don't show the hole '-----BEGIN CERTIFICATE----' key string
    socket[SOCKET_NAME] = `sock[${this[CREATE_ID]()}#${options._agentKey}]`.split('-----BEGIN', 1)[0];
    socket[SOCKET_REQUEST_COUNT] = 1;
    socket[SOCKET_REQUEST_FINISHED_COUNT] = 0;
    installListeners(this, socket, options);
  }

  createConnection(options, oncreate) {
    let called = false;
    const onNewCreate = (err, socket) => {
      if (called) return;
      called = true;

      if (err) {
        this.createSocketErrorCount++;
        return oncreate(err);
      }
      this[INIT_SOCKET$1](socket, options);
      oncreate(err, socket);
    };

    const newSocket = super.createConnection(options, onNewCreate);
    if (newSocket) onNewCreate(null, newSocket);
    return newSocket;
  }

  get statusChanged() {
    const changed = this.createSocketCount !== this.createSocketCountLastCheck ||
      this.createSocketErrorCount !== this.createSocketErrorCountLastCheck ||
      this.closeSocketCount !== this.closeSocketCountLastCheck ||
      this.errorSocketCount !== this.errorSocketCountLastCheck ||
      this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||
      this.requestCount !== this.requestCountLastCheck;
    if (changed) {
      this.createSocketCountLastCheck = this.createSocketCount;
      this.createSocketErrorCountLastCheck = this.createSocketErrorCount;
      this.closeSocketCountLastCheck = this.closeSocketCount;
      this.errorSocketCountLastCheck = this.errorSocketCount;
      this.timeoutSocketCountLastCheck = this.timeoutSocketCount;
      this.requestCountLastCheck = this.requestCount;
    }
    return changed;
  }

  getCurrentStatus() {
    return {
      createSocketCount: this.createSocketCount,
      createSocketErrorCount: this.createSocketErrorCount,
      closeSocketCount: this.closeSocketCount,
      errorSocketCount: this.errorSocketCount,
      timeoutSocketCount: this.timeoutSocketCount,
      requestCount: this.requestCount,
      freeSockets: inspect(this.freeSockets),
      sockets: inspect(this.sockets),
      requests: inspect(this.requests),
    };
  }
}

// node 8 don't has timeout attribute on socket
// https://github.com/nodejs/node/pull/21204/files#diff-e6ef024c3775d787c38487a6309e491dR408
function getSocketTimeout(socket) {
  return socket.timeout || socket._idleTimeout;
}

function installListeners(agent, socket, options) {
  debug('%s create, timeout %sms', socket[SOCKET_NAME], getSocketTimeout(socket));

  // listener socket events: close, timeout, error, free
  function onFree() {
    // create and socket.emit('free') logic
    // https://github.com/nodejs/node/blob/master/lib/_http_agent.js#L311
    // no req on the socket, it should be the new socket
    if (!socket._httpMessage && socket[SOCKET_REQUEST_COUNT] === 1) return;

    socket[SOCKET_REQUEST_FINISHED_COUNT]++;
    agent.requestCount++;
    debug('%s(requests: %s, finished: %s) free',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);

    // should reuse on pedding requests?
    const name = agent.getName(options);
    if (socket.writable && agent.requests[name] && agent.requests[name].length) {
      // will be reuse on agent free listener
      socket[SOCKET_REQUEST_COUNT]++;
      debug('%s(requests: %s, finished: %s) will be reuse on agent free event',
        socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);
    }
  }
  socket.on('free', onFree);

  function onClose(isError) {
    debug('%s(requests: %s, finished: %s) close, isError: %s',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT], isError);
    agent.closeSocketCount++;
  }
  socket.on('close', onClose);

  // start socket timeout handler
  function onTimeout() {
    // onTimeout and emitRequestTimeout(_http_client.js)
    // https://github.com/nodejs/node/blob/v12.x/lib/_http_client.js#L711
    const listenerCount = socket.listeners('timeout').length;
    // node <= 10, default listenerCount is 1, onTimeout
    // 11 < node <= 12, default listenerCount is 2, onTimeout and emitRequestTimeout
    // node >= 13, default listenerCount is 3, onTimeout,
    //   onTimeout(https://github.com/nodejs/node/pull/32000/files#diff-5f7fb0850412c6be189faeddea6c5359R333)
    //   and emitRequestTimeout
    const timeout = getSocketTimeout(socket);
    const req = socket._httpMessage;
    const reqTimeoutListenerCount = req && req.listeners('timeout').length || 0;
    debug('%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],
      timeout, listenerCount, defaultTimeoutListenerCount, !!req, reqTimeoutListenerCount);
    if (debug.enabled) {
      debug('timeout listeners: %s', socket.listeners('timeout').map(f => f.name).join(', '));
    }
    agent.timeoutSocketCount++;
    const name = agent.getName(options);
    if (agent.freeSockets[name] && agent.freeSockets[name].indexOf(socket) !== -1) {
      // free socket timeout, destroy quietly
      socket.destroy();
      // Remove it from freeSockets list immediately to prevent new requests
      // from being sent through this socket.
      agent.removeSocket(socket, options);
      debug('%s is free, destroy quietly', socket[SOCKET_NAME]);
    } else {
      // if there is no any request socket timeout handler,
      // agent need to handle socket timeout itself.
      //
      // custom request socket timeout handle logic must follow these rules:
      //  1. Destroy socket first
      //  2. Must emit socket 'agentRemove' event tell agent remove socket
      //     from freeSockets list immediately.
      //     Otherise you may be get 'socket hang up' error when reuse
      //     free socket and timeout happen in the same time.
      if (reqTimeoutListenerCount === 0) {
        const error = new Error('Socket timeout');
        error.code = 'ERR_SOCKET_TIMEOUT';
        error.timeout = timeout;
        // must manually call socket.end() or socket.destroy() to end the connection.
        // https://nodejs.org/dist/latest-v10.x/docs/api/net.html#net_socket_settimeout_timeout_callback
        socket.destroy(error);
        agent.removeSocket(socket, options);
        debug('%s destroy with timeout error', socket[SOCKET_NAME]);
      }
    }
  }
  socket.on('timeout', onTimeout);

  function onError(err) {
    const listenerCount = socket.listeners('error').length;
    debug('%s(requests: %s, finished: %s) error: %s, listenerCount: %s',
      socket[SOCKET_NAME], socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT],
      err, listenerCount);
    agent.errorSocketCount++;
    if (listenerCount === 1) {
      // if socket don't contain error event handler, don't catch it, emit it again
      debug('%s emit uncaught error event', socket[SOCKET_NAME]);
      socket.removeListener('error', onError);
      socket.emit('error', err);
    }
  }
  socket.on('error', onError);

  function onRemove() {
    debug('%s(requests: %s, finished: %s) agentRemove',
      socket[SOCKET_NAME],
      socket[SOCKET_REQUEST_COUNT], socket[SOCKET_REQUEST_FINISHED_COUNT]);
    // We need this function for cases like HTTP 'upgrade'
    // (defined by WebSockets) where we need to remove a socket from the
    // pool because it'll be locked up indefinitely
    socket.removeListener('close', onClose);
    socket.removeListener('error', onError);
    socket.removeListener('free', onFree);
    socket.removeListener('timeout', onTimeout);
    socket.removeListener('agentRemove', onRemove);
  }
  socket.on('agentRemove', onRemove);
}

var agent = Agent;

function inspect(obj) {
  const res = {};
  for (const key in obj) {
    res[key] = obj[key].length;
  }
  return res;
}

const OriginalHttpsAgent = require$$0$3.Agent;
const HttpAgent = agent;
const {
  INIT_SOCKET,
  CREATE_HTTPS_CONNECTION,
} = constants;

class HttpsAgent extends HttpAgent {
  constructor(options) {
    super(options);

    this.defaultPort = 443;
    this.protocol = 'https:';
    this.maxCachedSessions = this.options.maxCachedSessions;
    /* istanbul ignore next */
    if (this.maxCachedSessions === undefined) {
      this.maxCachedSessions = 100;
    }

    this._sessionCache = {
      map: {},
      list: [],
    };
  }

  createConnection(options, oncreate) {
    const socket = this[CREATE_HTTPS_CONNECTION](options, oncreate);
    this[INIT_SOCKET](socket, options);
    return socket;
  }
}

// https://github.com/nodejs/node/blob/master/lib/https.js#L89
HttpsAgent.prototype[CREATE_HTTPS_CONNECTION] = OriginalHttpsAgent.prototype.createConnection;

[
  'getName',
  '_getSession',
  '_cacheSession',
  // https://github.com/nodejs/node/pull/4982
  '_evictSession',
].forEach(function(method) {
  /* istanbul ignore next */
  if (typeof OriginalHttpsAgent.prototype[method] === 'function') {
    HttpsAgent.prototype[method] = OriginalHttpsAgent.prototype[method];
  }
});

var https_agent = HttpsAgent;

agentkeepalive.exports = agent;
agentkeepalive.exports.HttpsAgent = https_agent;
agentkeepalive.exports.constants = constants;

var agentkeepaliveExports = agentkeepalive.exports;

var request = {};

var decoders = {};

var errors = {};

var __createBinding$5 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$5 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$5 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$5(result, mod, k);
    __setModuleDefault$5(result, mod);
    return result;
};
Object.defineProperty(errors, "__esModule", { value: true });
errors.UnparsableServiceResponse = errors.TimeoutError = void 0;
const micro_errors = __importStar$5(dist$5);
class TimeoutError extends Error {
    constructor() {
        super();
        this.message = 'Request timed out';
        this.name = 'TimeoutError';
    }
}
errors.TimeoutError = TimeoutError;
class UnparsableServiceResponse extends micro_errors.JourneyError {
    constructor(endpoint, status, raw) {
        super({
            code: 'UNPARSABLE_SERVICE_RESPONSE',
            status: status,
            description: 'Could not parse service response',
            details: `${endpoint}\n${raw || 'unparseable'}`
        });
    }
}
errors.UnparsableServiceResponse = UnparsableServiceResponse;

var codecs$1 = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DEFAULT_CODECS = exports.BSONCodec = exports.JSONCodec = void 0;
	const defs = __importStar(definitions$5);
	const bson = __importStar(require$$1);
	exports.JSONCodec = {
	    encode: (data) => JSON.stringify(data),
	    decode: (data) => {
	        let raw;
	        if (data instanceof ArrayBuffer) {
	            const decoder = new TextDecoder('utf-8');
	            raw = decoder.decode(data);
	        }
	        else {
	            raw = data.toString();
	        }
	        return JSON.parse(raw);
	    }
	};
	exports.BSONCodec = {
	    encode: (data) => {
	        return bson.serialize(data, {
	            ignoreUndefined: true
	        });
	    },
	    decode: (data) => {
	        return bson.deserialize(data, {
	            promoteBuffers: true
	        });
	    }
	};
	exports.DEFAULT_CODECS = {
	    [defs.ContentType.JSON]: exports.JSONCodec,
	    [defs.ContentType.BSON]: exports.BSONCodec
	}; 
} (codecs$1));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeServiceResponse = exports.decodeResponse = void 0;
	const micro_errors = __importStar(dist$5);
	const defs = __importStar(definitions$5);
	const errors$1 = __importStar(errors);
	const codecs = __importStar(codecs$1);
	const decodeResponse = async (response, meta) => {
	    const content_type = response.headers.get(defs.Header.ContentType) || defs.ContentType.JSON;
	    // extract the first part of Content-Type - i.e "[application/json]; charset-utf8"
	    const codec = codecs.DEFAULT_CODECS[content_type.replace(/(?!<.*);.*/, '')];
	    if (!codec) {
	        const raw = await response.text();
	        throw new errors$1.UnparsableServiceResponse(`${meta.method} ${meta.url}`, response.status, raw);
	    }
	    return codec.decode(await response.arrayBuffer());
	};
	exports.decodeResponse = decodeResponse;
	const decodeServiceResponse = async (response, meta) => {
	    const { data, error } = await (0, exports.decodeResponse)(response, meta);
	    if (data) {
	        return data;
	    }
	    if (error) {
	        throw new micro_errors.JourneyError(error);
	    }
	    /**
	     * Not a JSON response, meaning it's not a standard response or error produced by journey-micro.
	     * This typically means something like a 404 or a 503 (gateway error).
	     * The body is usually meaningless in these cases.
	     * 3xx responses are also unexpected here.
	     */
	    if (response.status >= 300) {
	        throw new errors$1.UnparsableServiceResponse(`${meta.method} ${meta.url}`, response.status);
	    }
	    return null;
	};
	exports.decodeServiceResponse = decodeServiceResponse; 
} (decoders));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.request = void 0;
	const micro_streaming = __importStar(web$1);
	const streaming$1 = __importStar(streaming);
	const defs = __importStar(definitions$5);
	const decoders$1 = __importStar(decoders);
	const codecs = __importStar(codecs$1);
	const errors$1 = __importStar(errors);
	const defaultRetryStrategy = (attempt) => {
	    return attempt * 200;
	};
	const createTimeout = (handler, timeout) => {
	    let t = setTimeout(handler, timeout);
	    let cleared = false;
	    return {
	        clear: () => {
	            if (cleared) {
	                return;
	            }
	            clearTimeout(t);
	            cleared = true;
	        },
	        heartbeat: () => {
	            if (cleared) {
	                return;
	            }
	            clearTimeout(t);
	            t = setTimeout(handler, timeout);
	        }
	    };
	};
	const request = async (url, params, attempt = 0) => {
	    let headers;
	    if (typeof params.headers === 'function') {
	        headers = await params.headers();
	    }
	    else {
	        headers = {
	            ...(params.headers || {})
	        };
	    }
	    headers = {
	        [defs.Header.Accept]: '*/*',
	        ...headers
	    };
	    if (params.user_agent) {
	        headers[defs.Header.UserAgent] = params.user_agent;
	    }
	    let body;
	    if (params.body) {
	        if (streaming$1.isStreamedPayload(params.body)) {
	            body = params.body.encode();
	        }
	        else {
	            const content_type = headers[defs.Header.ContentType] || defs.ContentType.JSON;
	            headers[defs.Header.ContentType] = content_type;
	            const codec = params.codecs?.[content_type] || codecs.DEFAULT_CODECS[content_type];
	            if (codec) {
	                body = codec.encode(params.body);
	            }
	            else {
	                if (!Buffer.isBuffer(params.body) && typeof params.body !== 'string') {
	                    throw new Error(`Unsupported body with type ${typeof params.body} and a Content-Type of ${content_type}. None of the configured codecs know how to convert the given body to a Buffer or string. Please provide a compatible codec`);
	                }
	                body = params.body;
	            }
	        }
	    }
	    const retryStrategy = params.retry_strategy || defaultRetryStrategy;
	    const abort_controller = new AbortController();
	    const timeout = params.timeout ?? 60000;
	    const read_timeout = params.read_timeout ?? 20000;
	    let request_timeout;
	    if (timeout > 0) {
	        request_timeout = createTimeout(() => {
	            abort_controller.abort();
	        }, timeout);
	    }
	    const decoder = params.decoder || decoders$1.decodeServiceResponse;
	    const max_attempts = (params.retry_attempts ?? 1) - 1;
	    try {
	        const res = await params.request(url, {
	            signal: abort_controller.signal,
	            method: params.method,
	            headers: headers,
	            body: body
	        });
	        // We throw here for it to be handled by the retry logic
	        if (res.status >= 500 && params.retryable) {
	            if (attempt <= max_attempts) {
	                throw res;
	            }
	        }
	        request_timeout?.clear();
	        const request_metadata = {
	            url,
	            method: params.method.toUpperCase()
	        };
	        return {
	            response: res,
	            stream: async () => {
	                if (res.status >= 300) {
	                    throw await decoder(res, request_metadata);
	                }
	                let stream_timeout;
	                return micro_streaming.readableFrom(res.body).pipeThrough(new micro_streaming.compat.Transform({
	                    start(controller) {
	                        if (read_timeout <= 0) {
	                            return;
	                        }
	                        stream_timeout = createTimeout(() => {
	                            controller.error(new errors$1.TimeoutError());
	                        }, read_timeout);
	                    },
	                    transform(chunk, controller) {
	                        stream_timeout?.heartbeat();
	                        controller.enqueue(chunk);
	                    },
	                    flush() {
	                        stream_timeout?.clear();
	                    }
	                }));
	            },
	            decode: () => decoder(res, request_metadata)
	        };
	    }
	    catch (err) {
	        request_timeout?.clear();
	        if (!params.retryable || attempt > max_attempts) {
	            if (err.name === 'AbortError') {
	                throw new errors$1.TimeoutError();
	            }
	            throw err;
	        }
	        await new Promise((resolve) => {
	            setTimeout(resolve, retryStrategy(attempt));
	        });
	        return (0, exports.request)(url, params, attempt + 1);
	    }
	};
	exports.request = request; 
} (request));

var utils$6 = {};

Object.defineProperty(utils$6, "__esModule", { value: true });
utils$6.join = utils$6.getHeader = utils$6.constructHeaders = void 0;
const constructHeaders = (collectors) => {
    return async () => {
        let headers = {};
        for (let collector of collectors) {
            if (!collector) {
                continue;
            }
            if (typeof collector === 'function') {
                headers = {
                    ...headers,
                    ...((await collector()) || {})
                };
            }
            else {
                headers = {
                    ...headers,
                    ...collector
                };
            }
        }
        return headers;
    };
};
utils$6.constructHeaders = constructHeaders;
/**
 * A small utility to get a key from a map in a case-insensitive way
 */
const getHeader = (headers, key) => {
    return Object.fromEntries(Object.entries(headers).map(([key, value]) => {
        return [key.toLowerCase(), value];
    }))[key.toLowerCase()];
};
utils$6.getHeader = getHeader;
/**
 * A weak clone of path.join from node that will work in the browser too. Joins all given
 * strings together with a '/' and then strips off duplicates.
 *
 * ["https://a/b/c/", "/d/e//f/"] => "https://a/b/c///d/e//f/" => "https://a/b/c/d/e/f/"
 */
const join = (...parts) => {
    const components = parts.join('/').split(/:\/\//);
    const deduped = (components[1] || components[0]).replace(/\/\/+/g, '/');
    if (components[1]) {
        return [components[0], deduped].join('://');
    }
    return deduped;
};
utils$6.join = join;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
	    return (mod && mod.__esModule) ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createNodeNetworkClient = void 0;
	const consumers = __importStar(require$$0$4);
	const streaming$1 = __importStar(streaming);
	const agentkeepalive_1 = __importDefault(agentkeepaliveExports);
	const requester = __importStar(request);
	const errors$1 = __importStar(errors);
	const utils = __importStar(utils$6);
	const stream = __importStar(require$$6);
	const https = __importStar(require$$0$3);
	const http = __importStar(require$$0$2);
	const url_1 = require$$9;
	const default_agent_options = {
	    maxSockets: 100,
	    maxFreeSockets: 10,
	    timeout: 60000,
	    freeSocketTimeout: 30000 // free socket keepalive for 30 seconds
	};
	const createNodeNetworkClient = (options) => {
	    const agent_options = { ...default_agent_options };
	    if (options?.timeout != null) {
	        agent_options.timeout = options?.timeout;
	    }
	    const http_agent = new agentkeepalive_1.default(agent_options);
	    const https_agent = new agentkeepalive_1.default.HttpsAgent(agent_options);
	    return {
	        augment: (augmented) => {
	            return (0, exports.createNodeNetworkClient)({ ...augmented, ...options });
	        },
	        request: (url, params) => {
	            const service = process.env.MICRO_SERVICE_NAME;
	            const user_agent = `Journey SDK (node-client${service ? `,${service}` : ''})`;
	            let headers = {};
	            if (params.body && streaming$1.isStreamedPayload(params.body)) {
	                headers = streaming$1.headersForStream(params.body);
	            }
	            return requester.request(url, {
	                ...(options || {}),
	                ...params,
	                headers: utils.constructHeaders([headers, params.headers, options?.headers]),
	                user_agent: options?.user_agent || user_agent,
	                request: async (raw_url, params) => {
	                    const url = new url_1.URL(raw_url);
	                    let agent;
	                    let client;
	                    switch (url.protocol) {
	                        default:
	                        case 'http:': {
	                            agent = http_agent;
	                            client = http;
	                            break;
	                        }
	                        case 'https:': {
	                            agent = https_agent;
	                            client = https;
	                            break;
	                        }
	                    }
	                    return new Promise((resolve, reject) => {
	                        let aborted = false;
	                        const req = client.request(url, {
	                            signal: params.signal,
	                            method: params.method,
	                            headers: params.headers,
	                            agent
	                        }, (res) => {
	                            if (aborted) {
	                                return res.destroy(new Error('Aborted'));
	                            }
	                            resolve({
	                                headers: {
	                                    get: (key) => utils.getHeader(res.headers, key)
	                                },
	                                status: res.statusCode || 200,
	                                body: res,
	                                text: async () => {
	                                    return consumers.text(res);
	                                },
	                                arrayBuffer: async () => {
	                                    return consumers.arrayBuffer(res);
	                                }
	                            });
	                        });
	                        params.signal.addEventListener('abort', () => {
	                            req.destroy(new errors$1.TimeoutError());
	                            aborted = true;
	                        });
	                        req.once('error', reject);
	                        if (!params.body) {
	                            return req.end();
	                        }
	                        if (Buffer.isBuffer(params.body) || typeof params.body === 'string') {
	                            req.write(params.body);
	                            return req.end();
	                        }
	                        stream.pipeline(params.body, req, () => { });
	                    });
	                }
	            });
	        }
	    };
	};
	exports.createNodeNetworkClient = createNodeNetworkClient; 
} (nodeClient));

var web = {};

var webClient = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createWebNetworkClient = exports.iterableFromReadable = void 0;
	const micro_streaming = __importStar(web$1);
	const streaming$1 = __importStar(streaming);
	const requester = __importStar(request);
	const utils = __importStar(utils$6);
	async function* iterableFromReadable(readable) {
	    const reader = readable.getReader();
	    try {
	        while (true) {
	            const { done, value } = await reader.read();
	            if (done) {
	                return;
	            }
	            yield value;
	        }
	    }
	    finally {
	        reader.releaseLock();
	    }
	}
	exports.iterableFromReadable = iterableFromReadable;
	const createWebNetworkClient = (options) => {
	    return {
	        augment: (augmented) => {
	            return (0, exports.createWebNetworkClient)({ ...augmented, ...options });
	        },
	        request: async (url, params) => {
	            let headers = {};
	            let body;
	            if (params.body) {
	                if (streaming$1.isStreamedPayload(params.body)) {
	                    if (options?.buffer_streams ?? true) {
	                        body = Buffer.concat(await micro_streaming.drain(streaming$1.ensureIterable(params.body.encode())));
	                    }
	                    else {
	                        body = new streaming$1.RawStream(micro_streaming.readableFrom(params.body.encode()));
	                    }
	                    headers = streaming$1.headersForStream(params.body);
	                }
	                else {
	                    body = params.body;
	                }
	            }
	            return requester.request(url, {
	                ...(options || {}),
	                ...params,
	                headers: utils.constructHeaders([headers, params.headers, options?.headers]),
	                user_agent: options?.user_agent,
	                body: body,
	                request: async (url, params) => {
	                    return await fetch(url, params);
	                }
	            });
	        }
	    };
	};
	exports.createWebNetworkClient = createWebNetworkClient; 
} (webClient));

var fetchClients = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(streaming, exports);
	__exportStar(decoders, exports);
	__exportStar(request, exports);
	__exportStar(errors, exports);
	__exportStar(codecs$1, exports); 
} (fetchClients));

var sdkClients = {};

var endpoints$1 = {};

var __createBinding$4 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$4 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$4 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$4(result, mod, k);
    __setModuleDefault$4(result, mod);
    return result;
};
Object.defineProperty(endpoints$1, "__esModule", { value: true });
endpoints$1.createEndpoint = void 0;
const micro_streaming = __importStar$4(web$1);
const defs$a = __importStar$4(definitions$5);
const definitions_1 = definitions$5;
const utils$5 = __importStar$4(utils$6);
const createEndpoint = (options) => {
    const request = async (payload, override) => {
        let request_options;
        if (typeof options === 'function') {
            request_options = options(payload);
        }
        else {
            request_options = options;
        }
        let method = request_options.method || defs$a.METHOD.POST;
        let body = request_options.payload || payload;
        /*
          In some cases we want the payload so we can dynamically construct a GET URL (`options` is a function),
          but don't want it automatically added to the body of the GET request
         */
        if (method === definitions_1.METHOD.GET) {
            body = null;
        }
        return await request_options.client.request(utils$5.join(request_options.endpoint, request_options.path), {
            method,
            ...request_options,
            body,
            ...(override || {})
        });
    };
    const defaultRequestFunction = async (params, override) => {
        const res = await request(params, override);
        return res.decode();
    };
    const streamedRequestFunction = async (params, override) => {
        const res = await request(params, override);
        const decode = async () => {
            const stream = await res.stream();
            return stream.pipeThrough(micro_streaming.bson.createBSONStreamDecoder());
        };
        return {
            response: res.response,
            stream: res.stream,
            decode: decode,
            [Symbol.asyncIterator]: async function* () {
                yield* micro_streaming.iterableFromReadable(await decode());
            }
        };
    };
    return Object.assign(defaultRequestFunction, {
        streamed: Object.assign(streamedRequestFunction, {
            request: request
        }),
        request: request
    });
};
endpoints$1.createEndpoint = createEndpoint;

var pagination = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.createPaginatedEndpoint = exports.paginate = void 0;
	const paginate = (endpoint) => {
	    return async function* (params) {
	        let more = true;
	        let cursor = params.cursor;
	        while (more) {
	            const res = await endpoint({
	                ...params,
	                cursor: cursor,
	                limit: params.limit || 50
	            });
	            yield res;
	            more = res.more;
	            cursor = res.cursor;
	        }
	    };
	};
	exports.paginate = paginate;
	const createPaginatedEndpoint = (endpoint) => {
	    return Object.assign(endpoint, {
	        paginate: (0, exports.paginate)(endpoint)
	    });
	};
	exports.createPaginatedEndpoint = createPaginatedEndpoint; 
} (pagination));

var sdkClient = {};

var __createBinding$3 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$3 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$3 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$3(result, mod, k);
    __setModuleDefault$3(result, mod);
    return result;
};
Object.defineProperty(sdkClient, "__esModule", { value: true });
sdkClient.SDKClient = sdkClient.CoreSDKClient = void 0;
const endpoints = __importStar$3(endpoints$1);
class CoreSDKClient {
    constructor(client, endpoint) {
        this.client = client;
        this.endpoint = endpoint;
    }
}
sdkClient.CoreSDKClient = CoreSDKClient;
class SDKClient extends CoreSDKClient {
    constructor(options) {
        super(options.client, options.endpoint);
        this.createEndpoint = (params) => {
            return endpoints.createEndpoint((payload) => {
                let resolved_params;
                if (typeof params === 'function') {
                    resolved_params = params(payload);
                }
                else {
                    resolved_params = params;
                }
                return {
                    client: this.client,
                    endpoint: this.endpoint,
                    ...resolved_params
                };
            });
        };
    }
}
sdkClient.SDKClient = SDKClient;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(endpoints$1, exports);
	__exportStar(pagination, exports);
	__exportStar(sdkClient, exports); 
} (sdkClients));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(webClient, exports);
	__exportStar(fetchClients, exports);
	__exportStar(sdkClients, exports);
	__exportStar(definitions$5, exports);
	__exportStar(streaming, exports);
	__exportStar(utils$6, exports); 
} (web));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(nodeClient, exports);
	__exportStar(web, exports); 
} (dist$6));

var dist$4 = {};

var definitions$4 = {};

var api$2 = {};

var dist$3 = {};

var dist$2 = {};

var definitions$3 = {};

var credentials = {};

var dist$1 = {};

var definitions$2 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CodecType = void 0;
	(function (CodecType) {
	    CodecType["String"] = "string";
	    CodecType["Number"] = "number";
	    CodecType["Boolean"] = "boolean";
	    CodecType["Literal"] = "literal";
	    CodecType["Enum"] = "enum";
	    CodecType["Null"] = "null";
	    CodecType["Any"] = "any";
	    CodecType["Optional"] = "optional";
	    CodecType["Object"] = "object";
	    CodecType["Record"] = "record";
	    CodecType["Array"] = "array";
	    CodecType["Tuple"] = "tuple";
	    CodecType["Recursive"] = "recursive";
	    CodecType["Union"] = "union";
	    CodecType["Intersection"] = "intersection";
	})(exports.CodecType || (exports.CodecType = {})); 
} (definitions$2));

var jsonSchema = {};

var definitions$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.TransformTarget = void 0;
	(function (TransformTarget) {
	    TransformTarget["Encoded"] = "encoded";
	    TransformTarget["Decoded"] = "decoded";
	})(exports.TransformTarget || (exports.TransformTarget = {})); 
} (definitions$1));

var generator = {};

var parsers$1 = {};

var combinators$1 = {};

var utils$4 = {};

Object.defineProperty(utils$4, "__esModule", { value: true });
utils$4.createParser = void 0;
const createParser = (tag, parser) => {
    return {
        tag,
        parse: parser
    };
};
utils$4.createParser = createParser;

var root$4 = {};

Object.defineProperty(root$4, "__esModule", { value: true });
root$4.RootParser = void 0;
const RootParser = (codec, options) => {
    const parser = options.parsers.find((parser) => parser.tag === codec._tag);
    if (!parser) {
        throw new Error(`No parser configured for codec ${codec._tag}`);
    }
    const schema = parser.parse(codec, options);
    if (codec.props.metadata?.description) {
        return {
            description: codec.props.metadata.description,
            ...schema
        };
    }
    return schema;
};
root$4.RootParser = RootParser;

Object.defineProperty(combinators$1, "__esModule", { value: true });
combinators$1.UnionParser = combinators$1.IntersectionParser = void 0;
const defs$9 = definitions$2;
const utils_1$3 = utils$4;
const root$3 = root$4;
/**
 * Intersections are a bit complicated due to the way that additionalProperties works in JSON-Schema. To
 * support this we need to do different operations based on the type of codecs contained by the
 * intersection.
 *
 * If the intersection contains only object schemas then they are all merged under a single schema so
 * that `additionalProperties` applies against them simultaneously.
 *
 * If the intersection contains a mix of object schemas and unions then we need to construct the product
 * of all unions against a merge of all object schemas, combining them under a single `anyOf` definition.
 * Each product will be a merged schema with `additionalProperties` applying against all properties
 * contained within.
 *
 * Note: You can only really intersect object schemas and so we do not check for any other type of schema
 */
combinators$1.IntersectionParser = (0, utils_1$3.createParser)(defs$9.CodecType.Intersection, (codec, options) => {
    const schemas = codec.props.codecs.map((codec) => root$3.RootParser(codec, options));
    const unions = schemas.filter((schema) => !!schema.anyOf);
    const object_schemas = schemas.filter((schema) => schema.type === 'object');
    const mergeObjectSchemas = (...schemas) => {
        return {
            type: 'object',
            properties: schemas.reduce((properties, schema) => {
                return {
                    ...properties,
                    ...(schema.properties || {})
                };
            }, {}),
            additionalProperties: !!options?.allowAdditional,
            required: Array.from(new Set(schemas.reduce((required, schema) => {
                return required.concat(schema.required || []);
            }, [])))
        };
    };
    /**
     * If the intersection contains _only_ unions then we can return an `allOf` schema
     */
    if (unions.length > 0 && object_schemas.length === 0) {
        return {
            allOf: unions
        };
    }
    /**
     * If the intersection contains a mix of unions and object schemas then we need to merge all
     * object schemas into a single schema and product it with each union.
     *
     * {...merged_object_schemas} X unions
     */
    if (unions.length > 0) {
        const merged = mergeObjectSchemas(...object_schemas);
        return {
            anyOf: unions.reduce((schemas, union) => {
                return union.anyOf.reduce((schemas, union_schema) => {
                    return schemas.concat(mergeObjectSchemas(union_schema, merged));
                }, schemas);
            }, [])
        };
    }
    /**
     * Lastly, if the intersection contains only object schemas then we merge them into a single object schema
     */
    return mergeObjectSchemas(...schemas);
});
combinators$1.UnionParser = (0, utils_1$3.createParser)(defs$9.CodecType.Union, (codec, options) => {
    return {
        anyOf: codec.props.codecs.map((codec) => root$3.RootParser(codec, options))
    };
});

var primitives$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LiteralParser = exports.EnumParser = exports.AnyParser = exports.NullParser = exports.BooleanParser = exports.NumberParser = exports.StringParser = exports.createPrimitiveParser = void 0;
	const defs = definitions$2;
	const utils_1 = utils$4;
	const createPrimitiveParser = (type) => {
	    return (0, utils_1.createParser)(type, () => {
	        return { type };
	    });
	};
	exports.createPrimitiveParser = createPrimitiveParser;
	exports.StringParser = (0, exports.createPrimitiveParser)(defs.CodecType.String);
	exports.NumberParser = (0, exports.createPrimitiveParser)(defs.CodecType.Number);
	exports.BooleanParser = (0, exports.createPrimitiveParser)(defs.CodecType.Boolean);
	exports.NullParser = (0, exports.createPrimitiveParser)(defs.CodecType.Null);
	exports.AnyParser = (0, utils_1.createParser)(defs.CodecType.Any, () => {
	    return {};
	});
	exports.EnumParser = (0, utils_1.createParser)(defs.CodecType.Enum, (codec) => {
	    return {
	        type: 'string',
	        enum: Object.values(codec.props.enum)
	    };
	});
	exports.LiteralParser = (0, utils_1.createParser)(defs.CodecType.Literal, (codec) => {
	    return {
	        type: typeof codec.props.value,
	        const: codec.props.value
	    };
	}); 
} (primitives$1));

var recursive$2 = {};

Object.defineProperty(recursive$2, "__esModule", { value: true });
recursive$2.RecursiveParser = void 0;
const defs$8 = definitions$2;
const utils_1$2 = utils$4;
const root$2 = root$4;
recursive$2.RecursiveParser = (0, utils_1$2.createParser)(defs$8.CodecType.Recursive, (codec, options) => {
    const ref = {
        $ref: `#/definitions/${codec.props.id}`
    };
    const cached = options.cache.get(codec.props.id);
    if (cached) {
        return ref;
    }
    options.cache.set(codec.props.id, {});
    /**
     * The schema is applied to the definition _after_ pushing the definition to the cache
     * to ensure that there are no cache misses from calling RootParser
     */
    options.cache.set(codec.props.id, root$2.RootParser(codec.props.resolver(), options));
    return ref;
});

var objects = {};

Object.defineProperty(objects, "__esModule", { value: true });
objects.RecordParser = objects.ObjectParser = void 0;
const defs$7 = definitions$2;
const utils_1$1 = utils$4;
const root$1 = root$4;
objects.ObjectParser = (0, utils_1$1.createParser)(defs$7.CodecType.Object, (codec, options) => {
    const entries = Object.entries(codec.props.shape);
    return {
        type: 'object',
        properties: entries.reduce((acc, [key, codec]) => {
            acc[key] = root$1.RootParser(codec, options);
            return acc;
        }, {}),
        additionalProperties: !!options?.allowAdditional,
        required: entries
            .filter(([, codec]) => {
            return codec.props.required;
        })
            .map(([key]) => key)
    };
});
objects.RecordParser = (0, utils_1$1.createParser)(defs$7.CodecType.Record, (codec, options) => {
    return {
        type: 'object',
        additionalProperties: root$1.RootParser(codec.props.type, options),
        properties: {},
        required: []
    };
});

var arrays$1 = {};

Object.defineProperty(arrays$1, "__esModule", { value: true });
arrays$1.TupleParser = arrays$1.ArrayParser = void 0;
const defs$6 = definitions$2;
const utils_1 = utils$4;
const root = root$4;
arrays$1.ArrayParser = (0, utils_1.createParser)(defs$6.CodecType.Array, (codec, options) => {
    return {
        type: 'array',
        items: root.RootParser(codec.props.type, options)
    };
});
arrays$1.TupleParser = (0, utils_1.createParser)(defs$6.CodecType.Tuple, (codec, options) => {
    return {
        type: 'array',
        items: codec.props.codecs.map((codec) => root.RootParser(codec, options)),
        minItems: codec.props.codecs.length,
        maxItems: codec.props.codecs.length
    };
});

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(combinators$1, exports);
	__exportStar(primitives$1, exports);
	__exportStar(recursive$2, exports);
	__exportStar(objects, exports);
	__exportStar(arrays$1, exports);
	__exportStar(root$4, exports); 
} (parsers$1));

Object.defineProperty(generator, "__esModule", { value: true });
generator.generateJSONSchema = void 0;
const defs$5 = definitions$1;
const p = parsers$1;
const generateJSONSchema = (codec, options) => {
    const parsers = [
        ...(options?.parsers || []),
        p.AnyParser,
        p.StringParser,
        p.NumberParser,
        p.BooleanParser,
        p.NullParser,
        p.LiteralParser,
        p.EnumParser,
        p.ObjectParser,
        p.RecordParser,
        p.ArrayParser,
        p.TupleParser,
        p.IntersectionParser,
        p.UnionParser,
        p.RecursiveParser
    ];
    const recursion_cache = new Map();
    const schema = p.RootParser(codec, {
        parsers,
        target: options?.target ?? defs$5.TransformTarget.Encoded,
        allowAdditional: options?.allowAdditional ?? false,
        cache: recursion_cache
    });
    return {
        definitions: Object.fromEntries(recursion_cache.entries()),
        ...schema
    };
};
generator.generateJSONSchema = generateJSONSchema;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(definitions$1, exports);
	__exportStar(generator, exports);
	__exportStar(parsers$1, exports);
	__exportStar(utils$4, exports); 
} (jsonSchema));

var combinators = {};

var maps$1 = {};

var utils$3 = {};

Object.defineProperty(utils$3, "__esModule", { value: true });
utils$3.isCodecType = utils$3.TransformError = void 0;
class TransformError extends Error {
    constructor(errors) {
        super(Array.isArray(errors) ? errors.join(', ') : errors);
        this.errors = errors;
        this.name = 'TransformError';
    }
}
utils$3.TransformError = TransformError;
function isCodecType(codec, type) {
    return codec._tag === type;
}
utils$3.isCodecType = isCodecType;

var codec = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.optional = exports.union = exports.createUnionTransformer = exports.intersection = exports.createIntersectionTransformer = exports.codec = void 0;
	const defs = definitions$2;
	const utils = utils$3;
	const codec = (tag, encode, decode, props) => {
	    const c = {
	        _tag: tag,
	        props: {
	            ...(props || {}),
	            metadata: props?.metadata ?? {},
	            required: props?.required ?? true
	        },
	        encode,
	        decode,
	        and: (extention) => (0, exports.intersection)(c, extention),
	        or: (extention) => (0, exports.union)(c, extention),
	        meta: (metadata) => {
	            return (0, exports.codec)(tag, encode, decode, {
	                ...c.props,
	                metadata: {
	                    ...c.props.metadata,
	                    ...metadata
	                }
	            });
	        },
	        optional: () => (0, exports.optional)(c)
	    };
	    return c;
	};
	exports.codec = codec;
	const mergeSameCodecs = (tag, c1, c2) => {
	    const codecs = [];
	    if (utils.isCodecType(c1, tag)) {
	        codecs.push(...c1.props.codecs);
	    }
	    else {
	        codecs.push(c1);
	    }
	    if (utils.isCodecType(c2, tag)) {
	        codecs.push(...c2.props.codecs);
	    }
	    else {
	        codecs.push(c2);
	    }
	    return codecs;
	};
	const createIntersectionTransformer = (op, codecs) => (data) => {
	    return codecs.reduce((acc, codec) => {
	        return {
	            ...acc,
	            ...codec[op](data)
	        };
	    }, {});
	};
	exports.createIntersectionTransformer = createIntersectionTransformer;
	const intersection = (c1, c2) => {
	    const codecs = mergeSameCodecs(defs.CodecType.Intersection, c1, c2);
	    return (0, exports.codec)(defs.CodecType.Intersection, (0, exports.createIntersectionTransformer)('encode', codecs), (0, exports.createIntersectionTransformer)('decode', codecs), {
	        codecs: codecs
	    });
	};
	exports.intersection = intersection;
	const createUnionTransformer = (op, codecs) => (data) => {
	    const errors = [];
	    for (const codec of codecs) {
	        try {
	            return codec[op](data);
	        }
	        catch (err) {
	            errors.push(err);
	        }
	    }
	    throw new utils.TransformError(errors
	        .map((error) => {
	        if (error instanceof utils.TransformError) {
	            return error.errors;
	        }
	        return error.toString();
	    })
	        .flat());
	};
	exports.createUnionTransformer = createUnionTransformer;
	const union = (c1, c2) => {
	    const codecs = mergeSameCodecs(defs.CodecType.Union, c1, c2);
	    return (0, exports.codec)(defs.CodecType.Union, (0, exports.createUnionTransformer)('encode', codecs), (0, exports.createUnionTransformer)('decode', codecs), {
	        codecs
	    });
	};
	exports.union = union;
	const optional = (type) => {
	    if (!type.props.required) {
	        return type;
	    }
	    return (0, exports.codec)(type._tag, (data) => {
	        if (data === undefined) {
	            return undefined;
	        }
	        return type.encode(data);
	    }, (data) => {
	        if (data === undefined) {
	            return undefined;
	        }
	        return type.decode(data);
	    }, {
	        ...type.props,
	        required: false
	    });
	};
	exports.optional = optional; 
} (codec));

Object.defineProperty(maps$1, "__esModule", { value: true });
maps$1.record = maps$1.object = void 0;
const defs$4 = definitions$2;
const utils$2 = utils$3;
const codec_1$2 = codec;
const objectAssertion = (data) => {
    if (Array.isArray(data)) {
        throw new utils$2.TransformError('Expected a map but got an array');
    }
    if (typeof data !== 'object') {
        throw new utils$2.TransformError(`Expected a map but got ${typeof data}`);
    }
};
const object = (shape) => {
    const entries = Object.entries(shape);
    const transformer = (transformer) => (data) => {
        objectAssertion(data);
        return entries.reduce((acc, [key, codec]) => {
            const transformed = codec[transformer](data[key]);
            if (transformed !== undefined) {
                acc[key] = transformed;
            }
            return acc;
        }, {});
    };
    return (0, codec_1$2.codec)(defs$4.CodecType.Object, transformer('encode'), transformer('decode'), {
        shape
    });
};
maps$1.object = object;
const record = (type) => {
    const transformer = (transformer) => (data) => {
        objectAssertion(data);
        return Object.entries(data).reduce((acc, [key, value]) => {
            const transformed = type[transformer](value);
            if (transformed !== undefined) {
                acc[key] = transformed;
            }
            return acc;
        }, {});
    };
    return (0, codec_1$2.codec)(defs$4.CodecType.Record, transformer('encode'), transformer('decode'), {
        type
    });
};
maps$1.record = record;

Object.defineProperty(combinators, "__esModule", { value: true });
combinators.partial = combinators.omit = void 0;
const defs$3 = definitions$2;
const maps = maps$1;
const c = codec;
const omit = (codec, mask) => {
    const omitFromObjectCodec = (codec) => {
        const entries = Object.entries(codec.props.shape).filter(([key]) => {
            return !mask.includes(key);
        });
        return maps.object(Object.fromEntries(entries));
    };
    const omitFromIntersectionCodec = (codec) => {
        const codecs = codec.props.codecs.map(omitMaskFromCodec);
        return c.codec(defs$3.CodecType.Intersection, c.createIntersectionTransformer('encode', codecs), c.createIntersectionTransformer('decode', codecs), {
            codecs
        });
    };
    const omitFromUnionCodec = (codec) => {
        const codecs = codec.props.codecs.map(omitMaskFromCodec);
        return c.codec(defs$3.CodecType.Union, c.createUnionTransformer('encode', codecs), c.createUnionTransformer('decode', codecs), {
            codecs
        });
    };
    const omitMaskFromCodec = (codec) => {
        switch (codec._tag) {
            case defs$3.CodecType.Object: {
                return omitFromObjectCodec(codec);
            }
            case defs$3.CodecType.Intersection: {
                return omitFromIntersectionCodec(codec);
            }
            case defs$3.CodecType.Union: {
                return omitFromUnionCodec(codec);
            }
            default: {
                throw new Error(`Unsupported codec ${codec._tag}`);
            }
        }
    };
    return omitMaskFromCodec(codec);
};
combinators.omit = omit;
const partial = (codec) => {
    const partialObjectCodec = (codec) => {
        const entries = Object.entries(codec.props.shape).map(([key, codec]) => {
            return [key, codec.optional()];
        });
        return maps.object(Object.fromEntries(entries));
    };
    const partialIntersectionCodec = (codec) => {
        const codecs = codec.props.codecs.map(createPartialCodec);
        return c.codec(defs$3.CodecType.Intersection, c.createIntersectionTransformer('encode', codecs), c.createIntersectionTransformer('decode', codecs), {
            codecs
        });
    };
    const partialUnionCodec = (codec) => {
        const codecs = codec.props.codecs.map(createPartialCodec);
        return c.codec(defs$3.CodecType.Union, c.createUnionTransformer('encode', codecs), c.createUnionTransformer('decode', codecs), {
            codecs
        });
    };
    const createPartialCodec = (codec) => {
        switch (codec._tag) {
            case defs$3.CodecType.Object: {
                return partialObjectCodec(codec);
            }
            case defs$3.CodecType.Intersection: {
                return partialIntersectionCodec(codec);
            }
            case defs$3.CodecType.Union: {
                return partialUnionCodec(codec);
            }
        }
    };
    return createPartialCodec(codec);
};
combinators.partial = partial;

var primitives = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Enum = exports.any = exports.Null = exports.literal = exports.number = exports.boolean = exports.string = exports.identityCodec = void 0;
	const defs = definitions$2;
	const utils = utils$3;
	const codec_1 = codec;
	const identityCodec = (type) => {
	    const transform = (data) => {
	        if (typeof data !== type) {
	            throw new utils.TransformError(`type must be ${type}, received ${typeof data}`);
	        }
	        return data;
	    };
	    return (0, codec_1.codec)(type, transform, transform);
	};
	exports.identityCodec = identityCodec;
	exports.string = (0, exports.identityCodec)(defs.CodecType.String);
	exports.boolean = (0, exports.identityCodec)(defs.CodecType.Boolean);
	exports.number = (0, exports.identityCodec)(defs.CodecType.Number);
	const literal = (literal) => {
	    const transform = (data) => {
	        if (data !== literal) {
	            throw new utils.TransformError(`Expected '${literal}' but go '${data}'`);
	        }
	        return data;
	    };
	    return (0, codec_1.codec)(defs.CodecType.Literal, transform, transform, {
	        value: literal
	    });
	};
	exports.literal = literal;
	const assertNull = (data) => {
	    if (data !== null) {
	        throw new utils.TransformError(`expected value to be null`);
	    }
	    return null;
	};
	exports.Null = (0, codec_1.codec)(defs.CodecType.Null, assertNull, assertNull);
	exports.any = (0, codec_1.codec)(defs.CodecType.Any, (data) => data, (data) => data);
	const Enum = (native_enum) => {
	    const values = Object.values(native_enum);
	    const transformer = (data) => {
	        if (!values.includes(data)) {
	            throw new utils.TransformError(`Expected ${data} to match one of ${values}`);
	        }
	        return data;
	    };
	    return (0, codec_1.codec)(defs.CodecType.Enum, transformer, transformer, {
	        enum: native_enum
	    });
	};
	exports.Enum = Enum; 
} (primitives));

var recursive$1 = {};

Object.defineProperty(recursive$1, "__esModule", { value: true });
recursive$1.recursive = void 0;
const defs$2 = definitions$2;
const codec_1$1 = codec;
const recursive = (id, resolver) => {
    return (0, codec_1$1.codec)(defs$2.CodecType.Recursive, (data) => {
        const codec = resolver();
        return codec.encode(data);
    }, (data) => {
        const codec = resolver();
        return codec.decode(data);
    }, {
        id: id,
        resolver: resolver
    });
};
recursive$1.recursive = recursive;

var arrays = {};

Object.defineProperty(arrays, "__esModule", { value: true });
arrays.tuple = arrays.array = void 0;
const defs$1 = definitions$2;
const utils$1 = utils$3;
const codec_1 = codec;
const array = (type) => {
    const assertion = (data) => {
        if (!Array.isArray(data)) {
            throw new utils$1.TransformError(`Expected an array but got ${typeof data}`);
        }
    };
    return (0, codec_1.codec)(defs$1.CodecType.Array, (data) => {
        assertion(data);
        return data.map(type.encode);
    }, (data) => {
        assertion(data);
        return data.map(type.decode);
    }, {
        type
    });
};
arrays.array = array;
const tuple = (tuple) => {
    const transformer = (transformation) => (data) => {
        if (!Array.isArray(data)) {
            throw new utils$1.TransformError(`Expected an array but got ${typeof data}`);
        }
        if (data.length !== tuple.length) {
            throw new utils$1.TransformError(`Given tuple does not match schema. Length mismatch ${tuple.length} !== ${data.length}`);
        }
        return tuple.map((codec, i) => {
            return codec[transformation](data[i]);
        });
    };
    return (0, codec_1.codec)(defs$1.CodecType.Tuple, transformer('encode'), transformer('decode'), {
        codecs: tuple
    });
};
arrays.tuple = tuple;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(definitions$2, exports);
	__exportStar(jsonSchema, exports);
	__exportStar(combinators, exports);
	__exportStar(primitives, exports);
	__exportStar(recursive$1, exports);
	__exportStar(arrays, exports);
	__exportStar(codec, exports);
	__exportStar(maps$1, exports);
	__exportStar(utils$3, exports); 
} (dist$1));

Object.defineProperty(credentials, "__esModule", { value: true });
credentials.Credentials = void 0;
const t = dist$1;
credentials.Credentials = t.object({
    username: t.string,
    password: t.string
});

var commits = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Commit = exports.Author = void 0;
	const t = dist$1;
	exports.Author = t.object({
	    name: t.string,
	    email: t.string
	});
	exports.Commit = t.object({
	    oid: t.string,
	    message: t.string,
	    author: exports.Author,
	    committer: exports.Author,
	    timestamp: t.string
	});
	
} (commits));

var deltas = {};

var dist = {};

var parsers = {};

var codecs = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.FilterProperties = exports.makeQueryFilter = exports.QueryFilter = exports.Resource = exports.Timestamps = exports.ResourceId = exports.ObjectId = exports.date = exports.buffer = void 0;
	const t = __importStar(dist$1);
	const bson = __importStar(require$$1);
	exports.buffer = t.codec('Buffer', (buffer) => {
	    if (!Buffer.isBuffer(buffer)) {
	        throw new t.TransformError([`Expected buffer but got ${typeof buffer}`]);
	    }
	    return buffer.toString('base64');
	}, (buffer) => Buffer.from(buffer, 'base64'));
	exports.date = t.codec('Date', (date) => {
	    if (!(date instanceof Date)) {
	        throw new t.TransformError([`Expected Date but got ${typeof date}`]);
	    }
	    return date.toISOString();
	}, (date) => {
	    const parsed = new Date(date);
	    if (isNaN(parsed.getTime())) {
	        throw new t.TransformError([`Invalid date`]);
	    }
	    return parsed;
	});
	const assertObjectId = (value) => {
	    if (!bson.ObjectId.isValid(value)) {
	        throw new t.TransformError([`Expected an ObjectId but got ${typeof value}`]);
	    }
	};
	exports.ObjectId = t.codec('ObjectId', (id) => {
	    assertObjectId(id);
	    return id.toHexString();
	}, (id) => {
	    assertObjectId(id);
	    return new bson.ObjectId(id);
	});
	const assertObjectWithField = (field, data) => {
	    if (typeof data !== 'object') {
	        throw new t.TransformError([`Expected an object but got ${typeof data}`]);
	    }
	    if (!(field in data)) {
	        throw new t.TransformError([`Expected ${field} to be a member of object`]);
	    }
	};
	exports.ResourceId = t.codec('ResourceId', (data) => {
	    assertObjectWithField('_id', data);
	    return {
	        id: exports.ObjectId.encode(data._id)
	    };
	}, (data) => {
	    assertObjectWithField('id', data);
	    return {
	        _id: exports.ObjectId.decode(data.id)
	    };
	});
	exports.Timestamps = t.object({
	    created_at: exports.date,
	    updated_at: exports.date
	});
	exports.Resource = exports.ResourceId.and(exports.Timestamps);
	exports.QueryFilter = t.object({
	    exists: t.boolean
	});
	const makeQueryFilter = (type) => {
	    return type.or(t.array(type)).or(exports.QueryFilter).optional();
	};
	exports.makeQueryFilter = makeQueryFilter;
	const FilterProperties = (type) => {
	    let codecs = new Map();
	    const addCodecs = (codec) => {
	        if (codec.props?.shape) {
	            Object.keys(codec.props.shape).forEach((k) => {
	                codecs.set(k, codec.props.shape[k]);
	            });
	        }
	    };
	    if (type._tag === t.CodecType.Object) {
	        addCodecs(type);
	    }
	    else if (type._tag === t.CodecType.Intersection) {
	        type.props.codecs.forEach((c) => {
	            addCodecs(c);
	        });
	    }
	    t.object({
	        test: t.string
	    });
	    // @ts-ignore
	    return t.object(Array.from(codecs.keys()).reduce((prev, cur) => {
	        prev[cur] = (0, exports.makeQueryFilter)(codecs.get(cur));
	        return prev;
	    }, {}));
	};
	exports.FilterProperties = FilterProperties; 
} (codecs));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.parsers = exports.BufferParser = exports.DateParser = exports.ResourceIdParser = exports.ObjectIdParser = void 0;
	const codecs$1 = __importStar(codecs);
	const t = __importStar(dist$1);
	exports.ObjectIdParser = t.createParser(codecs$1.ObjectId._tag, (_, { target }) => {
	    switch (target) {
	        case t.TransformTarget.Encoded: {
	            return { type: 'string' };
	        }
	        case t.TransformTarget.Decoded: {
	            return { bsonType: 'ObjectId' };
	        }
	    }
	});
	exports.ResourceIdParser = t.createParser(codecs$1.ResourceId._tag, (_, { target }) => {
	    switch (target) {
	        case t.TransformTarget.Encoded: {
	            return {
	                type: 'object',
	                properties: {
	                    id: { type: 'string' }
	                },
	                required: ['id']
	            };
	        }
	        case t.TransformTarget.Decoded: {
	            return {
	                type: 'object',
	                properties: {
	                    _id: { bsonType: 'ObjectId' }
	                },
	                required: ['_id']
	            };
	        }
	    }
	});
	exports.DateParser = t.createParser(codecs$1.date._tag, (_, { target }) => {
	    switch (target) {
	        case t.TransformTarget.Encoded: {
	            return { type: 'string' };
	        }
	        case t.TransformTarget.Decoded: {
	            return { nodeType: 'date' };
	        }
	    }
	});
	exports.BufferParser = t.createParser(codecs$1.buffer._tag, (_, { target }) => {
	    switch (target) {
	        case t.TransformTarget.Encoded: {
	            return { type: 'string' };
	        }
	        case t.TransformTarget.Decoded: {
	            return { nodeType: 'buffer' };
	        }
	    }
	});
	exports.parsers = [exports.ObjectIdParser, exports.ResourceIdParser, exports.DateParser, exports.BufferParser]; 
} (parsers));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(parsers, exports);
	__exportStar(codecs, exports); 
} (dist));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Delta = exports.FileDelta = exports.FileDeleted = exports.FileModified = exports.FileAdded = exports.DeltaType = void 0;
	const codecs = dist;
	const t = dist$1;
	var DeltaType;
	(function (DeltaType) {
	    DeltaType["Added"] = "added";
	    DeltaType["Modified"] = "modified";
	    DeltaType["Deleted"] = "deleted";
	})(DeltaType = exports.DeltaType || (exports.DeltaType = {}));
	exports.FileAdded = t.object({
	    type: t.literal(DeltaType.Added),
	    path: t.string,
	    content: codecs.buffer
	});
	exports.FileModified = t.object({
	    type: t.literal(DeltaType.Modified),
	    path: t.string,
	    content: codecs.buffer
	});
	exports.FileDeleted = t.object({
	    type: t.literal(DeltaType.Deleted),
	    path: t.string
	});
	exports.FileDelta = t.object({
	    type: t.Enum(DeltaType),
	    path: t.string
	});
	exports.Delta = exports.FileAdded.or(exports.FileModified).or(exports.FileDeleted);
	
} (deltas));

var merges = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.MergedFile = exports.MergedFileConflicted = exports.MergedFileUnConflicted = void 0;
	const codecs = dist;
	const t = dist$1;
	const MergedFileStage = t.object({
	    oid: t.string,
	    content: codecs.buffer,
	    binary: t.boolean
	});
	exports.MergedFileUnConflicted = t.object({
	    path: t.string,
	    conflicted: t.literal(false),
	    merged: t.Null.or(MergedFileStage)
	});
	exports.MergedFileConflicted = t.object({
	    path: t.string,
	    conflicted: t.literal(true),
	    merged: t.Null.or(MergedFileStage),
	    ancestor: t.Null.or(MergedFileStage),
	    left: t.Null.or(MergedFileStage),
	    right: t.Null.or(MergedFileStage)
	});
	exports.MergedFile = exports.MergedFileConflicted.or(exports.MergedFileUnConflicted);
	
} (merges));

var files$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.File = exports.SerializedFile = exports.BinaryFile = exports.FileEntry = exports.Encoding = void 0;
	const codecs = dist;
	const t = dist$1;
	var Encoding;
	(function (Encoding) {
	    Encoding["UTF8"] = "utf8";
	    Encoding["Base64"] = "base64";
	    Encoding["Binary"] = "binary";
	})(Encoding = exports.Encoding || (exports.Encoding = {}));
	exports.FileEntry = t.object({
	    oid: t.string,
	    path: t.string,
	    binary: t.boolean
	});
	exports.BinaryFile = exports.FileEntry.and(t.object({
	    encoding: t.literal(Encoding.Binary),
	    content: codecs.buffer
	}));
	exports.SerializedFile = exports.FileEntry.and(t.object({
	    encoding: t.literal(Encoding.UTF8).or(t.literal(Encoding.Base64)),
	    content: t.string
	}));
	exports.File = exports.FileEntry.and(exports.BinaryFile.or(exports.SerializedFile));
	
} (files$1));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(credentials, exports);
	__exportStar(commits, exports);
	__exportStar(deltas, exports);
	__exportStar(merges, exports);
	__exportStar(files$1, exports);
	
} (definitions$3));

var api$1 = {};

var v1 = {};

var requests$1 = {};

var targets = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.LegacyTarget = exports.TargetType = void 0;
	const t = dist$1;
	var TargetType;
	(function (TargetType) {
	    TargetType["Remote"] = "remote";
	})(TargetType = exports.TargetType || (exports.TargetType = {}));
	exports.LegacyTarget = t.object({
	    type: t.literal(TargetType.Remote),
	    token: t.string.optional(),
	    uri: t.string
	});
	
} (targets));

var v2 = {};

var responses = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CanMergeResponse = exports.NotMergeableResponse = exports.MergeableResponse = exports.ListCommitsResponse = exports.CommitResponse = exports.UnsuccessfulCommit = exports.SuccessfulCommit = void 0;
	const defs = definitions$3;
	const t = dist$1;
	exports.SuccessfulCommit = t.object({
	    success: t.literal(true),
	    commit: defs.Commit,
	    file_deltas: t.array(defs.FileDelta)
	});
	exports.UnsuccessfulCommit = t.object({
	    success: t.literal(false),
	    conflicts: t.array(t.string)
	});
	exports.CommitResponse = exports.SuccessfulCommit.or(exports.UnsuccessfulCommit);
	exports.ListCommitsResponse = t.object({
	    cursor: t.string.optional(),
	    commits: t.array(defs.Commit),
	    total: t.number,
	    count: t.number,
	    more: t.boolean
	});
	exports.MergeableResponse = t.object({
	    mergeable: t.literal(true)
	});
	exports.NotMergeableResponse = t.object({
	    mergeable: t.literal(false),
	    conflicts: t.array(t.string)
	});
	exports.CanMergeResponse = exports.MergeableResponse.or(exports.NotMergeableResponse);
	
} (responses));

var requests = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.InitializeRepoParams = exports.TransferRepoParams = exports.MergeParams = exports.MergeCommitParams = exports.MergeDeltaParams = exports.DeleteBranchParams = exports.CreateBranchParams = exports.DirectRevertParams = exports.RevertParams = exports.GetFileDeltaParams = exports.DiffParams = exports.CommitParams = exports.GetLatestCommitParams = exports.ListCommitParams = exports.ListFileParams = exports.ReadFileParams = exports.CommonApiParams = exports.Target = void 0;
	const defs = definitions$3;
	const t = dist$1;
	exports.Target = t.object({
	    uri: t.string,
	    credentials: t.object({
	        username: t.string,
	        password: t.string
	    })
	});
	exports.CommonApiParams = t.object({
	    target: exports.Target
	});
	exports.ReadFileParams = exports.CommonApiParams.and(t.object({
	    ref: t.string,
	    files: t.array(t.string)
	}));
	exports.ListFileParams = exports.CommonApiParams.and(t.object({
	    ref: t.string
	}));
	exports.ListCommitParams = exports.CommonApiParams.and(t.object({
	    cursor: t.string,
	    limit: t.number.optional()
	}));
	exports.GetLatestCommitParams = exports.CommonApiParams.and(t.object({
	    branch: t.string
	}));
	exports.CommitParams = exports.CommonApiParams.and(t.object({
	    ref: t.string.optional(),
	    branch: t.string,
	    message: t.string,
	    author: defs.Author,
	    /**
	     * Additional parent commits the new commit should be joined with. Specifying this will
	     * result in the commit being a merge. The passed `deltas` need to include the changes
	     * from each of the additional parents
	     */
	    parent_refs: t.array(t.string).optional()
	}));
	exports.DiffParams = exports.CommonApiParams.and(t.object({
	    ref: t.string,
	    deltas: t.array(defs.Delta)
	}));
	exports.GetFileDeltaParams = exports.CommonApiParams.and(t.object({
	    /**
	     * If no left_ref is provided then this will produce a commit diff of the right_ref
	     */
	    left_ref: t.string.optional(),
	    right_ref: t.string
	}));
	exports.RevertParams = exports.CommonApiParams.and(t.object({
	    branch: t.string,
	    author: defs.Author,
	    refs: t.array(t.string)
	}));
	exports.DirectRevertParams = exports.CommonApiParams.and(t.object({
	    branch: t.string,
	    author: defs.Author,
	    ref: t.string
	}));
	exports.CreateBranchParams = exports.CommonApiParams.and(t.object({
	    ref: t.string,
	    branch: t.string
	}));
	exports.DeleteBranchParams = exports.CommonApiParams.and(t.object({
	    branch: t.string
	}));
	exports.MergeDeltaParams = exports.CommonApiParams.and(t.object({
	    head_ref: t.string,
	    base_ref: t.string
	}));
	exports.MergeCommitParams = exports.CommonApiParams.and(t.object({
	    left_ref: t.string,
	    right_ref: t.string
	}));
	exports.MergeParams = exports.CommonApiParams.and(t.object({
	    branch: t.string,
	    left_ref: t.string,
	    right_ref: t.string,
	    author: defs.Author
	}));
	exports.TransferRepoParams = exports.CommonApiParams.and(t.object({
	    source: exports.Target
	}));
	exports.InitializeRepoParams = exports.CommonApiParams.and(t.object({
	    message: t.string
	}));
	
} (requests));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(responses, exports);
	__exportStar(requests, exports);
	
} (v2));

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.InitializeRepoStreamedParams = exports.TransferRepoParams = exports.MergeParams = exports.MergeCommitParams = exports.MergeDeltaParams = exports.DeleteBranchParams = exports.CreateBranchParams = exports.DirectRevertParams = exports.RevertParams = exports.GetFileDeltaParams = exports.DiffParams = exports.CommitParams = exports.StreamedCommitParams = exports.GetLatestCommitParams = exports.ListCommitParams = exports.ListFileParams = exports.ReadFileParams = exports.V1CommonApiParams = void 0;
	const targets_1 = targets;
	const defs = definitions$3;
	const api_v2 = v2;
	const t = dist$1;
	exports.V1CommonApiParams = t.object({
	    target: targets_1.LegacyTarget
	});
	const WithV1Target = (codec) => {
	    return t.omit(codec, ['target']).and(exports.V1CommonApiParams);
	};
	exports.ReadFileParams = WithV1Target(api_v2.ReadFileParams);
	exports.ListFileParams = WithV1Target(api_v2.ListFileParams);
	exports.ListCommitParams = WithV1Target(api_v2.ListCommitParams);
	exports.GetLatestCommitParams = WithV1Target(api_v2.GetLatestCommitParams);
	exports.StreamedCommitParams = WithV1Target(api_v2.CommitParams);
	exports.CommitParams = exports.StreamedCommitParams.and(t.object({
	    delta: t.array(defs.Delta)
	}));
	exports.DiffParams = exports.V1CommonApiParams.and(t.object({
	    ref: t.string,
	    delta: t.array(defs.Delta)
	}));
	exports.GetFileDeltaParams = WithV1Target(api_v2.GetFileDeltaParams);
	exports.RevertParams = WithV1Target(api_v2.RevertParams);
	exports.DirectRevertParams = WithV1Target(api_v2.DirectRevertParams);
	exports.CreateBranchParams = WithV1Target(api_v2.CreateBranchParams);
	exports.DeleteBranchParams = exports.CreateBranchParams;
	exports.MergeDeltaParams = WithV1Target(api_v2.MergeDeltaParams);
	exports.MergeCommitParams = WithV1Target(api_v2.MergeCommitParams);
	exports.MergeParams = WithV1Target(api_v2.MergeParams);
	exports.TransferRepoParams = t.object({
	    source: targets_1.LegacyTarget,
	    target: targets_1.LegacyTarget
	});
	exports.InitializeRepoStreamedParams = WithV1Target(api_v2.InitializeRepoParams);
	
} (requests$1));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(requests$1, exports);
	__exportStar(targets, exports);
	
} (v1));

Object.defineProperty(api$1, "__esModule", { value: true });
api$1.v2 = api$1.v1 = void 0;
api$1.v1 = v1;
api$1.v2 = v2;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.api = void 0;
	__exportStar(definitions$3, exports);
	exports.api = api$1;
	
} (dist$2));

var api = {};

var providersApis = {};

var azureDevops = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.GetAzureDevopsRepositoriesResponse = exports.AzureDevopsRepository = exports.GetAzureDevopsRepositoriesParams = exports.ReceiveAzureDevopsWebhookParams = void 0;
	const t = __importStar(dist$1);
	exports.ReceiveAzureDevopsWebhookParams = t.object({
	    id: t.string,
	    eventType: t.literal('git.push'),
	    resource: t.object({
	        commits: t.array(t.object({
	            commitId: t.string,
	            author: t.object({
	                name: t.string,
	                email: t.string
	            }),
	            committer: t.object({
	                name: t.string,
	                email: t.string,
	                date: t.string
	            }),
	            comment: t.string
	        })),
	        refUpdates: t.array(t.object({
	            name: t.string,
	            oldObjectId: t.string,
	            newObjectId: t.string
	        })),
	        repository: t.object({
	            remoteUrl: t.string
	        })
	    })
	});
	exports.GetAzureDevopsRepositoriesParams = t.object({
	    org_id: t.string,
	    azure_organization: t.string,
	    azure_project: t.string
	});
	exports.AzureDevopsRepository = t.object({
	    name: t.string,
	    size: t.number.optional()
	});
	exports.GetAzureDevopsRepositoriesResponse = t.array(exports.AzureDevopsRepository);
	
} (azureDevops));

var github = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.GetGitHubRepositoriesResponse = exports.GitHubRepository = exports.GetGitHubRepositoriesParams = void 0;
	const t = __importStar(dist$1);
	exports.GetGitHubRepositoriesParams = t.object({
	    org_id: t.string,
	    github_account: t.string
	});
	exports.GitHubRepository = t.object({
	    name: t.string,
	    size: t.number.optional(),
	    created_at: t.string
	});
	exports.GetGitHubRepositoriesResponse = t.array(exports.GitHubRepository);
	
} (github));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(azureDevops, exports);
	__exportStar(github, exports);
	
} (providersApis));

var v3 = {};

var schema = {};

var definitions = {};

var sourceCodeEvents = {};

var sourceMetadata = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SourceMetadata = exports.AzureDevopsSourceMetadata = exports.AzureDevopsSourceProperties = exports.InternalSourceMetadata = exports.InternalSourceProperties = exports.GitHubSourceMetadata = exports.GitHubSourceProperties = exports.SourceType = void 0;
	const t = __importStar(dist$1);
	var SourceType;
	(function (SourceType) {
	    SourceType["Internal"] = "INTERNAL";
	    SourceType["GitHub"] = "GITHUB";
	    SourceType["AzureDevops"] = "AZURE_DEVOPS";
	})(SourceType = exports.SourceType || (exports.SourceType = {}));
	exports.GitHubSourceProperties = t.object({
	    owner: t.string,
	    repo: t.string
	});
	exports.GitHubSourceMetadata = t.object({
	    type: t.literal(SourceType.GitHub),
	    properties: exports.GitHubSourceProperties
	});
	exports.InternalSourceProperties = t.object({
	    id: t.string
	});
	exports.InternalSourceMetadata = t.object({
	    type: t.literal(SourceType.Internal),
	    properties: exports.InternalSourceProperties
	});
	exports.AzureDevopsSourceProperties = t.object({
	    organization: t.string,
	    project: t.string,
	    repo: t.string
	});
	exports.AzureDevopsSourceMetadata = t.object({
	    type: t.literal(SourceType.AzureDevops),
	    properties: exports.AzureDevopsSourceProperties
	});
	exports.SourceMetadata = exports.GitHubSourceMetadata.or(exports.InternalSourceMetadata).or(exports.AzureDevopsSourceMetadata);
	
} (sourceMetadata));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SourceCodeEvent = exports.SourceCodeEventV2 = exports.SourceCodeEventV1 = exports.SourceCodeRepoEventV2 = exports.SourceCodeRepoEventV1 = exports.SourceCodeBranchEventV2 = exports.SourceCodeBranchEventV1 = exports.SourceCodePushEventV2 = exports.SourceCodePushEventV1 = exports.SourceCodeEventSchemaVersion = exports.SourceCodeEventType = void 0;
	const git = __importStar(dist$2);
	const source = __importStar(sourceMetadata);
	const t = __importStar(dist$1);
	var SourceCodeEventType;
	(function (SourceCodeEventType) {
	    SourceCodeEventType["Push"] = "SOURCE_CODE.PUSH";
	    SourceCodeEventType["BranchCreated"] = "SOURCE_CODE.BRANCH_CREATED";
	    SourceCodeEventType["BranchDeleted"] = "SOURCE_CODE.BRANCH_DELETED";
	    /**
	     * @deprecated
	     */
	    SourceCodeEventType["RepoRemoved"] = "SOURCE_CODE.REPO_REMOVED";
	    /**
	     * @deprecated
	     */
	    SourceCodeEventType["RepoAdded"] = "SOURCE_CODE.REPO_ADDED";
	})(SourceCodeEventType = exports.SourceCodeEventType || (exports.SourceCodeEventType = {}));
	var SourceCodeEventSchemaVersion;
	(function (SourceCodeEventSchemaVersion) {
	    SourceCodeEventSchemaVersion["V2"] = "V2";
	})(SourceCodeEventSchemaVersion = exports.SourceCodeEventSchemaVersion || (exports.SourceCodeEventSchemaVersion = {}));
	const CommonEventPayload = t.object({
	    branch: t.string,
	    app_id: t.string,
	    org_id: t.string.optional(),
	    source: source.SourceMetadata
	});
	exports.SourceCodePushEventV1 = t.object({
	    type: t.literal(SourceCodeEventType.Push),
	    payload: CommonEventPayload.and(t.object({
	        modified: t.array(t.string),
	        removed: t.array(t.string)
	    }))
	});
	exports.SourceCodePushEventV2 = t.object({
	    type: t.literal(SourceCodeEventType.Push),
	    version: t.literal(SourceCodeEventSchemaVersion.V2),
	    payload: CommonEventPayload.and(t.object({
	        modified: t.array(t.string),
	        removed: t.array(t.string),
	        commit: git.Commit
	    }))
	});
	exports.SourceCodeBranchEventV1 = t.object({
	    type: t.literal(SourceCodeEventType.BranchCreated).or(t.literal(SourceCodeEventType.BranchDeleted)),
	    payload: CommonEventPayload
	});
	exports.SourceCodeBranchEventV2 = exports.SourceCodeBranchEventV1.and(t.object({
	    version: t.literal(SourceCodeEventSchemaVersion.V2)
	}));
	exports.SourceCodeRepoEventV1 = t.object({
	    type: t.literal(SourceCodeEventType.RepoAdded).or(t.literal(SourceCodeEventType.RepoRemoved)),
	    payload: t.object({
	        app_id: t.string,
	        org_id: t.string.optional(),
	        source: source.SourceMetadata
	    })
	});
	exports.SourceCodeRepoEventV2 = exports.SourceCodeRepoEventV1.and(t.object({
	    version: t.literal(SourceCodeEventSchemaVersion.V2)
	}));
	exports.SourceCodeEventV1 = exports.SourceCodePushEventV1.or(exports.SourceCodeBranchEventV1).or(exports.SourceCodeRepoEventV1);
	exports.SourceCodeEventV2 = exports.SourceCodePushEventV2.or(exports.SourceCodeBranchEventV2).or(exports.SourceCodeRepoEventV2);
	exports.SourceCodeEvent = exports.SourceCodeEventV1.or(exports.SourceCodeEventV2);
	
} (sourceCodeEvents));

var app = {};

var hasRequiredApp;

function requireApp () {
	if (hasRequiredApp) return app;
	hasRequiredApp = 1;
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(app, "__esModule", { value: true });
	app.App = void 0;
	const defs = __importStar(requireDefinitions());
	const t = __importStar(dist$1);
	app.App = t.object({
	    id: t.string,
	    org_id: t.string,
	    source: defs.SourceMetadata
	});
	
	return app;
}

var hasRequiredDefinitions;

function requireDefinitions () {
	if (hasRequiredDefinitions) return definitions;
	hasRequiredDefinitions = 1;
	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(sourceCodeEvents, exports);
		__exportStar(sourceMetadata, exports);
		__exportStar(requireApp(), exports);
		
	} (definitions));
	return definitions;
}

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.CreateRepoResponse = exports.CreateRepoBlankResponse = exports.CreateRepoInitializedResponse = exports.InitializeSourceParams = exports.CreateRepoParams = exports.TransferRepoParams = exports.CommitParams = exports.CreateBranchParams = exports.MergeParams = exports.DirectRevertParams = exports.RevertParams = exports.ListCommitParams = exports.ListFilesParams = exports.GetFileDeltaParams = exports.DeleteBranchParams = exports.GetLatestCommitParams = exports.ReadParams = exports.MergeCommitParams = exports.MergeDeltaParams = exports.StreamedCommitParams = exports.WithSource = exports.SourceParams = void 0;
	const git_api = __importStar(dist$2);
	const index_1 = requireDefinitions();
	const t = __importStar(dist$1);
	exports.SourceParams = t.object({
	    source: index_1.SourceMetadata
	});
	const WithSource = (codec) => {
	    return t.omit(codec, ['target']).and(exports.SourceParams);
	};
	exports.WithSource = WithSource;
	exports.StreamedCommitParams = (0, exports.WithSource)(git_api.api.v2.CommitParams);
	exports.MergeDeltaParams = (0, exports.WithSource)(git_api.api.v2.MergeDeltaParams);
	exports.MergeCommitParams = (0, exports.WithSource)(git_api.api.v2.MergeCommitParams);
	exports.ReadParams = (0, exports.WithSource)(git_api.api.v2.ReadFileParams);
	exports.GetLatestCommitParams = (0, exports.WithSource)(git_api.api.v2.GetLatestCommitParams);
	exports.DeleteBranchParams = (0, exports.WithSource)(git_api.api.v2.DeleteBranchParams);
	exports.GetFileDeltaParams = (0, exports.WithSource)(git_api.api.v2.GetFileDeltaParams);
	exports.ListFilesParams = (0, exports.WithSource)(git_api.api.v2.ListFileParams);
	exports.ListCommitParams = (0, exports.WithSource)(git_api.api.v2.ListCommitParams);
	exports.RevertParams = (0, exports.WithSource)(git_api.api.v2.RevertParams);
	exports.DirectRevertParams = (0, exports.WithSource)(git_api.api.v2.DirectRevertParams);
	exports.MergeParams = (0, exports.WithSource)(git_api.api.v2.MergeParams);
	exports.CreateBranchParams = exports.SourceParams.and(t.object({
	    base: t.string,
	    branch: t.string
	}));
	exports.CommitParams = exports.StreamedCommitParams.and(t.object({
	    deltas: t.array(git_api.Delta)
	}));
	exports.TransferRepoParams = exports.SourceParams.and(t.object({
	    target: index_1.SourceMetadata
	}));
	exports.CreateRepoParams = exports.SourceParams.and(t.object({
	    initialize: t.boolean.optional(),
	    org_id: t.string
	}));
	exports.InitializeSourceParams = exports.SourceParams.and(t.object({
	    org_id: t.string,
	    commit_message: t.string,
	    create_repo: t.boolean.optional()
	}));
	exports.CreateRepoInitializedResponse = t.object({
	    initialized: t.literal(true),
	    commit: git_api.Commit
	});
	exports.CreateRepoBlankResponse = t.object({
	    initialized: t.literal(false)
	});
	exports.CreateRepoResponse = exports.CreateRepoInitializedResponse.or(exports.CreateRepoBlankResponse);
	
} (schema));

var routes$1 = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Routes = void 0;
	(function (Routes) {
	    Routes["CREATE_REPO"] = "/api/source/v3/create-repo";
	    Routes["INITIALIZE_REPO"] = "/api/source/v3/initialize-repo";
	    Routes["INITIALIZE_SOURCE"] = "/api/source/v3/initialize-source";
	    Routes["TRANSFER_REPO"] = "/api/source/v3/transfer-repo";
	    Routes["READ"] = "/api/source/v3/read";
	    Routes["READ_STREAMED"] = "/api/source/v3/read/streamed";
	    Routes["GET_LATEST_COMMIT"] = "/api/source/v3/get-latest-commit";
	    Routes["LIST_FILES"] = "/api/source/v3/list-files";
	    Routes["LIST_BRANCHES"] = "/api/source/v3/list-branches";
	    Routes["LIST_COMMITS"] = "/api/source/v3/list-commits";
	    Routes["CAN_MERGE_DELTAS"] = "/api/source/v3/can-merge-deltas/streamed";
	    Routes["MERGE_DELTAS"] = "/api/source/v3/merge-deltas/streamed";
	    Routes["CAN_MERGE"] = "/api/source/v3/can-merge";
	    Routes["MERGE_COMMITS"] = "/api/source/v3/merge-commits/streamed";
	    Routes["GET_FILE_DELTAS"] = "/api/source/v3/get-file-deltas";
	    Routes["CREATE_BRANCH"] = "/api/source/v3/create-branch";
	    Routes["DELETE_BRANCH"] = "/api/source/v3/delete-branch";
	    Routes["COMMIT"] = "/api/source/v3/commit";
	    Routes["COMMIT_STREAMED"] = "/api/source/v3/commit/streamed";
	    Routes["REVERT"] = "/api/source/v3/revert";
	    Routes["DIRECT_REVERT"] = "/api/source/v3/direct-revert";
	    Routes["MERGE"] = "/api/source/v3/merge";
	})(exports.Routes || (exports.Routes = {}));
	
} (routes$1));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(schema, exports);
	__exportStar(routes$1, exports);
	
} (v3));

var __createBinding$2 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$2 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$2 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$2(result, mod, k);
    __setModuleDefault$2(result, mod);
    return result;
};
Object.defineProperty(api, "__esModule", { value: true });
api.v3 = api.providers = void 0;
api.providers = __importStar$2(providersApis);
api.v3 = __importStar$2(v3);

var kafkaTopics = {};

(function (exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.KafkaTopic = void 0;
	(function (KafkaTopic) {
	    KafkaTopic["SourceCodeEvents"] = "apps.source.code.events";
	})(exports.KafkaTopic || (exports.KafkaTopic = {}));
	
} (kafkaTopics));

var utils = {};

var __createBinding$1 = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault$1 = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar$1 = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$1(result, mod, k);
    __setModuleDefault$1(result, mod);
    return result;
};
Object.defineProperty(utils, "__esModule", { value: true });
utils.isV2SourceCodeEvent = utils.sanitizeSourceMetadata = void 0;
const defs = __importStar$1(requireDefinitions());
/**
 * Small utility to be used by consuming applications for sanitizing source metadata. Generally
 * used on request input data or data about to be inserted into a database
 */
const sanitizeSourceMetadata = (input) => {
    switch (input.type) {
        case defs.SourceType.GitHub: {
            return {
                type: input.type,
                properties: {
                    owner: input.properties.owner.toLowerCase(),
                    repo: input.properties.repo.toLowerCase()
                }
            };
        }
        case defs.SourceType.Internal: {
            return {
                type: input.type,
                properties: {
                    id: input.properties.id
                }
            };
        }
        case defs.SourceType.AzureDevops: {
            return {
                type: input.type,
                properties: {
                    organization: input.properties.organization,
                    project: input.properties.project,
                    repo: input.properties.repo
                }
            };
        }
        default: {
            throw new Error('Unknown source type');
        }
    }
};
utils.sanitizeSourceMetadata = sanitizeSourceMetadata;
const isV2SourceCodeEvent = (event) => {
    return 'version' in event && event.version === defs.SourceCodeEventSchemaVersion.V2;
};
utils.isV2SourceCodeEvent = isV2SourceCodeEvent;

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.api = exports.git = void 0;
	exports.git = __importStar(dist$2);
	exports.api = __importStar(api);
	__exportStar(kafkaTopics, exports);
	__exportStar(requireDefinitions(), exports);
	__exportStar(utils, exports);
	
} (dist$3));

var models = {};

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.UserMFAFactorResource = exports.MFAFactor = exports.MFAFactorState = exports.DeveloperInviteResource = exports.DeveloperInvite = exports.DeveloperInviteStatus = exports.UserResource = exports.User = exports.UserOrgAccess = exports.AppResource = exports.App = exports.ProjectFeatureFlags = exports.VCS_MODE = exports.OrganizationResource = exports.Organization = exports.BUSINESS_REGION = void 0;
	const source = __importStar(dist$3);
	const codecs = __importStar(dist);
	const t = __importStar(dist$1);
	var BUSINESS_REGION;
	(function (BUSINESS_REGION) {
	    BUSINESS_REGION["ZA"] = "za";
	    BUSINESS_REGION["US"] = "us";
	})(BUSINESS_REGION || (exports.BUSINESS_REGION = BUSINESS_REGION = {}));
	exports.Organization = t.object({
	    label: t.string,
	    locked: t.boolean.optional(),
	    business_customer_code: t.string.optional(),
	    business_customer_region: t.Enum(BUSINESS_REGION).optional()
	});
	exports.OrganizationResource = exports.Organization.and(codecs.ResourceId);
	var VCS_MODE;
	(function (VCS_MODE) {
	    VCS_MODE["ADVANCED"] = "ADVANCED";
	    VCS_MODE["BASIC"] = "BASIC";
	})(VCS_MODE || (exports.VCS_MODE = VCS_MODE = {}));
	var ProjectFeatureFlags;
	(function (ProjectFeatureFlags) {
	    ProjectFeatureFlags["APP"] = "app";
	    ProjectFeatureFlags["POWERSYNC"] = "powersync";
	    // maybe later: 'cloudcode', 'backend'
	})(ProjectFeatureFlags || (exports.ProjectFeatureFlags = ProjectFeatureFlags = {}));
	exports.App = t.object({
	    name: t.string,
	    org_id: t.string,
	    auth_scope_id: t.string.optional(),
	    vcs_mode: t.Enum(VCS_MODE).optional(),
	    source: source.SourceMetadata.optional(),
	    region: t.string,
	    features: t.array(t.Enum(ProjectFeatureFlags)),
	    trial: t.boolean.optional(),
	    locked: t.boolean.optional(),
	    trial_expiry: t.string.optional()
	});
	exports.AppResource = exports.App.and(codecs.ResourceId);
	var UserOrgAccess;
	(function (UserOrgAccess) {
	    UserOrgAccess["DEVELOPER"] = "developer";
	    UserOrgAccess["OWNER"] = "owner";
	})(UserOrgAccess || (exports.UserOrgAccess = UserOrgAccess = {}));
	exports.User = t.object({
	    email: t.string,
	    org_id: t.string,
	    name: t.string.optional(),
	    phone_number: t.string.optional(),
	    signup_complete: t.boolean.optional(),
	    onboarding_token: t.string.optional()
	});
	exports.UserResource = exports.User.and(codecs.ResourceId);
	var DeveloperInviteStatus;
	(function (DeveloperInviteStatus) {
	    DeveloperInviteStatus["PENDING"] = "pending";
	    DeveloperInviteStatus["ACCEPTED"] = "accepted";
	    DeveloperInviteStatus["DECLINED"] = "declined";
	})(DeveloperInviteStatus || (exports.DeveloperInviteStatus = DeveloperInviteStatus = {}));
	exports.DeveloperInvite = t.object({
	    status: t.Enum(DeveloperInviteStatus),
	    responded_at: t.string,
	    metadata: t.object({
	        user_name: t.string.optional(),
	        org_name: t.string.optional(),
	        email: t.string.optional(),
	        role_names: t.array(t.string).optional()
	    }),
	    org_id: t.string,
	    user_id: t.string,
	    requested_role_ids: t.array(t.string)
	});
	exports.DeveloperInviteResource = exports.DeveloperInvite.and(codecs.ResourceId);
	var MFAFactorState;
	(function (MFAFactorState) {
	    MFAFactorState["ACTIVE"] = "active";
	    MFAFactorState["DISABLED"] = "disabled";
	    MFAFactorState["PENDING"] = "pending";
	})(MFAFactorState || (exports.MFAFactorState = MFAFactorState = {}));
	var MFAFactor;
	(function (MFAFactor) {
	    MFAFactor["SMS"] = "sms";
	    MFAFactor["TOTP"] = "totp";
	})(MFAFactor || (exports.MFAFactor = MFAFactor = {}));
	exports.UserMFAFactorResource = t.object({
	    id: t.string,
	    created_at: t.string,
	    updated_at: t.string,
	    deleted_at: t.string,
	    state: t.Enum(MFAFactorState),
	    factor_type: t.Enum(MFAFactor),
	    sms_otp_mobile_number: t.string,
	    totp_factor_sid: t.string
	}); 
} (models));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
	    Object.defineProperty(o, "default", { enumerable: true, value: v });
	}) : function(o, v) {
	    o["default"] = v;
	});
	var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
	    if (mod && mod.__esModule) return mod;
	    var result = {};
	    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
	    __setModuleDefault(result, mod);
	    return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.UpdateAppLocksParams = exports.UpdateOrgLocksParams = exports.SendMFASMSResponse = exports.SendMFASMSParams = exports.SetUserMFAPreferenceResponse = exports.SetUserMFAPreferenceParams = exports.GetMFABackupCodesResponse = exports.DeleteMFAFactorResponse = exports.DeleteMFAFactorParams = exports.VerifyMFAFactorResponse = exports.VerifyMFAFactorParams = exports.RegisterSMSMFAFactorResponse = exports.RegisterSMSMFAFactorParams = exports.RegisterTOTPMFAFactorResponse = exports.UpdateUserParams = exports.ListUserMFAFactorsResponse = exports.CreateUserParams = exports.GetPreferredMFAFactorResponse = exports.GetSensitiveAccessTokenResponse = exports.GetSensitiveAccessTokenParams = exports.GiveUserAccessParams = exports.TokenResponse = exports.CompleteSignupParams = exports.UpdateInviteParams = exports.GetSignupUserResponse = exports.CreateDeveloperInviteParams = exports.StartSignupParams = exports.ListUserResponse = exports.ListUserParams = exports.ListUserInvitesResponse = exports.GetUserInvitesParams = exports.ListAppsResponse = exports.ListAppParams = exports.UpdateAppParams = exports.CreateAppParams = exports.ListOrgResponse = exports.ListOrgParams = exports.UpdateOrgBilling = exports.UpdateOrgParams = exports.CreateOrgParams = exports.ExtendAppTrialParams = exports.UpgradeAppParams = exports.DowngradeAppParams = exports.ListResponseMetaData = exports.SearchParams = exports.PaginationParams = exports.OperationResponse = exports.IDParam = void 0;
	const source = __importStar(dist$3);
	const codecs = __importStar(dist);
	const models$1 = __importStar(models);
	const t = __importStar(dist$1);
	exports.IDParam = t.object({
	    id: t.string
	});
	exports.OperationResponse = t.object({
	    success: t.boolean
	});
	exports.PaginationParams = t.object({
	    cursor: t.string.optional(),
	    limit: t.number.optional()
	});
	exports.SearchParams = exports.PaginationParams.and(t.object({
	    search: t.string
	}));
	exports.ListResponseMetaData = t.object({
	    count: t.number,
	    more: t.boolean,
	    total: t.number,
	    cursor: t.string
	});
	exports.DowngradeAppParams = t.object({
	    app_id: t.string,
	    trial_duration: t.number
	});
	exports.UpgradeAppParams = t.object({
	    app_id: t.string
	});
	exports.ExtendAppTrialParams = t.object({
	    app_id: t.string,
	    trial_duration: t.number
	});
	exports.CreateOrgParams = t.object({
	    name: t.string
	});
	exports.UpdateOrgParams = t.object({
	    id: t.string,
	    label: t.string.optional()
	});
	exports.UpdateOrgBilling = t.object({
	    id: t.string,
	    business_customer_code: t.string.optional(),
	    business_customer_region: t.Enum(models$1.BUSINESS_REGION).optional()
	});
	exports.ListOrgParams = exports.PaginationParams.and(codecs.FilterProperties(models$1.OrganizationResource));
	exports.ListOrgResponse = exports.ListResponseMetaData.and(t.object({
	    objects: t.array(models$1.OrganizationResource)
	}));
	exports.CreateAppParams = t.object({
	    name: t.string,
	    org_id: t.string,
	    default_region: t.string,
	    vcs_mode: t.string,
	    source: source.SourceMetadata,
	    auth_scope_id: t.string.optional(),
	    features: t.array(t.Enum(models$1.ProjectFeatureFlags)).optional(),
	    trial: t.boolean.optional()
	});
	exports.UpdateAppParams = t.object({
	    id: t.string,
	    name: t.string.optional(),
	    auth_scope_id: t.string.optional(),
	    source: source.SourceMetadata.optional(),
	    vcs_mode: t.Enum(models$1.VCS_MODE).optional()
	});
	exports.ListAppParams = exports.PaginationParams.and(codecs.FilterProperties(codecs.ResourceId.and(t.object({
	    name: t.string,
	    org_id: t.string,
	    trial: t.boolean,
	    locked: t.boolean
	}))));
	exports.ListAppsResponse = exports.ListResponseMetaData.and(t.object({
	    objects: t.array(models$1.AppResource)
	}));
	exports.GetUserInvitesParams = exports.PaginationParams.and(codecs.FilterProperties(models$1.DeveloperInviteResource));
	exports.ListUserInvitesResponse = exports.ListResponseMetaData.and(t.object({
	    objects: t.array(models$1.DeveloperInviteResource)
	}));
	exports.ListUserParams = exports.PaginationParams.and(codecs.FilterProperties(models$1.UserResource));
	exports.ListUserResponse = exports.ListResponseMetaData.and(t.object({
	    objects: t.array(models$1.UserResource)
	}));
	exports.StartSignupParams = t.object({
	    email: t.string,
	    /**
	     * When "start signup" is initiated for someone else (e.g. by an admin from override), this is the id of the creator.
	     */
	    user_id: t.string.optional(),
	    features: t.array(t.Enum(models$1.ProjectFeatureFlags)).optional()
	});
	exports.CreateDeveloperInviteParams = t.object({
	    email: t.string,
	    org_id: t.string,
	    requested_role_ids: t.array(t.string),
	    metadata: t
	        .object({
	        role_names: t.array(t.string)
	    })
	        .optional()
	});
	exports.GetSignupUserResponse = models$1.UserResource.and(t.object({
	    onboarding_token: t.string.optional(),
	    new_organization: t.boolean
	}));
	exports.UpdateInviteParams = t.object({
	    id: t.string,
	    requested_role_ids: t.array(t.string)
	});
	exports.CompleteSignupParams = t.object({
	    id: t.string,
	    name: t.string,
	    phone_number: t.string.optional(),
	    password: t.string,
	    send_welcome_email: t.boolean.optional(),
	    org_name: t.string.optional()
	});
	exports.TokenResponse = t.object({
	    token: t.string
	});
	exports.GiveUserAccessParams = t.object({
	    org_id: t.string,
	    user_id: t.string,
	    type: t.Enum(models$1.UserOrgAccess)
	});
	/**
	 * Password is required if no MFA is active.
	 * Factor ID and OTP is required if MFA is enabled for the user.
	 */
	exports.GetSensitiveAccessTokenParams = t.object({
	    password: t.string.optional(),
	    otp_attempt: t.string.optional(),
	    factor_id: t.string.optional()
	});
	exports.GetSensitiveAccessTokenResponse = t.object({
	    token: t.string
	});
	exports.GetPreferredMFAFactorResponse = t.object({
	    factor: models$1.UserMFAFactorResource.optional()
	});
	exports.CreateUserParams = t.omit(models$1.User, ['signup_complete']);
	exports.ListUserMFAFactorsResponse = t.object({
	    factors: t.array(models$1.UserMFAFactorResource),
	    backup_codes_viewed: t.boolean,
	    preferred_factor_id: t.string.optional()
	});
	exports.UpdateUserParams = t.object({
	    id: t.string,
	    name: t.string.optional()
	});
	exports.RegisterTOTPMFAFactorResponse = t.object({
	    factor: models$1.UserMFAFactorResource,
	    factor_uri: t.string
	});
	exports.RegisterSMSMFAFactorParams = t.object({
	    mobile_number: t.string,
	    consented_at: codecs.date
	});
	exports.RegisterSMSMFAFactorResponse = t.object({
	    factor: models$1.UserMFAFactorResource,
	    factor_uri: t.string
	});
	exports.VerifyMFAFactorParams = t.object({
	    factor_id: t.string,
	    code: t.string
	});
	exports.VerifyMFAFactorResponse = t.object({
	    success: t.boolean
	});
	exports.DeleteMFAFactorParams = t.object({
	    factor_id: t.string
	});
	exports.DeleteMFAFactorResponse = t.object({
	    success: t.boolean
	});
	exports.GetMFABackupCodesResponse = t.object({
	    backup_codes: t.array(t.string)
	});
	exports.SetUserMFAPreferenceParams = t.object({
	    factor_id: t.string
	});
	exports.SetUserMFAPreferenceResponse = t.object({
	    factor: t.Enum(models$1.MFAFactor).optional()
	});
	exports.SendMFASMSParams = t.object({
	    factor_id: t.string
	});
	exports.SendMFASMSResponse = t.object({
	    sent: t.boolean
	});
	exports.UpdateOrgLocksParams = t.object({
	    id: t.string,
	    locked: t.boolean
	});
	exports.UpdateAppLocksParams = t.object({
	    id: t.string,
	    locked: t.boolean
	}); 
} (api$2));

var routes = {};

Object.defineProperty(routes, "__esModule", { value: true });
routes.ROUTES = void 0;
var ROUTES;
(function (ROUTES) {
    ROUTES["CREATE_ORG"] = "/api/accounts/v5/organizations/create";
    ROUTES["UPDATE_ORG"] = "/api/accounts/v5/organizations/update";
    ROUTES["UPDATE_ORG_BILLING"] = "/api/accounts/v5/organizations/update-billing";
    ROUTES["GET_ORG"] = "/api/accounts/v5/organizations/get";
    ROUTES["LIST_ORGS"] = "/api/accounts/v5/organizations/list";
    ROUTES["SEARCH_ORGS"] = "/api/accounts/v5/organizations/search";
    ROUTES["UPDATE_ORG_LOCKS"] = "/api/accounts/v5/organizations/update-locks";
    ROUTES["CREATE_USER"] = "/api/accounts/v5/users/create";
    ROUTES["UPDATE_USER"] = "/api/accounts/v5/users/update";
    ROUTES["DELETE_USER"] = "/api/accounts/v5/users/delete";
    ROUTES["GET_USER"] = "/api/accounts/v5/users/get";
    ROUTES["LIST_USERS"] = "/api/accounts/v5/users/list";
    ROUTES["SEARCH_USERS"] = "/api/accounts/v5/users/search";
    ROUTES["GIVE_USER_ACCESS"] = "/api/accounts/v5/organizations/give-user-access";
    ROUTES["START_SIGNUP"] = "/api/accounts/v5/signup/start";
    ROUTES["GET_SIGNUP_USER"] = "/api/accounts/v5/signup/get-user";
    ROUTES["COMPLETE_SIGNUP"] = "/api/accounts/v5/signup/complete-signup";
    ROUTES["PROVISION_USER_TOKEN"] = "/api/accounts/v5/signup/provision-user-token";
    ROUTES["CREATE_DEV_INVITE"] = "/api/accounts/v5/invites/create";
    ROUTES["UPDATE_INVITE"] = "/api/accounts/v5/invites/update";
    ROUTES["DESTROY_INVITE"] = "/api/accounts/v5/invites/destroy";
    ROUTES["GET_USER_INVITES"] = "/api/accounts/v5/invites/user-invites";
    ROUTES["LIST_DEV_INVITES"] = "/api/accounts/v5/invites/list";
    ROUTES["ACCEPT_INVITE"] = "/api/accounts/v5/invites/accept";
    ROUTES["DECLINE_INVITE"] = "/api/accounts/v5/invites/decline";
    ROUTES["DOWNGRADE_APP_TO_TRIAL"] = "/api/accounts/v5/apps/downgrade-to-trial";
    ROUTES["UPGRADE_APP_FROM_TRIAL"] = "/api/accounts/v5/apps/upgrade-from-trial";
    ROUTES["UPDATE_APP_LOCKS"] = "/api/accounts/v5/apps/update-locks";
    ROUTES["EXTEND_TRIAL"] = "/api/accounts/v5/apps/extend-trial";
    ROUTES["CREATE_APP"] = "/api/accounts/v5/apps/create";
    ROUTES["UPDATE_APP"] = "/api/accounts/v5/apps/update";
    ROUTES["DELETE_APP"] = "/api/accounts/v5/apps/delete";
    ROUTES["GET_APP"] = "/api/accounts/v5/apps/get";
    ROUTES["LIST_APPS"] = "/api/accounts/v5/apps/list";
    ROUTES["SEARCH_APPS"] = "/api/accounts/v5/apps/search";
    ROUTES["GET_SENSITIVE_ACCESS_TOKEN"] = "/me/profile/auth_for_token";
    ROUTES["GET_PREFERRED_FACTOR"] = "/me/profile/get_preferred_factor";
    ROUTES["LIST_MFA_FACTORS"] = "/me/profile/list_mfa_factors";
    ROUTES["SEND_MFA_SMS"] = "/me/profile/request_otp_sms";
    ROUTES["REGISTER_TOTP_USER_MFA_FACTOR"] = "/me/profile/register_totp_factor";
    ROUTES["REGISTER_SMS_USER_MFA_FACTOR"] = "/me/profile/register_sms_factor";
    ROUTES["SET_PREFERRED_MFA_METHOD"] = "/me/profile/set_preferred_factor";
    ROUTES["DELETE_MFA_FACTOR"] = "/me/profile/delete_factor";
    ROUTES["VERIFY_MFA_FACTOR"] = "/me/profile/verify_factor";
    ROUTES["GENERATE_MFA_BACKUP_CODES"] = "/me/profile/generate_backup_codes";
})(ROUTES || (routes.ROUTES = ROUTES = {}));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(api$2, exports);
	__exportStar(models, exports);
	__exportStar(routes, exports); 
} (definitions$4));

(function (exports) {
	var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    var desc = Object.getOwnPropertyDescriptor(m, k);
	    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
	      desc = { enumerable: true, get: function() { return m[k]; } };
	    }
	    Object.defineProperty(o, k2, desc);
	}) : (function(o, m, k, k2) {
	    if (k2 === undefined) k2 = k;
	    o[k2] = m[k];
	}));
	var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
	    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(definitions$4, exports); 
} (dist$4));

var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(client, "__esModule", { value: true });
client.AccountsV5Client = void 0;
const sdk = __importStar(dist$6);
const types_accounts_hub_1 = dist$4;
class AccountsV5Client extends sdk.SDKClient {
    constructor() {
        super(...arguments);
        this.downgradeAppToTrial = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.DOWNGRADE_APP_TO_TRIAL
        });
        this.upgradeAppFromTrial = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPGRADE_APP_FROM_TRIAL
        });
        this.extendAppTrial = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.EXTEND_TRIAL
        });
        this.createUser = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.CREATE_USER
        });
        this.createOrg = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.CREATE_ORG
        });
        /**
         * @deprecated
         */
        this.giveUserAccess = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GIVE_USER_ACCESS
        });
        this.deleteUser = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.DELETE_USER
        });
        this.getOrg = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GET_ORG
        });
        this.getApp = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GET_APP
        });
        this.getUser = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GET_USER
        });
        this.listApps = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.LIST_APPS
        }));
        this.listOrgs = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.LIST_ORGS
        }));
        this.listUsers = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.LIST_USERS
        }));
        this.searchOrgs = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.SEARCH_ORGS
        }));
        this.searchApps = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.SEARCH_APPS
        }));
        this.searchUsers = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.SEARCH_USERS
        }));
        // === MUTATION ===
        this.createApp = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.CREATE_APP
        });
        this.deleteApp = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.DELETE_APP
        });
        this.updateOrg = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPDATE_ORG
        });
        this.updateOrgBilling = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPDATE_ORG_BILLING
        });
        this.updateApp = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPDATE_APP
        });
        this.updateUser = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPDATE_USER
        });
        this.updateOrgLocks = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPDATE_ORG_LOCKS
        });
        this.updateAppLocks = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPDATE_APP_LOCKS
        });
        // === SIGNUP ===
        this.startSignup = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.START_SIGNUP
        });
        this.getSignupUser = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GET_SIGNUP_USER
        });
        this.completeSignup = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.COMPLETE_SIGNUP
        });
        this.provisionUserToken = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.PROVISION_USER_TOKEN
        });
        // === DEVELOPER INVITES ===
        this.getUserInvites = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GET_USER_INVITES
        }));
        this.listDeveloperInvites = sdk.createPaginatedEndpoint(this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.LIST_DEV_INVITES
        }));
        this.createInvite = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.CREATE_DEV_INVITE
        });
        this.updateInvite = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.UPDATE_INVITE
        });
        this.destroyInvite = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.DESTROY_INVITE
        });
        this.acceptInvite = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.ACCEPT_INVITE
        });
        this.declineInvite = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.DECLINE_INVITE
        });
        // === Security and MFA ===
        /**
         * Get token for use with SensitiveProfileAccountsV5Client.
         * Currently, this allows for managing MFA configurations.
         */
        this.getSensitiveAccessToken = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GET_SENSITIVE_ACCESS_TOKEN
        });
        this.listMFAFactors = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.LIST_MFA_FACTORS
        });
        this.getUserPreferredMFAFactor = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.GET_PREFERRED_FACTOR
        });
        this.sendMFASMS = this.createEndpoint({
            path: types_accounts_hub_1.ROUTES.SEND_MFA_SMS
        });
    }
}
client.AccountsV5Client = AccountsV5Client;

var SensitiveProfileAccountsV5Client = {};

var hasRequiredSensitiveProfileAccountsV5Client;

function requireSensitiveProfileAccountsV5Client () {
	if (hasRequiredSensitiveProfileAccountsV5Client) return SensitiveProfileAccountsV5Client;
	hasRequiredSensitiveProfileAccountsV5Client = 1;
	Object.defineProperty(SensitiveProfileAccountsV5Client, "__esModule", { value: true });
	SensitiveProfileAccountsV5Client.SensitiveProfileAccountsV5Client = void 0;
	const types_accounts_hub_1 = dist$4;
	const _1 = requireDist();
	/**
	 * A client which performs actions once the user has elevated their session by reauthenticating
	 */
	let SensitiveProfileAccountsV5Client$1 = class SensitiveProfileAccountsV5Client extends _1.AccountsV5Client {
	    constructor() {
	        super(...arguments);
	        this.registerTOTPUserMFAFactor = this.createEndpoint({
	            path: types_accounts_hub_1.ROUTES.REGISTER_TOTP_USER_MFA_FACTOR
	        });
	        this.registerSMSUserMFAFactor = this.createEndpoint({
	            path: types_accounts_hub_1.ROUTES.REGISTER_SMS_USER_MFA_FACTOR
	        });
	        this.setPreferredMFAMethod = this.createEndpoint({
	            path: types_accounts_hub_1.ROUTES.SET_PREFERRED_MFA_METHOD
	        });
	        this.deleteMFAFactor = this.createEndpoint({
	            path: types_accounts_hub_1.ROUTES.DELETE_MFA_FACTOR
	        });
	        this.verifyMFAFactor = this.createEndpoint({
	            path: types_accounts_hub_1.ROUTES.VERIFY_MFA_FACTOR
	        });
	        this.generateMFABackupCodes = this.createEndpoint({
	            path: types_accounts_hub_1.ROUTES.GENERATE_MFA_BACKUP_CODES
	        });
	    }
	};
	SensitiveProfileAccountsV5Client.SensitiveProfileAccountsV5Client = SensitiveProfileAccountsV5Client$1;
	return SensitiveProfileAccountsV5Client;
}

var hasRequiredDist;

function requireDist () {
	if (hasRequiredDist) return dist$7;
	hasRequiredDist = 1;
	(function (exports) {
		var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    var desc = Object.getOwnPropertyDescriptor(m, k);
		    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
		      desc = { enumerable: true, get: function() { return m[k]; } };
		    }
		    Object.defineProperty(o, k2, desc);
		}) : (function(o, m, k, k2) {
		    if (k2 === undefined) k2 = k;
		    o[k2] = m[k];
		}));
		var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
		    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
		};
		Object.defineProperty(exports, "__esModule", { value: true });
		__exportStar(client, exports);
		__exportStar(requireSensitiveProfileAccountsV5Client(), exports); 
	} (dist$7));
	return dist$7;
}

var distExports = requireDist();

var main$1 = {exports: {}};

var name$1 = "dotenv";
var version$2 = "16.4.5";
var description$1 = "Loads environment variables from .env file";
var main = "lib/main.js";
var types$1 = "lib/main.d.ts";
var exports$1 = {
	".": {
		types: "./lib/main.d.ts",
		require: "./lib/main.js",
		"default": "./lib/main.js"
	},
	"./config": "./config.js",
	"./config.js": "./config.js",
	"./lib/env-options": "./lib/env-options.js",
	"./lib/env-options.js": "./lib/env-options.js",
	"./lib/cli-options": "./lib/cli-options.js",
	"./lib/cli-options.js": "./lib/cli-options.js",
	"./package.json": "./package.json"
};
var scripts$1 = {
	"dts-check": "tsc --project tests/types/tsconfig.json",
	lint: "standard",
	"lint-readme": "standard-markdown",
	pretest: "npm run lint && npm run dts-check",
	test: "tap tests/*.js --100 -Rspec",
	"test:coverage": "tap --coverage-report=lcov",
	prerelease: "npm test",
	release: "standard-version"
};
var repository$1 = {
	type: "git",
	url: "git://github.com/motdotla/dotenv.git"
};
var funding = "https://dotenvx.com";
var keywords = [
	"dotenv",
	"env",
	".env",
	"environment",
	"variables",
	"config",
	"settings"
];
var readmeFilename = "README.md";
var license$1 = "BSD-2-Clause";
var devDependencies$1 = {
	"@definitelytyped/dtslint": "^0.0.133",
	"@types/node": "^18.11.3",
	decache: "^4.6.1",
	sinon: "^14.0.1",
	standard: "^17.0.0",
	"standard-markdown": "^7.1.0",
	"standard-version": "^9.5.0",
	tap: "^16.3.0",
	tar: "^6.1.11",
	typescript: "^4.8.4"
};
var engines$1 = {
	node: ">=12"
};
var browser = {
	fs: false
};
var require$$4 = {
	name: name$1,
	version: version$2,
	description: description$1,
	main: main,
	types: types$1,
	exports: exports$1,
	scripts: scripts$1,
	repository: repository$1,
	funding: funding,
	keywords: keywords,
	readmeFilename: readmeFilename,
	license: license$1,
	devDependencies: devDependencies$1,
	engines: engines$1,
	browser: browser
};

const fs = require$$0$5;
const path = require$$1$1;
const os = require$$2;
const crypto = require$$3;
const packageJson = require$$4;

const version$1 = packageJson.version;

const LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;

// Parse src into an Object
function parse (src) {
  const obj = {};

  // Convert buffer to string
  let lines = src.toString();

  // Convert line breaks to same format
  lines = lines.replace(/\r\n?/mg, '\n');

  let match;
  while ((match = LINE.exec(lines)) != null) {
    const key = match[1];

    // Default undefined or null to empty string
    let value = (match[2] || '');

    // Remove whitespace
    value = value.trim();

    // Check if double quoted
    const maybeQuote = value[0];

    // Remove surrounding quotes
    value = value.replace(/^(['"`])([\s\S]*)\1$/mg, '$2');

    // Expand newlines if double quoted
    if (maybeQuote === '"') {
      value = value.replace(/\\n/g, '\n');
      value = value.replace(/\\r/g, '\r');
    }

    // Add to object
    obj[key] = value;
  }

  return obj
}

function _parseVault (options) {
  const vaultPath = _vaultPath(options);

  // Parse .env.vault
  const result = DotenvModule.configDotenv({ path: vaultPath });
  if (!result.parsed) {
    const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);
    err.code = 'MISSING_DATA';
    throw err
  }

  // handle scenario for comma separated keys - for use with key rotation
  // example: DOTENV_KEY="dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod"
  const keys = _dotenvKey(options).split(',');
  const length = keys.length;

  let decrypted;
  for (let i = 0; i < length; i++) {
    try {
      // Get full key
      const key = keys[i].trim();

      // Get instructions for decrypt
      const attrs = _instructions(result, key);

      // Decrypt
      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);

      break
    } catch (error) {
      // last key
      if (i + 1 >= length) {
        throw error
      }
      // try next key
    }
  }

  // Parse decrypted .env string
  return DotenvModule.parse(decrypted)
}

function _log (message) {
  console.log(`[dotenv@${version$1}][INFO] ${message}`);
}

function _warn (message) {
  console.log(`[dotenv@${version$1}][WARN] ${message}`);
}

function _debug (message) {
  console.log(`[dotenv@${version$1}][DEBUG] ${message}`);
}

function _dotenvKey (options) {
  // prioritize developer directly setting options.DOTENV_KEY
  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {
    return options.DOTENV_KEY
  }

  // secondary infra already contains a DOTENV_KEY environment variable
  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {
    return process.env.DOTENV_KEY
  }

  // fallback to empty string
  return ''
}

function _instructions (result, dotenvKey) {
  // Parse DOTENV_KEY. Format is a URI
  let uri;
  try {
    uri = new URL(dotenvKey);
  } catch (error) {
    if (error.code === 'ERR_INVALID_URL') {
      const err = new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development');
      err.code = 'INVALID_DOTENV_KEY';
      throw err
    }

    throw error
  }

  // Get decrypt key
  const key = uri.password;
  if (!key) {
    const err = new Error('INVALID_DOTENV_KEY: Missing key part');
    err.code = 'INVALID_DOTENV_KEY';
    throw err
  }

  // Get environment
  const environment = uri.searchParams.get('environment');
  if (!environment) {
    const err = new Error('INVALID_DOTENV_KEY: Missing environment part');
    err.code = 'INVALID_DOTENV_KEY';
    throw err
  }

  // Get ciphertext payload
  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;
  const ciphertext = result.parsed[environmentKey]; // DOTENV_VAULT_PRODUCTION
  if (!ciphertext) {
    const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);
    err.code = 'NOT_FOUND_DOTENV_ENVIRONMENT';
    throw err
  }

  return { ciphertext, key }
}

function _vaultPath (options) {
  let possibleVaultPath = null;

  if (options && options.path && options.path.length > 0) {
    if (Array.isArray(options.path)) {
      for (const filepath of options.path) {
        if (fs.existsSync(filepath)) {
          possibleVaultPath = filepath.endsWith('.vault') ? filepath : `${filepath}.vault`;
        }
      }
    } else {
      possibleVaultPath = options.path.endsWith('.vault') ? options.path : `${options.path}.vault`;
    }
  } else {
    possibleVaultPath = path.resolve(process.cwd(), '.env.vault');
  }

  if (fs.existsSync(possibleVaultPath)) {
    return possibleVaultPath
  }

  return null
}

function _resolveHome (envPath) {
  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath
}

function _configVault (options) {
  _log('Loading env from encrypted .env.vault');

  const parsed = DotenvModule._parseVault(options);

  let processEnv = process.env;
  if (options && options.processEnv != null) {
    processEnv = options.processEnv;
  }

  DotenvModule.populate(processEnv, parsed, options);

  return { parsed }
}

function configDotenv (options) {
  const dotenvPath = path.resolve(process.cwd(), '.env');
  let encoding = 'utf8';
  const debug = Boolean(options && options.debug);

  if (options && options.encoding) {
    encoding = options.encoding;
  } else {
    if (debug) {
      _debug('No encoding is specified. UTF-8 is used by default');
    }
  }

  let optionPaths = [dotenvPath]; // default, look for .env
  if (options && options.path) {
    if (!Array.isArray(options.path)) {
      optionPaths = [_resolveHome(options.path)];
    } else {
      optionPaths = []; // reset default
      for (const filepath of options.path) {
        optionPaths.push(_resolveHome(filepath));
      }
    }
  }

  // Build the parsed data in a temporary object (because we need to return it).  Once we have the final
  // parsed data, we will combine it with process.env (or options.processEnv if provided).
  let lastError;
  const parsedAll = {};
  for (const path of optionPaths) {
    try {
      // Specifying an encoding returns a string instead of a buffer
      const parsed = DotenvModule.parse(fs.readFileSync(path, { encoding }));

      DotenvModule.populate(parsedAll, parsed, options);
    } catch (e) {
      if (debug) {
        _debug(`Failed to load ${path} ${e.message}`);
      }
      lastError = e;
    }
  }

  let processEnv = process.env;
  if (options && options.processEnv != null) {
    processEnv = options.processEnv;
  }

  DotenvModule.populate(processEnv, parsedAll, options);

  if (lastError) {
    return { parsed: parsedAll, error: lastError }
  } else {
    return { parsed: parsedAll }
  }
}

// Populates process.env from .env file
function config (options) {
  // fallback to original dotenv if DOTENV_KEY is not set
  if (_dotenvKey(options).length === 0) {
    return DotenvModule.configDotenv(options)
  }

  const vaultPath = _vaultPath(options);

  // dotenvKey exists but .env.vault file does not exist
  if (!vaultPath) {
    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);

    return DotenvModule.configDotenv(options)
  }

  return DotenvModule._configVault(options)
}

function decrypt (encrypted, keyStr) {
  const key = Buffer.from(keyStr.slice(-64), 'hex');
  let ciphertext = Buffer.from(encrypted, 'base64');

  const nonce = ciphertext.subarray(0, 12);
  const authTag = ciphertext.subarray(-16);
  ciphertext = ciphertext.subarray(12, -16);

  try {
    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce);
    aesgcm.setAuthTag(authTag);
    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`
  } catch (error) {
    const isRange = error instanceof RangeError;
    const invalidKeyLength = error.message === 'Invalid key length';
    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data';

    if (isRange || invalidKeyLength) {
      const err = new Error('INVALID_DOTENV_KEY: It must be 64 characters long (or more)');
      err.code = 'INVALID_DOTENV_KEY';
      throw err
    } else if (decryptionFailed) {
      const err = new Error('DECRYPTION_FAILED: Please check your DOTENV_KEY');
      err.code = 'DECRYPTION_FAILED';
      throw err
    } else {
      throw error
    }
  }
}

// Populate process.env with parsed values
function populate (processEnv, parsed, options = {}) {
  const debug = Boolean(options && options.debug);
  const override = Boolean(options && options.override);

  if (typeof parsed !== 'object') {
    const err = new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate');
    err.code = 'OBJECT_REQUIRED';
    throw err
  }

  // Set process.env
  for (const key of Object.keys(parsed)) {
    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {
      if (override === true) {
        processEnv[key] = parsed[key];
      }

      if (debug) {
        if (override === true) {
          _debug(`"${key}" is already defined and WAS overwritten`);
        } else {
          _debug(`"${key}" is already defined and was NOT overwritten`);
        }
      }
    } else {
      processEnv[key] = parsed[key];
    }
  }
}

const DotenvModule = {
  configDotenv,
  _configVault,
  _parseVault,
  config,
  decrypt,
  parse,
  populate
};

main$1.exports.configDotenv = DotenvModule.configDotenv;
main$1.exports._configVault = DotenvModule._configVault;
main$1.exports._parseVault = DotenvModule._parseVault;
var config_1 = main$1.exports.config = DotenvModule.config;
main$1.exports.decrypt = DotenvModule.decrypt;
main$1.exports.parse = DotenvModule.parse;
main$1.exports.populate = DotenvModule.populate;

main$1.exports = DotenvModule;

const APP_NAME = "POWERSYNC_CLI";
const POWERSYNC_DIRECTORY = path$1.join(homedir(), "/.powersync");
const ENV_FILE_PATH = `${POWERSYNC_DIRECTORY}/.env.powersync`;
const ENDPOINTS = {
  ACCOUNTS_URL: "https://accounts.journeyapps.com",
  POWERSYNC_URL: "https://powersync-api.journeyapps.com"
};

var author = "JourneyApps";
var bin = {
	powersync: "./bin/run.js"
};
var publishConfig = {
	registry: "https://registry.npmjs.org/",
	access: "public"
};
var description = "PowerSync CLI";
var engines = {
	node: ">=20.0.0"
};
var files = [
	"/bin",
	"/dist",
	"/oclif.manifest.json"
];
var version = "0.6.1";
var bugs = "https://github.com/powersync-ja/cli/issues";
var types = "dist/index.d.ts";
var exports = "./lib/index.js";
var type = "module";
var homepage = "https://github.com/powersync-ja/cli";
var license = "UNLICENSED";
var name = "powersync";
var oclif = {
	bin: "powersync",
	dirname: "powersync",
	commands: "./dist/commands",
	plugins: [
		"@oclif/plugin-help",
		"@oclif/plugin-not-found",
		"@oclif/plugin-warn-if-update-available"
	],
	topics: {
		"instance:sync-rules": {
			description: "run \"powersync instance sync-rules\" to see a list of subcommands"
		},
		instance: {
			description: "run \"powersync instance\" to see a list of subcommands"
		}
	},
	topicSeparator: " "
};
var repository = "powersync-ja/cli";
var scripts = {
	build: "pnpm build:oclif-commands && pnpm bundle:powersync-deps && ./combine-bundle-and-build.sh && pnpm readme",
	"build:oclif-commands": "shx rm -rf dist && tsc -b",
	"bundle:powersync-deps": "shx rm -rf lib && rollup -c rollup.config.mjs",
	lint: "eslint . --ext .ts",
	postpack: "shx rm -f oclif.manifest.json",
	posttest: "pnpm run lint",
	prepack: "pnpm run build && oclif manifest && oclif readme",
	readme: "oclif readme && ./update-readme.sh",
	prepare: "pnpm run build",
	test: "vitest",
	release: "pnpm build && pnpm changeset publish",
	prettier: "prettier --write \"**/*.ts\"",
	version: "pnpm run readme && git add README.md",
	"pack:tarballs": "oclif pack tarballs --parallel",
	"changeset:version": "pnpm changeset version && pnpm readme"
};
var dependencies = {
	"@oclif/core": "^3.27.0",
	"@oclif/plugin-help": "^6.2.8",
	"@oclif/plugin-not-found": "^3.1.4",
	"@oclif/plugin-warn-if-update-available": "^3.1.11",
	"@rollup/plugin-typescript": "^11.1.6",
	clipboardy: "^4.0.0",
	dotenv: "^16.4.5",
	inquirer: "^9.3.6",
	ora: "^8.0.1"
};
var devDependencies = {
	"@changesets/cli": "^2.27.7",
	"@journeyapps-platform/powersync-types": "^0.22.0",
	"@journeyapps-platform/sdk-accounts-hub": "^7.0.1",
	"@journeyapps-platform/sdk-common": "^5.5.0",
	"@journeyapps-platform/sdk-powersync": "^0.22.1",
	"@journeyapps-platform/types-accounts-hub": "^7.0.1",
	"@powersync/service-sync-rules": "^0.18.2",
	"@rollup/plugin-commonjs": "^26.0.1",
	"@rollup/plugin-json": "^6.1.0",
	"@rollup/plugin-node-resolve": "^15.2.3",
	"@types/inquirer": "^9.0.7",
	"@types/node": "^20.16.1",
	esbuild: "^0.23.1",
	eslint: "^8.57.0",
	"eslint-config-oclif": "^5",
	"eslint-config-oclif-typescript": "^3.1.9",
	"eslint-config-prettier": "^9.1.0",
	"eslint-plugin-prettier": "^5.2.1",
	glob: "^11.0.0",
	oclif: "^4.14.29",
	prettier: "^3.3.3",
	rollup: "^4.21.2",
	"rollup-plugin-esbuild": "^6.1.1",
	shx: "^0.3.4",
	"strip-ansi": "^7.1.0",
	"ts-node": "^10.9.2",
	typescript: "^5.5.4",
	vitest: "^2.0.5"
};
var packageJSON = {
	author: author,
	bin: bin,
	publishConfig: publishConfig,
	description: description,
	engines: engines,
	files: files,
	version: version,
	bugs: bugs,
	types: types,
	exports: exports,
	type: type,
	homepage: homepage,
	license: license,
	name: name,
	oclif: oclif,
	repository: repository,
	scripts: scripts,
	dependencies: dependencies,
	devDependencies: devDependencies
};

const generateHeader = (bearerToken) => {
  return {
    Accept: "application/json",
    Authorization: `Bearer ${bearerToken}`,
    ContentType: "application/json",
    "user-agent": `${APP_NAME}/${packageJSON.version}`
  };
};

config_1({ path: ENV_FILE_PATH });
const accountsClient = (headers) => {
  return new distExports.AccountsV5Client({
    client: dist$6.createWebNetworkClient({ headers }),
    endpoint: ENDPOINTS.ACCOUNTS_URL
  });
};
const getOrgs = async (bearerToken) => {
  const headers = generateHeader(bearerToken);
  return accountsClient(headers).listOrgs({});
};
const getPowerSyncProjects = async (bearerToken) => {
  const headers = generateHeader(bearerToken);
  const response = await accountsClient(headers).listApps({});
  if (response.count === 0) {
    return [];
  }
  const projects = response.objects.filter((obj) => obj.features.includes(dist$4.ProjectFeatureFlags.POWERSYNC)).map((obj) => ({ name: obj.name, value: obj.id }));
  return projects;
};
const getCurrentPowerSyncProject = async () => {
  const headers = generateHeader(process.env.AUTH_TOKEN);
  const response = await accountsClient(headers).listApps({});
  const project = response.objects.find((obj) => obj.id === process.env.PROJECT_ID);
  if (!project) {
    throw new Error("No project found.");
  }
  return project;
};

export { accountsClient, getCurrentPowerSyncProject, getOrgs, getPowerSyncProjects };
